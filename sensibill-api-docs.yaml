openapi: 3.0.3
info:
  title: Sensibill API
  description: Receipt Extraction API
  version: 1.2022.3.30
  contact:
    name: Sensibill
    url: 'https://getsensibill.com/'
    email: prodsupport@getsensibill.com
  termsOfService: 'https://getsensibill.com/terms-of-service'
  
tags:
  - name: Home
    description: Home
  - name: Authentication
    description: Authentication
  - name: Users
    description: Users
  - name: Folders
    description: Folders
  - name: Receipts
    description: Receipts
  - name: Reminders
    description: Reminders
  - name: Exports
    description: Exports
  - name: Lookups
    description: Lookups
  - name: Emails
    description: Emails
  - name: Merchants
    description: Merchants
servers:
  - url: 'https://{environment}.sensibill.io/api/v1'
    variables:
      environment:
        default: receipts-sandbox
        enum:
          - receipts-sandbox
paths:
  /:
    get:
      operationId: getApiInfo
      tags:
        - Home
      security: []
      summary: API Home Endpoint
      description: 'The API Home Endpoint returns general information about the Sensibill API. It should be the first point of contact for any system integrating with Sensibill, as it will provide clients with up-to-date URLs for other endpoints, as well as status information on the general Sensibill architecture.'
      responses:
        '200':
          description: Success. This is the only valid status code from the home endpoint. Anything else indicates internal server problems.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiInfoDto'
  /jwtAuthenticate:
    post:
      operationId: authenticateWithJwt
      tags:
        - Authentication
      summary: Authentication using JWT
      description: 'Allows clients to authenticate and acquire an access token using a JSON Web Token. <br/><br/>If successful, the response includes a user or client access token which can be used as a session token for other authenticated endpoints in the Sensibill API. <br/><br/>There are two types of access tokens - user tokens and client tokens. Passing in your clientID in the ''sub'' claim (or individual ID claim field) of your JWT will return a client access token. Passing a user''s access ID in your ID Claim field will return a user access token instead. <br/><br/>Your client account must be configured to allow JWT (please reach out to the Sensibill Support Team). The API supports JWS and JWE as JWT implementations. <br/><br/>JWS currently supports RSA and ECDSA signing algorithms (RS256, RS384, RS512, ES256, ES384, ES512). Public keys for signature verification should be made available through a publicly accessible URL. JWS header must have ''alg'' and ''kid'' parameters and the payload must have at least ''sub'' and ''iat'' claims. The ''sub'' claim is used to identify either a user or a client. If there is a desire to use another claim for those purposes then it can be configured during the client account setup. JWS implementation also supports ''exp'', ''aud'', ''iss'' and ''scp'' claims. If there is a need to validate those claims they should be configured as part of the client account setup. <br/><br/>JWE currently supports RSAES OAEP using default parameters (''alg'': RSA-OAEP) for encrypting the Content Encryption Key (CEK) and AES GCM using 256-bit key (''enc'': A256GCM) for encrypting the content. Please reach out to the Sensibill Support Team to receive Sensibill’s public key to be used for JWT encryption. JWE’s content is expected to be a JWS conforming to the JWS requirements mentioned earlier. <br/><br/>The response also returns a token_id. This can not be used for authenticating regular requests, but is required for using our query parameter based signature method.'
      requestBody:
        $ref: '#/components/requestBodies/JwtAuthenticateRequest'
      responses:
        '200':
          description: Success. Use the token in the body for other authenticated calls as this user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtAuthenticateResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: Unauthorized. This will occur if the credentials you have provided are invalid.
  /invalidate:
    post:
      operationId: invalidateAccessToken
      tags:
        - Authentication
      summary: Invalidate access token
      description: 'This endpoint can be used to permanently invalidate an access token. Simply POST to this endpoint using a normal authenticated request, and whatever access token was used in the request will be invalid for any further requests.'
      responses:
        '200':
          description: Success. The token was successfully invalidated.
        '401':
          description: Unauthorized. This will occur if the credentials you have provided are invalid.
  /logout:
    get:
      operationId: logout
      tags:
        - Authentication
      summary: Logout user
      description: 'Performs a user logout, clearing the session and invalidating the access token. Works similarly to /invalidate, but simply as a GET call.'
      responses:
        '200':
          description: Success. The user was logged out. This is the only valid status code from the logout endpoint. Anything else indicates internal server problems.
  /clientInfo:
    get:
      operationId: getClientInfo
      tags:
        - Authentication
      summary: Client information
      description: 'Allows a client to retrieve information about itself. You can use this endpoint with the client''s OAuth key and secret using Basic authentication, with a client access token, or with a user access token. When using a client access token, the response also includes the expiration time for the token used.'
      responses:
        '200':
          description: Success. The information for the client was retrieved and returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientInfoResponseDto'
        '401':
          description: Unauthorized. This will occur if the credentials provided are invalid.
        '403':
          description: Access Error. This will occur if the credentials provided are valid but not associated with a suitable client.
  /authorizationGrant:
    get:
      operationId: getAuthorizationGrant
      tags:
        - Authentication
      summary: Request an authorization grant
      description: 'Allows clients to request an authorization grant to begin the OAuth2 flow. As an OAuth2 endpoint, all of the parameters and result variables from this endpoint have names that use underscores, versus the rest of the API which is camel-cased. <br/><br/>Clients must provide a username and password in the Authorization header of the request (or equivalent accessID, accessSecret and credentialType for SSO clients). This can be accomplished by setting a ''basic'' authentication header using the user''s username and password in compliance with Section 2 of RFC 2617 like shown below: <br/><br/><code>Authorization: ''Basic base64(username:password)''</code> <br/><br/><strong>Types of secrets</strong> <br/><br/>Sensibill supports 2 modes of operation for client secrets: <br/><br/>In the case where a client can guarantee a secret that is closely guarded, it allows for user administration support (e.g, deactivate, reactivate users, etc) <br/>In the case where the secret may not be so secret ie. embedded in an application, the administrative actions are not allowed. <br/><br/>For an example, please refer to <a href=''./apiref/demo.html#step_five''>''Authentication Step Five'' of the jQuery Demo</a>.'
      parameters:
        - $ref: '#/components/parameters/ClientIDParameter'
        - $ref: '#/components/parameters/ResponseTypeParameter'
        - $ref: '#/components/parameters/RedirectURIParameter'
        - $ref: '#/components/parameters/CredentialTypeParameter'
        - $ref: '#/components/parameters/RedirectParameter'
      responses:
        '200':
          description: Success. The authorization grant was created successfully. Use the code in the body with the Access Token endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationResponse'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter. It can also occur if you try to log in using a credentialType which your client is not authorized for.'
        '401':
          description: Unauthorized. This will occur if the credentials you have provided are invalid.
  /accessToken:
    post:
      operationId: createAccessToken
      tags:
        - Authentication
      summary: Obtain an Access Token
      description: 'Allows a client to use its credentials to obtain an access token, to swap an authorization grant for an access token, or to swap a refresh token for a new access token. There are two types of access tokens - user tokens and client tokens. <br/><br/>A client token authenticates a specific client, e.g. your architecture and servers. client tokens can be used to access any resources owned by the client, such as general information on users your client has created. Client tokens are also required to register new users or make requests on their behalf such as the user posting a receipt. <br/><br/>A user token authenticates a specific user to our system, e.g. Jane Doe of Winnipeg, Manitoba. A user token will be required if you want to access specific data about a user, such as the details of that user''s receipts. <br/><br/>Token expiry information is in the <code>expires_in</code> and <code>refresh_expires_in</code> fields. <br/><br/>You can also retrieve the expiration times for user and client access tokens using the user GET endpoint, <code>/users/:userID</code>, and the clientInfo GET endpoint, <code>/clientInfo</code>, respectively. <br/><br/>No matter which kind of access token is being requested, the client MUST include their Client Key and Client Secret as the username and password, respectively, in the HTTP Authorization header, on top of providing required parameters below. <br/><br/>This can be accomplished by setting a ''basic'' authentication header using the Client Key and Client Secret as username and password like shown below: <br/><br/><code>Authorization: ''Basic base64(ClientKey:ClientSecret)''</code> <br/><br/>The access token is currently always a bearer token, which should be sent in the ''Authorization'' header in the format ''Bearer accessToken''. <br/><br/>In the future, other token types may also be used, so please check the <code>token_type</code> provided in the response. <br/><br/>For an example, please refer to <a href=''./apiref/demo.html#step_six''>''Authentication Step Six'' of the jQuery Demo</a>. <br/><br/>The response also returns a <code>token_id</code>. This can not be used for authenticating regular requests, but is required for using our query parameter based signature method.'
      parameters:
        - $ref: '#/components/parameters/GrantTypeParameter'
        - $ref: '#/components/parameters/TokenRedirectURIParameter'
        - $ref: '#/components/parameters/CodeParameter'
        - $ref: '#/components/parameters/RefreshTokenParameter'
      requestBody:
        $ref: '#/components/requestBodies/AccessTokenRequest'
      responses:
        '200':
          description: Success. The access token was created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter. It can also occur if you put in the wrong Redirect URI, for example, if you put one that doesn''t match what you provided when you made the authorization grant request.'
        '401':
          description: Unauthorized. This will occur if the client key/secret you have provided is invalid.
  /users:
    post:
      operationId: createUser
      tags:
        - Users
      summary: Register a user
      description: 'This API call allows you to register a new user. To call this endpoint, you must use a client-token. You can not call this endpoint without it.'
      requestBody:
        $ref: '#/components/requestBodies/UserRequest'
      responses:
        '200':
          description: Success. The new user was successfully registered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
  /jwtRegister:
    post:
      operationId: registerWithJwt
      tags:
        - Users
      summary: Register a user using JWT
      description: 'This API call allows you to register a new user using a JSON Web Token. <br/><br/>Your client account must be configured to allow JWT (please reach out to the Sensibill Support Team). The API supports JWS and JWE as JWT implementations. <br/><br/>JWS currently supports RSA and ECDSA signing algorithms (RS256, RS384, RS512, ES256, ES384, ES512). Public keys for signature verification should be made available through a publicly accessible URL. JWS header must have ''''alg'''' and ''''kid'''' parameters and the payload must have at least ''''sub'''' and ''''iat'''' claims. The ''''sub'''' claim will be used as a user access ID for the user being created. If there is a desire to use another claim for those purposes then it can be configured during the client account setup. JWS implementation also supports ''''exp'''', ''''aud'''', ''''iss'''' and ''''scp'''' claims. If there is a need to validate those claims they should be configured as part of the client account setup. <br/><br/>JWE currently supports RSAES OAEP using default parameters (''''alg'''': RSA-OAEP) for encrypting the Content Encryption Key (CEK) and AES GCM using 256-bit key (''''enc'''': ''''A256GCM'''') for encrypting the content. Please reach out to the Sensibill Support Team to receive Sensibill’s public key to be used for JWT encryption. JWE’s content is expected to be a JWS conforming to the JWS requirements mentioned earlier.'
      requestBody:
        $ref: '#/components/requestBodies/JwtUserRequest'
      responses:
        '200':
          description: Success. The new user was successfully registered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, if you provide an invalid value for a required parameter, or if the JSON Web Token is either incomplete or cannot be verified. This status code will also occur if you try to register the same user more than once. In that case, an InvalidParametersError response will be returned containing the error ''Access ID is already registered.'''
  '/users/{userID}':
    get:
      operationId: getUserById
      tags:
        - Users
      summary: Retrieve account information
      description: 'This allows you to retrieve the account information for a user. The userID can be either the Sensibill specific userID or can be "me", which will return the user object for the user who is authenticated with the access token. <br/><br/>Accounts on the system can be in one of two states - registered or unregistered. For most normal purposes, you will deal only with registered accounts, such as those you create using the registration endpoint. However, it is possible for an account to be on our system, but unregistered. This can happen if we receive a receipt from a POS system for a user that is not yet on our system. <br/><br/>This endpoint accepts both user tokens and client tokens. <br/><br/>When using a user token, you are only allowed to retrieve the account information for the user associated with the access token you supply. <br/><br/>You can only use a client token with this endpoint if that has been explicitly enabled on your account. Please contact the Sensibill team in order to have this policy enabled on your account - it is disabled by default. When you request User information using a client token, only a limited number of fields will be returned.'
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
        - $ref: '#/components/parameters/ExcludeAlertsParameter'
      responses:
        '200':
          description: Success. The information for the user account was retrieved and returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if the access-token you have provided is not authorized to retrieve the information for the user you have requested. This can also occur if you attempt to use a client token with this endpoint.
        '404':
          description: Not Found. The userID you have provided is invalid. It should be either "me" or a valid userID.
    delete:
      operationId: deleteUser
      tags:
        - Users
      summary: Delete user account
      description: 'This allows you to delete a user account. The userID can be either the Sensibill specific userID or "me", which will delete the user object for the user who is authenticated with the access token.</br>This endpoint can be used with either a client token or a user token.</br>When using a user token, you are only allowed to delete the account information for the user associated with the access token you supply in.</br>The optional export parameters may be passed as query parameters or in the request body.</br>In order to use this endpoint with client tokens, you must have that feature explicitly enabled on your account. It is disabled by default. Please contact the Sensibill team in order to have this enabled.</br> Deleting a user will also purge all receipts from Sensibill''s system.'
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
        - $ref: '#/components/parameters/DeleteUserExportParameter'
        - $ref: '#/components/parameters/DeleteUserExportEmailParameter'
      responses:
        '200':
          description: Success. The user was successfully queued for destruction.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObjectResponseDto'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if the access-token you have provided is not authorized to retrieve the information for the user you have requested. This can also occur if you attempt to use a client token with this endpoint.
        '404':
          description: Not Found. The userID you have provided is invalid. It should be either "me" or a valid userID.
    put:
      operationId: upsertUser
      tags:
        - Users
      summary: Update account information
      description: 'This allows you to update the account information of a user. <br/><br/>This endpoint can be used with either a user token or a client token. <br/><br/>When using a user token, the userID can be either the Sensibill specific ID or "me", which will point to the user object for the user who is authenticated with the access token. <br/><br/>In order to use this endpoint with a client token, you must have this policy explicitly enabled on your account. It will be disabled by default. Please contact the Sensibill team if you need to have this policy enabled on your account. When using a client token,  you are only allowed to change the ''status'' field on a user''s account. This is provided so that Clients can disable and re-enable user accounts without requiring them to log in.'
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/UserUpdateRequest'
      responses:
        '200':
          description: Success. The information for the user account was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObjectResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if the access-token you have provided is not authorized to update the information for this user. This can also occur if you attempt to use a client token with this endpoint.
        '404':
          description: Not Found. The userID you have provided is invalid. It should be either "me" or a valid userID.
  '/users/{userID}/counts':
    get:
      operationId: getUserCounts
      tags:
        - Users
      summary: Retrieve resource counts for the user
      description: This allows you to retrieve counts of resources by different filters. <br/><br/>"Filter" is the shortcut for a group of prespecified fields (and their respective values) for which the query results needs to be filtered by.
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
        - $ref: '#/components/parameters/UserCountFiltersParameter'
        - $ref: '#/components/parameters/UserCountTodayParameter'
      responses:
        '200':
          description: Success. The information for the user account was retrieved and returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCountResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit the filters parameter, provide an invalid filter name or use the ''triggeredReminders'' filter without the ''today'' parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if the access-token you have provided is not authorized to retrieve the information for the user you have requested. This can also occur if you attempt to use a client token with this endpoint.
        '404':
          description: Not Found. The userID you have provided is invalid. It should be either "me" or a valid userID.
  '/users/{userID}/tags':
    get:
      operationId: getUserTags
      tags:
        - Users
      summary: List all the hash tags used by a user
      description: Users are allowed to use hash-tags when entering the note associated with a given receipt. This endpoint allows you to retrieve all the hash-tags the user has on all of their receipts.
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTagsResponseDto'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to access tags for a user that your access token is not authorized to access. This can also occur if you attempt to use a client token with this endpoint.
  '/users/{userID}/tips':
    get:
      operationId: getUserTips
      tags:
        - Users
      summary: List the tips for a user
      description: This allows you to list available tips for a user
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
        - $ref: '#/components/parameters/LocaleParameter'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTipsResponseDto'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
  /users/emailAvailability:
    get:
      operationId: getEmailAvailability
      tags:
        - Users
      summary: Check for the availability of an email address to register a new user.
      description: This endpoint allows you to check whether a particular email address to register a new account is available or not before you register a new user. <br/><br/>This endpoint can be used with either a client token or a user token.
      parameters:
        - $ref: '#/components/parameters/EmailParameter'
      responses:
        '200':
          description: 'Success. This status code will be issued both when the email address is available, and when it is not. You need to check the body of the response to see whether or not the email address is available.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAvailabilityResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit the email address, or the email address provided is not well formed.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
  /users/receiptEmailAvailability:
    get:
      operationId: getReceiptEmailAvailability
      tags:
        - Users
      summary: Check for the availability of a receipt email address.
      description: 'This endpoint allows you to check whether a particular receipt email address to register a new account is available or not before you register a new user. If the given email address is available, then this endpoint will return back a JSON object with the property available set to true. If the email address is taken, then this endpoint will return back the property available set to false, along with a list of alternative email addresses. <br/><br/>This endpoint can be used with either a client token or a user token.'
      parameters:
        - $ref: '#/components/parameters/ReceiptEmailParameter'
      responses:
        '200':
          description: 'Success. This status code will be issued both when the email address is available, and when it is taken. You need to check the body of the response to see whether or not the email address is available.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiptEmailAvailabilityResponseDto'
        '400':
          description: Bad Request. This will occur if you omit the email address or if the email address is not well formed.
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
  /users/usernameAvailability:
    get:
      operationId: getUsernameAvailability
      tags:
        - Users
      summary: Check for the availability of a username.
      description: 'This endpoint allows you to check whether a particular username to register a new account is available or not before you register a new user. If the given username is available, then this endpoint will return back a JSON object with the property available set to true. If the username is taken, then this endpoint will return back the property available set to false. <br/><br/>This endpoint can be used with either a client token or a user token. <br/><br/>In order to use this endpoint, you must have that policy explicitly enabled on your account. It is disabled by default. Please contact the Sensibill team in order to have this enabled.'
      parameters:
        - $ref: '#/components/parameters/UsernameParameter'
        - $ref: '#/components/parameters/UsernameAvailabilityCredentialTypeParameter'
      responses:
        '200':
          description: 'Success. This status code will be issued both when the username is available, and when it is taken. You need to check the body of the response to see whether or not the username is available.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameAvailabilityResponseDto'
        '400':
          description: Bad Request. This will occur if you omit the username.
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
  /folders:
    get:
      operationId: getFolders
      tags:
        - Folders
      summary: List the folders for a user
      description: This endpoint allows you to list the folders in the authenticating user's account.
      parameters:
        - $ref: '#/components/parameters/LocaleParameter'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFoldersResponseDto'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
    post:
      operationId: createFolder
      tags:
        - Folders
      summary: Add a new folder for a user
      description: This endpoint allows you to add a folder to the authenticating user's account.
      requestBody:
        $ref: '#/components/requestBodies/FolderRequest'
      responses:
        '200':
          description: Success. The folder was successfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddFolderResponseDto'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
    delete:
      operationId: deleteFolders
      tags:
        - Folders
      summary: Delete multiple folders for a user
      description: This endpoint allows you to perform a batch deletion of folders on a User object.
      parameters:
        - $ref: '#/components/parameters/FolderIdsParameter'
        - $ref: '#/components/parameters/DeleteFoldersDeleteReceiptsParameter'
      requestBody:
        $ref: '#/components/requestBodies/FoldersDeleteRequest'
      responses:
        '200':
          description: Success. The folders were successfully removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObjectResponseDto'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '404':
          description: Not Found. One or more folderIDs you have provided in the request do not belong to this user. See the user object for a list of their folders.
  '/folders/{folderId}':
    put:
      operationId: upsertFolder
      tags:
        - Folders
      summary: Update a folder for a user
      description: This endpoint allows you to update a folder in the authenticating user's account.
      parameters:
        - $ref: '#/components/parameters/FolderIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/FolderUpdateRequest'
      responses:
        '200':
          description: Success. The folder was successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObjectResponseDto'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '404':
          description: Not Found. The folderID you have provided is not one of this user's folders. See the user object for a list of their folders.
    delete:
      operationId: deleteFolder
      tags:
        - Folders
      summary: Delete a folder for a user
      description: This endpoint allows you to delete a folder from the authenticating user's account.
      parameters:
        - $ref: '#/components/parameters/FolderIdParameter'
        - $ref: '#/components/parameters/DeleteFolderDeleteReceiptsParameter'
      requestBody:
        $ref: '#/components/requestBodies/FolderDeleteRequest'
      responses:
        '200':
          description: Success. The folder was successfully removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObjectResponseDto'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '404':
          description: Not Found. The folderID you have provided is not one of this user's folders. See the user object for a list of their folders.
  '/folders/{folderId}/receipts':
    put:
      operationId: addReceiptsToFolder
      tags:
        - Folders
      summary: Add receipt(s) to folder
      description: This endpoint allows you to add multiple receipts to a folder owned by the user
      parameters:
        - $ref: '#/components/parameters/FolderIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/AddReceiptsToFolderRequest'
      responses:
        '200':
          description: Success. Receipts were successfully added to folder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddReceiptsToFolderResponseDto'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '404':
          description: Not Found. The folderID or one of the receipt IDs you have provided do not exist or do not belong to the user.
    delete:
      operationId: removeReceiptsFromFolder
      tags:
        - Folders
      summary: Remove receipt(s) from folder
      description: This endpoint allows you to remove multiple receipts from a folder owned by the user
      parameters:
        - $ref: '#/components/parameters/FolderIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/RemoveReceiptsFromFolderRequest'
      responses:
        '200':
          description: Success. Receipts were successfully removed from the folder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddReceiptsToFolderResponseDto'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '404':
          description: Not Found. The folderID or one of the receipt IDs you have provided do not exist or do not belong to the user.
  /receipts:
    get:
      operationId: getReceipts
      tags:
        - Receipts
      summary: List Receipts
      description: 'This will retrieve all of the receipts that are associated with the authenticated user making the API request. Additionally, filters can be provided for paging and filtering the list of receipts. The returned data contains an array of receipts. <br/><br/>_NOTE_: All query parameters under searchParams must be flattened. E.g. a querystring that involves a fulltext search should look like <code>searchParams.fulltext=dvd</code>, not <code>searchParams={''fulltext'': ''dvd''}</code> <br/><br/>__*IMPORTANT*__: Display format is the default. Please use <code>format=data</code> to get the response in the data format.'
      parameters:
        - $ref: '#/components/parameters/ReceiptFormatParameter'
        - $ref: '#/components/parameters/ReceiptsFilterParameter'
        - $ref: '#/components/parameters/ReceiptsLimitParameter'
        - $ref: '#/components/parameters/ReceiptsStartIndexParameter'
        - $ref: '#/components/parameters/ReceiptIncludeSubrowsParameter'
        - $ref: '#/components/parameters/ReceiptExcludeRawParameter'
        - $ref: '#/components/parameters/ReceiptsSearchParamsFulltextParameter'
        - $ref: '#/components/parameters/ReceiptsSearchParamsDateToParameter'
        - $ref: '#/components/parameters/ReceiptsSearchParamsDateFromParameter'
        - $ref: '#/components/parameters/ReceiptsSearchParamsUpdatedAfterParameter'
        - $ref: '#/components/parameters/ReceiptsSearchParamsSharedMetaDataTagsParameter'
        - $ref: '#/components/parameters/ReceiptsSearchParamsSharedMetaDataExpenseTypeParameter'
        - $ref: '#/components/parameters/ReceiptsSearchParamsSharedMetaDataExcludeFolderParameter'
        - $ref: '#/components/parameters/ReceiptsSearchParamsSharedMetaDataFoldersParameter'
        - $ref: '#/components/parameters/ReceiptsSearchParamsSharedMetaDataFavorite'
        - $ref: '#/components/parameters/ReceiptsSearchParamsSharedMetaDataReceiptCategoriesParameter'
        - $ref: '#/components/parameters/ReceiptsSearchParamsCurrencyCodeParameter'
        - $ref: '#/components/parameters/ReceiptsSearchParamsTenderTypeParameter'
        - $ref: '#/components/parameters/ReceiptsSearchParamsLifecycleStatusParameter'
        - $ref: '#/components/parameters/ReceiptsSearchParamsExportedParameter'
        - $ref: '#/components/parameters/ReceiptsSearchParamsRemindersParameter'
        - $ref: '#/components/parameters/ReceiptsSearchParamsReminderDateAfterParameter'
        - $ref: '#/components/parameters/ReceiptsSearchParamsPrivateMetaDataParameter'
        - $ref: '#/components/parameters/ReceiptsSearchParamsAccountTransactionDataParameter'
        - $ref: '#/components/parameters/ReceiptsSearchParamsAccountTransactionDataIdParameter'
        - $ref: '#/components/parameters/ReceiptsSearchParamsMerchantIdParameter'
        - $ref: '#/components/parameters/ReceiptsSearchParamsReceiptIdsParameter'
        - $ref: '#/components/parameters/ReceiptsSearchParamsReceiptNumberParameter'
        - $ref: '#/components/parameters/ReceiptsSearchParamsSourceParameter'
        - $ref: '#/components/parameters/ReceiptsSearchParamsOperatorNameParameter'
        - $ref: '#/components/parameters/ReceiptsSortByParameter'
        - $ref: '#/components/parameters/ReceiptScaleParameter'
        - $ref: '#/components/parameters/LocaleParameter'
      responses:
        '200':
          description: Success. The list of receipts for the user was successfully retrieved.
          content:
            application/json:
              examples:
                format = data:
                  value:
                    receipts:
                      - id: BMfspyl0nZlNBeazhp8H
                        arrivalDateTime: '2021-01-14T20:26:25.027Z'
                        status:
                          lifecycleStatus: pending_validation
                          lastUpdateDateTime: '2021-01-14T20:26:25.274Z'
                        sourceDocument:
                          format: image
                          url: 'https://receipts-sandbox.sensibill.io/api/v1/receipt/BMfspyl0nZlNBeazhp8H/image'
                          imagePreview: 'https://receipts-sandbox.sensibill.io/api/v1/receipt/BMfspyl0nZlNBeazhp8H/image'
                        content:
                          currencyCode: CAD
                          purchaseDate: '2019-06-23'
                          purchaseTime: '13:09:37'
                          tenders:
                            - amount: 23.53
                              type: Visa
                              maskedCardNumber: '************6305'
                              currencyCode: CAD
                          merchant:
                            categoryCode: shopping
                            name: Walmart
                          total:
                            beforeTax: 23.53
                            afterTax: 23.53
                        confidence:
                          tenders:
                            - amount: HIGH
                          total:
                            beforeTax: HIGH
                            afterTax: HIGH
                        userMetadata:
                          isNew: true
                      - id: xH836mmqdaoju_AwIlE-
                        arrivalDateTime: '2021-01-14T20:26:50.731Z'
                        status:
                          lifecycleStatus: active
                          lastUpdateDateTime: '2021-01-14T20:26:50.764Z'
                        sourceDocument:
                          format: image
                          url: 'https://receipts-sandbox.sensibill.io/api/v1/receipt/xH836mmqdaoju_AwIlE-/image'
                          imagePreview: 'https://receipts-sandbox.sensibill.io/api/v1/receipt/xH836mmqdaoju_AwIlE-/image'
                        content:
                          currencyCode: CAD
                          purchaseDate: '2019-06-19'
                          purchaseTime: '12:45:00'
                          tenders:
                            - amount: 7
                              type: Credit
                              maskedCardNumber: '************6305'
                              currencyCode: CAD
                          merchant:
                            categoryCode: groceries-liquor
                            name: Loblaws
                          total:
                            beforeTax: 7
                            taxes:
                              - type: HST
                            afterTax: 7
                        confidence:
                          tenders:
                            - amount: HIGH
                          total:
                            beforeTax: HIGH
                            taxes:
                              - {}
                            afterTax: HIGH
                        userMetadata:
                          isNew: true
                    count: 2
                format = display:
                  value:
                    receipts:
                      - arrivalTime: '2021-01-14T20:26:25.027Z'
                        classification: item_receipt
                        display:
                          name:
                            text: Walmart
                            textStyle: name
                          date:
                            text: 'Jun 23, 2019'
                            textStyle: date
                          amount:
                            text: $23.53
                            textStyle: amount
                            backgroundImage: 'https://receipts-sandbox.sensibill.io/img/categories/icons-large/general-retail@3x.png'
                            backgroundImageLight: 'https://receipts-sandbox.sensibill.io/img/categories/listing-light/receipt-listing-general-retail-light@3x.png'
                            backgroundImageDark: 'https://receipts-sandbox.sensibill.io/img/categories/listing-dark/receipt-listing-general-retail@3x.png'
                          duplicates: []
                          favorite: false
                          classification: item_receipt
                          id: BMfspyl0nZlNBeazhp8H
                          link: 'https://receipts-sandbox.sensibill.io/#/receipt/BMfspyl0nZlNBeazhp8H'
                          subrows: []
                          actions:
                            delete: true
                            edit: true
                            export: true
                          isValidationRequired: false
                        duplicateStatus: no_duplicate
                        id: BMfspyl0nZlNBeazhp8H
                        lifecycleStatus: pending_validation
                        listingSortDate: '2019-06-23T13:09:37.000Z'
                        merchantID: walmart
                        receiptDate: '2019-06-23T13:09:37.000Z'
                        receiptNumber: '06818027388980068'
                        recentlyAdded: true
                        renderURL: 'https://receipts-sandbox.sensibill.io/#/receipt/BMfspyl0nZlNBeazhp8H'
                        validationStatus: failed
                        merchant:
                          category: '45299'
                          merchantID: walmart
                          name: Walmart
                          status: active
                        privateMetaData: {}
                        sharedMetaData:
                          favorite: false
                          folders: []
                          tags: []
                          note: ''
                          receiptCategory: shopping
                        total:
                          currencyCode: CAD
                          grand: 23.53
                      - arrivalTime: '2021-01-14T20:26:50.731Z'
                        classification: item_receipt
                        display:
                          name:
                            text: Loblaws
                            textStyle: name
                          date:
                            text: 'Jun 19, 2019'
                            textStyle: date
                          amount:
                            text: $7.00
                            textStyle: amount
                            backgroundImage: 'https://receipts-sandbox.sensibill.io/img/categories/icons-large/groceries-liquor@3x.png'
                            backgroundImageLight: 'https://receipts-sandbox.sensibill.io/img/categories/listing-light/receipt-listing-groceries-liquor-light@3x.png'
                            backgroundImageDark: 'https://receipts-sandbox.sensibill.io/img/categories/listing-dark/receipt-listing-groceries-liquor@3x.png'
                          duplicates: []
                          favorite: false
                          classification: item_receipt
                          id: xH836mmqdaoju_AwIlE-
                          link: 'https://receipts-sandbox.sensibill.io/#/receipt/xH836mmqdaoju_AwIlE-'
                          subrows: []
                          actions:
                            delete: true
                            edit: true
                            export: true
                          isValidationRequired: false
                        duplicateStatus: no_duplicate
                        id: xH836mmqdaoju_AwIlE-
                        lifecycleStatus: active
                        listingSortDate: '2019-06-19T12:45:00.000Z'
                        merchantID: loblaws
                        receiptDate: '2019-06-19T12:45:00.000Z'
                        receiptNumber: 404  404     49
                        recentlyAdded: true
                        renderURL: 'https://receipts-sandbox.sensibill.io/#/receipt/xH836mmqdaoju_AwIlE-'
                        validationStatus: ok
                        merchant:
                          category: '44511'
                          merchantID: loblaws
                          name: Loblaws
                          status: active
                        privateMetaData: {}
                        sharedMetaData:
                          favorite: false
                          folders: []
                          tags: []
                          note: ''
                          receiptCategory: groceries-liquor
                        total:
                          currencyCode: CAD
                          grand: 7
                    count: 2
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ReceiptDataListDto'
                  - $ref: '#/components/schemas/ReceiptDisplayListDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter, such as an invalid limit or startIndex parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. You must provide a user-token in order to get a list of receipts for a given user.
    post:
      operationId: createReceipt
      tags:
        - Receipts
      summary: Create a new receipt (synchronous)
      description: 'This API will allow clients to create a new receipt from a paper image. <br/><br/><strong>Important</strong> <br/><br/>This method of creating a receipt should not be performed in a production system, instead the asynchronous method should be used. This endpoint is still available for simplicity to allow new developers to get accustomed to the integration.'
      requestBody:
        $ref: '#/components/requestBodies/ReceiptCreateRequest'
      responses:
        '200':
          description: Success. The new receipt was successfully created and its ID returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiptSynchronousResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter. It can also occur if you submit an image that contains an invalid or unsupported file type. The format for data on receipts is very particular, so you must be careful to conform to our Receipt-JSON specification carefully if you manually create receipts. You will still get back an ID for the receipt, but it will not be given a successful status.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
    delete:
      operationId: deleteReceipts
      tags:
        - Receipts
      summary: Batch delete receipts
      description: This endpoint allows for batch deletion of multiple receipts given their IDs. The receipts will be soft deleted. This means the receipts will stay in Sensibill's system but will not be accessible by the user. Receipts cannot be in the archived or deleted status in order to be soft deleted.</br> In order to purge the receipts from Sensibill's system the user must be deleted.
      parameters:
        - $ref: '#/components/parameters/ReceiptIdsParameter'
      requestBody:
        $ref: '#/components/requestBodies/ReceiptsDeleteRequest'
      responses:
        '200':
          description: Success. The receipt was successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObjectResponseDto'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
  /receipts/transaction:
    post:
      operationId: createReceiptTransaction
      tags:
        - Receipts
      summary: Create a new receipt (asynchronous)
      description: 'As in the synchronous endpoint, this will allow clients to create a new receipt: <br/><br/>The process can be summarized in 2 steps: <br/><br/>1 - a POST request of the data <br/><br/>2 - polling of the request status. <br/><br/>See further down for details about the two forms of polling operations. The format for the request is analogous to the one described in the synchronous request. <br/><br/>The server records all of the input data in a Transaction object and returns an externalID that will be used to represent the transaction along with some details of the transaction status. <br/><br/>If a second request is sent with the same image after the first one is completed the response will not have a transaction ID, the status will be "completed" and the receipt ID will be in the receipts array. Please keep in mind that Transaction objects are only kept for 60 days after they finish processing. <br/><br/>A valid user access token is required for this request.'
      requestBody:
        $ref: '#/components/requestBodies/ReceiptCreateRequest'
      responses:
        '200':
          description: Success. The new receipt was successfully queued in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiptTransactionResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter. It can also occur if you submit an image that contains an invalid or unsupported file type. The format for data on receipts is very particular, so you must be careful to conform to our Receipt-JSON specification carefully if you manually create receipts. You will still get back an ID for the receipt, but it will not be given a successful status.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
  '/receipts/transaction/{id}':
    get:
      operationId: getReceiptTransactionById
      tags:
        - Receipts
      summary: Regular polling
      description: This endpoint provides the ability to periodically poll for a new receipt transaction status. The ID is the transaction ID received during the first step (asynchronous POST). <br/><br/>Please keep in mind that Transaction objects are kept for only 60 days after they finish processing. <br/><br/>The response contains status information on the transaction.
      parameters:
        - $ref: '#/components/parameters/TransactionIdParameter'
      responses:
        '200':
          description: Success. The status of the transaction is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiptTransactionResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
  '/receipts/transaction/{id}/wait':
    get:
      operationId: getReceiptTransactionByIdWait
      tags:
        - Receipts
      summary: Long polling
      description: This endpoint represents a long polling/wait method for a new receipt transaction. The ID is the transaction ID received during the first step (asynchronous POST). <br/><br/>Please keep in mind that Transaction objects are kept for only 60 days after they finish processing. <br/><br/>The server will internally set up a mechanism to wait until the transaction is finished processing. This will likely involve waiting for a message to be published on our message routing/queueing system. <br/><br/>The response contains status information on the transaction. A timeout parameter can be sent to force the response from the server after a desired amount of time.
      parameters:
        - $ref: '#/components/parameters/TransactionIdParameter'
        - $ref: '#/components/parameters/TransactionTimeoutParameter'
      responses:
        '200':
          description: Success. The status of the transaction is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiptTransactionResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
  /receipts/transactions:
    get:
      tags:
        - Receipts
      summary: List of transactions
      description: This endpoint will retrieve all of the transactions that are associated with the user. The status information for each of the transactions are also returned. The transactions are sorted by oldest to newest. Please keep in mind that transaction objects are kept for 60 days once they are completed processing.
      operationId: getTransactionList
      parameters:
        - in: query
          name: status
          description: 'Will allow you to filter for transactions by transaction status. To specify multiple statuses, use comma-separated values.'
          example:
            - processing
            - completed
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TransactionStatusEnum'
          style: form
          explode: false
        - in: query
          name: limit
          description: 'Number of transactions to return. Has a default value of 20  if limit has not been set, and max of 100 if it has been set.'
          schema:
            type: integer
        - name: startIndex
          in: query
          description: 'Start index of the resources to be returned. Typically used to jump to a specific position in the resource history based on its order. Example for starting at the second item in a list of results: ?startIndex=2.'
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Success. The list of transactions for the user was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionListDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/receipt/{id}':
    put:
      operationId: updateReceiptById
      tags:
        - Receipts
      summary: Update receipt
      description: This endpoint allows you to update a receipt given its ID.
      parameters:
        - $ref: '#/components/parameters/ReceiptIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/ReceiptUpdateRequest'
      responses:
        '200':
          description: Success. The ID of the receipt is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditReceiptResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
        '404':
          description: Not Found. The receiptID you have provided is not one of this user's receipts.
    delete:
      operationId: deleteReceipt
      tags:
        - Receipts
      summary: Delete receipt
      description: This endpoint allows you to delete a receipt given its ID. The receipt will be soft deleted. This means the receipt will stay in Sensibill's system but will not be accessible by the user. Receipts cannot be in the archived or deleted status in order to be soft deleted.</br> In order to purge the receipts from Sensibill's system the user must be deleted.
      parameters:
        - $ref: '#/components/parameters/ReceiptIdParameter'
      responses:
        '200':
          description: Success. The receipt was successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObjectResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
        '404':
          description: Not Found. The receiptID you have provided is not one of this user's receipts.
  '/receipt/{id}/edit':
    put:
      operationId: updateReceiptEdit
      tags:
        - Receipts
      summary: Update receipt
      description: This endpoint allows you to update a receipt given its ID. The fields allowed to be updated correspond to the fields under the 'edit' object returned by the GET receipt endpoint.
      parameters:
        - $ref: '#/components/parameters/ReceiptIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/ReceiptEditRequest'
      responses:
        '200':
          description: Success. The ID of the receipt is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiptEditResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, if you provide an invalid value for a required parameter, or if the receipt does not have sufficient data to fullfil the request.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
        '404':
          description: Not Found. The receiptID you have provided is not one of this user's receipts.
  '/receipts/{id}':
    get:
      tags:
        - Receipts
      summary: Get Receipt
      description: 'This endpoint will retrieve the details of a single receipt with the given ID. There are 2 possible response formats according to the ''format'' parameter: ''data'' or ''display''.'
      operationId: getReceiptById
      parameters:
        - $ref: '#/components/parameters/ReceiptIdParameter'
        - $ref: '#/components/parameters/ReceiptFormatParameter'
        - $ref: '#/components/parameters/ReceiptExcludeRawParameter'
        - $ref: '#/components/parameters/ReceiptVersionParameter'
        - $ref: '#/components/parameters/ReceiptLocaleParameter'
        - $ref: '#/components/parameters/ReceiptScaleParameter'
        - $ref: '#/components/parameters/ReceiptClearRecentlyAddedParameter'
        - $ref: '#/components/parameters/ReceiptTodayParameter'
        - $ref: '#/components/parameters/ReceiptIncludeRawOcrParameter'
      responses:
        '200':
          description: Success. The receipt was successfully retrieved.
          content:
            application/json:
              examples:
                format = data:
                  value:
                    receipt:
                      id: BMfspyl0nZlNBeazhp8H
                      arrivalDateTime: '2021-01-14T20:26:25.027Z'
                      status:
                        lifecycleStatus: pending_validation
                        lastUpdateDateTime: '2021-01-14T20:26:25.274Z'
                      sourceDocument:
                        format: image
                        url: 'https://receipts-sandbox.sensibill.io/api/v1/receipt/BMfspyl0nZlNBeazhp8H/image'
                        imagePreview: 'https://receipts-sandbox.sensibill.io/api/v1/receipt/BMfspyl0nZlNBeazhp8H/image'
                      content:
                        currencyCode: CAD
                        purchaseDate: '2019-06-23'
                        purchaseTime: '13:09:37'
                        tenders:
                          - amount: 23.53
                            type: Visa
                            maskedCardNumber: '************6305'
                            currencyCode: CAD
                        merchant:
                          categoryCode: shopping
                          name: Walmart
                          merchantID: walmart
                          channel: physical
                          storeID: '03031'
                          addressLines:
                            - 165 NORTH QUEEN STREET
                            - 'ETOBICOKE, ON'
                        totalBeforeDiscountsFeesTips:
                          beforeTax: 23.53
                          afterTax: 23.53
                        totalBeforeTips:
                          beforeTax: 23.53
                          afterTax: 23.53
                        total:
                          beforeTax: 23.53
                          afterTax: 23.53
                        countryCode: ca
                        languageCode: english
                        customer:
                          billingAddressLines: []
                        items:
                          - priceBeforeDiscountsFees:
                              beforeTax: 2.97
                            price:
                              beforeTax: 2.97
                            itemIDs:
                              - '085000193409'
                            name: STRAWBERRIES
                            unitQuantity: 1
                          - priceBeforeDiscountsFees:
                              beforeTax: 3
                            price:
                              beforeTax: 3
                            itemIDs:
                              - '62891556192'
                            name: PIE APPLE
                            unitQuantity: 1
                          - priceBeforeDiscountsFees:
                              beforeTax: 1.77
                            price:
                              beforeTax: 1.77
                            itemIDs:
                              - '062726500839'
                            name: CRISPY NAAN
                            unitQuantity: 1
                          - priceBeforeDiscountsFees:
                              beforeTax: 2.67
                            price:
                              beforeTax: 2.67
                            itemIDs:
                              - '006872172234'
                            name: P 12 GRN
                            unitQuantity: 1
                          - priceBeforeDiscountsFees:
                              beforeTax: 2.67
                            price:
                              beforeTax: 2.67
                            itemIDs:
                              - '006872172234'
                            name: IP 12 GRN
                            unitQuantity: 1
                          - priceBeforeDiscountsFees:
                              beforeTax: 2.97
                            price:
                              beforeTax: 2.97
                            name: PURE LE L
                            unitQuantity: 1
                          - priceBeforeDiscountsFees:
                              beforeTax: 2.97
                            price:
                              beforeTax: 2.97
                            itemIDs:
                              - '005960006022'
                            name: SIMPLY ULP
                            unitQuantity: 1
                          - priceBeforeDiscountsFees:
                              beforeTax: 1.97
                            price:
                              beforeTax: 1.97
                            itemIDs:
                              - '044380'
                            name: H SQZ DIJ
                            unitQuantity: 1
                          - priceBeforeDiscountsFees:
                              beforeTax: 2.77
                            price:
                              beforeTax: 2.77
                            itemIDs:
                              - '006840066260'
                            name: MAYO
                            unitQuantity: 1
                      confidence:
                        tenders:
                          - amount: HIGH
                        totalBeforeDiscountsFeesTips:
                          beforeTax: HIGH
                          afterTax: HIGH
                        totalBeforeTips:
                          beforeTax: HIGH
                          afterTax: HIGH
                        total:
                          beforeTax: HIGH
                          afterTax: HIGH
                        items:
                          - priceBeforeDiscountsFees:
                              beforeTax: HIGH
                            price:
                              beforeTax: LOW
                          - priceBeforeDiscountsFees:
                              beforeTax: LOW
                            price:
                              beforeTax: HIGH
                          - priceBeforeDiscountsFees:
                              beforeTax: HIGH
                            price:
                              beforeTax: HIGH
                          - priceBeforeDiscountsFees:
                              beforeTax: HIGH
                            price:
                              beforeTax: HIGH
                          - priceBeforeDiscountsFees:
                              beforeTax: LOW
                            price:
                              beforeTax: LOW
                          - priceBeforeDiscountsFees:
                              beforeTax: LOW
                            price:
                              beforeTax: HIGH
                          - priceBeforeDiscountsFees:
                              beforeTax: LOW
                            price:
                              beforeTax: HIGH
                          - priceBeforeDiscountsFees:
                              beforeTax: HIGH
                            price:
                              beforeTax: HIGH
                          - priceBeforeDiscountsFees:
                              beforeTax: HIGH
                            price:
                              beforeTax: LOW
                      type: item_receipt
                      userMetadata:
                        isNew: true
                format = display:
                  value:
                    user:
                      firstName: testuser
                      status: registered
                      externalID: bQvk6b6Swv2CekNVb4EB
                      accessIDs:
                        - accessID: testuser_receiptssandbox@getsensibill.com
                          credentialType: sensibill_admin
                        - accessID: testuser_receiptssandbox@getsensibill.com
                          credentialType: sensibill
                      locale: null
                      defaultCurrency: null
                      importance: regular
                    receiptGroup:
                      - id: BMfspyl0nZlNBeazhp8H
                        receiptDate: '2019-06-23T13:09:37.000Z'
                        total:
                          grandValidated: true
                          subtotalValidated: true
                          netTotalValidated: false
                          currencyCode: CAD
                          grand: 23.53
                          subtotal: 23.53
                        receiptNumber: '06818027388980068'
                    merchant:
                      originalViewScaleFactor: 1
                      originalViewScaleFactorEcommerce: 1
                      returnsInfo:
                        policies: []
                      trained_paperReceipts: false
                      trained_eReceipts: false
                      trained_eCommerceReceipts: false
                      category: ''
                      status: active
                      name: Walmart
                      merchantID: walmart
                    receipt:
                      lifecycleStatus: pending_validation
                      duplicateStatus: no_duplicate
                      dataLevel: 3
                      receiptNumber: '06818027388980068'
                      receiptDate: '2019-06-23T13:09:37.000Z'
                      validationStatus: failed
                      itemsValidated: true
                      tendersValidated: true
                      tenderChangeValidated: true
                      merchantID: walmart
                      source: image
                      country: ca
                      classification: item_receipt
                      annotation: 6000a8f03ad65b5e895f383c
                      merchantName: Walmart
                      arrivalTime: '2021-01-14T20:26:25.027Z'
                      recentlyAdded: true
                      flag: false
                      sharedMetaData:
                        receiptCategory: shopping
                        favorite: false
                        folders: []
                        tags: []
                        note: ''
                      offers: []
                      total:
                        subtotal: 23.53
                        grand: 23.53
                        currencyCode: CAD
                        netTotalValidated: false
                        subtotalValidated: true
                        grandValidated: true
                      tips: []
                      loyaltyRewards: []
                      taxes: []
                      tenderChange:
                        - amount: 0
                          name: Change
                          currencyCode: CAD
                          amountValidated: true
                      tenders:
                        - tenderType: Visa
                          amount: 23.53
                          maskedCardNumber: '************6305'
                          currencyCode: CAD
                          amountValidated: true
                          matchingPattern: null
                          extractionText: null
                          tenderIcon: 'https://receipts-sandbox.sensibill.io/img/tenders/visa@3x.png'
                      discounts: []
                      fees: []
                      items:
                        - name: STRAWBERRIES
                          regularPriceTotal: 2.97
                          shortCode: D
                          currencyCode: CAD
                          finalPriceTotal: 2.97
                          regularPriceTotalValidated: true
                          finalPriceTotalValidated: true
                          loyaltyRewards: []
                          deliveries: []
                          store: []
                          returnPolicy: []
                          serialNumbers: []
                          taxes: []
                          retailPriceModifiers: []
                          discounts: []
                          fees: []
                          itemProperties: []
                          itemLink: []
                          quantity: 1
                          itemIDs:
                            - itemID: '085000193409'
                          showPriceModifiers: false
                        - name: PIE APPLE
                          regularPriceTotal: 3
                          shortCode: D
                          currencyCode: CAD
                          finalPriceTotal: 3
                          regularPriceTotalValidated: true
                          finalPriceTotalValidated: true
                          loyaltyRewards: []
                          deliveries: []
                          store: []
                          returnPolicy: []
                          serialNumbers: []
                          taxes: []
                          retailPriceModifiers: []
                          discounts: []
                          fees: []
                          itemProperties: []
                          itemLink: []
                          quantity: 1
                          itemIDs:
                            - itemID: '62891556192'
                          showPriceModifiers: false
                        - name: CRISPY NAAN
                          regularPriceTotal: 1.77
                          shortCode: D
                          currencyCode: CAD
                          finalPriceTotal: 1.77
                          regularPriceTotalValidated: true
                          finalPriceTotalValidated: true
                          loyaltyRewards: []
                          deliveries: []
                          store: []
                          returnPolicy: []
                          serialNumbers: []
                          taxes: []
                          retailPriceModifiers: []
                          discounts: []
                          fees: []
                          itemProperties: []
                          itemLink: []
                          quantity: 1
                          itemIDs:
                            - itemID: '062726500839'
                          showPriceModifiers: false
                        - name: P 12 GRN
                          regularPriceTotal: 2.67
                          shortCode: D
                          currencyCode: CAD
                          finalPriceTotal: 2.67
                          regularPriceTotalValidated: true
                          finalPriceTotalValidated: true
                          loyaltyRewards: []
                          deliveries: []
                          store: []
                          returnPolicy: []
                          serialNumbers: []
                          taxes: []
                          retailPriceModifiers: []
                          discounts: []
                          fees: []
                          itemProperties: []
                          itemLink: []
                          quantity: 1
                          itemIDs:
                            - itemID: '006872172234'
                          showPriceModifiers: false
                        - name: IP 12 GRN
                          regularPriceTotal: 2.67
                          shortCode: D
                          currencyCode: CAD
                          finalPriceTotal: 2.67
                          regularPriceTotalValidated: true
                          finalPriceTotalValidated: true
                          loyaltyRewards: []
                          deliveries: []
                          store: []
                          returnPolicy: []
                          serialNumbers: []
                          taxes: []
                          retailPriceModifiers: []
                          discounts: []
                          fees: []
                          itemProperties: []
                          itemLink: []
                          quantity: 1
                          itemIDs:
                            - itemID: '006872172234'
                          showPriceModifiers: false
                        - name: PURE LE L
                          regularPriceTotal: 2.97
                          shortCode: D
                          currencyCode: CAD
                          finalPriceTotal: 2.97
                          regularPriceTotalValidated: true
                          finalPriceTotalValidated: true
                          loyaltyRewards: []
                          deliveries: []
                          store: []
                          returnPolicy: []
                          serialNumbers: []
                          taxes: []
                          retailPriceModifiers: []
                          discounts: []
                          fees: []
                          itemProperties: []
                          itemLink: []
                          quantity: 1
                          itemIDs: []
                          showPriceModifiers: false
                        - name: SIMPLY ULP
                          regularPriceTotal: 2.97
                          shortCode: D
                          currencyCode: CAD
                          finalPriceTotal: 2.97
                          regularPriceTotalValidated: true
                          finalPriceTotalValidated: true
                          loyaltyRewards: []
                          deliveries: []
                          store: []
                          returnPolicy: []
                          serialNumbers: []
                          taxes: []
                          retailPriceModifiers: []
                          discounts: []
                          fees: []
                          itemProperties: []
                          itemLink: []
                          quantity: 1
                          itemIDs:
                            - itemID: '005960006022'
                          showPriceModifiers: false
                        - name: H SQZ DIJ
                          regularPriceTotal: 1.97
                          shortCode: D
                          currencyCode: CAD
                          finalPriceTotal: 1.97
                          regularPriceTotalValidated: true
                          finalPriceTotalValidated: true
                          loyaltyRewards: []
                          deliveries: []
                          store: []
                          returnPolicy: []
                          serialNumbers: []
                          taxes: []
                          retailPriceModifiers: []
                          discounts: []
                          fees: []
                          itemProperties: []
                          itemLink: []
                          quantity: 1
                          itemIDs:
                            - itemID: '044380'
                          showPriceModifiers: false
                        - name: MAYO
                          regularPriceTotal: 2.77
                          shortCode: D
                          currencyCode: CAD
                          finalPriceTotal: 2.77
                          regularPriceTotalValidated: true
                          finalPriceTotalValidated: true
                          loyaltyRewards: []
                          deliveries: []
                          store: []
                          returnPolicy: []
                          serialNumbers: []
                          taxes: []
                          retailPriceModifiers: []
                          discounts: []
                          fees: []
                          itemProperties: []
                          itemLink: []
                          quantity: 1
                          itemIDs:
                            - itemID: '006840066260'
                          showPriceModifiers: false
                      deliveries: []
                      emailIDs: []
                      imageInfo:
                        - contentType: image/jpeg
                          originalFilesize: 197940
                          deleteAfter: 0
                          replicationStatus: pending_replication
                      store:
                        createdAt: '2021-01-14T20:26:25.269Z'
                        updatedAt: '2021-01-14T20:26:25.269Z'
                        storeID: '03031'
                        addressLines:
                          - 165 NORTH QUEEN STREET
                          - 'ETOBICOKE, ON'
                        names: []
                      orderChannelType: physical
                      barcodes: []
                      id: BMfspyl0nZlNBeazhp8H
                      renderURL: 'https://receipts-sandbox.sensibill.io/#/receipt/BMfspyl0nZlNBeazhp8H'
                      originalViewScaleFactor: 1
                      merchant:
                        originalViewScaleFactor: 1
                        originalViewScaleFactorEcommerce: 1
                        returnsInfo:
                          policies: []
                        trained_paperReceipts: false
                        trained_eReceipts: false
                        trained_eCommerceReceipts: false
                        category: ''
                        status: active
                        name: Walmart
                        merchantID: walmart
                    edit:
                      expenseType: personal
                      favorite: false
                      receiptCategory: shopping
                      folders: []
                      note: ''
                      amount: 23.53
                      receiptDate: '2019-06-23T13:09:37.000Z'
                      currency: CAD
                      recentlyAdded: true
                      merchantName: Walmart
                      subTotalAmount: 23.53
                    display:
                      general:
                        hasEnhanced: true
                        isValidationRequired: false
                        backgroundColor: F8F8F8
                        generalTextColor: '555555'
                      header:
                        topBar:
                          text: Walmart
                          color: '063044'
                          textColor: ffffff
                        backgroundImage: 'https://receipts-sandbox.sensibill.io/img/categories/photos/general-retail@3x.png'
                        tearImage: 'https://receipts-sandbox.sensibill.io/img/interface/interface-receipt-tear@3x.png'
                        tearColor: '063044'
                        backgroundTint: '282828'
                        receiptCategory:
                          text: General Retail
                          icon: 'https://receipts-sandbox.sensibill.io/img/categories/icons-small/general-retail@3x.png'
                      summary:
                        hasEnhanced: true
                        backgroundImage: 'https://receipts-sandbox.sensibill.io/img/categories/icons-large/general-retail@3x.png'
                        tenderIcons:
                          - url: 'https://receipts-sandbox.sensibill.io/img/tenders/visa@3x.png'
                            name: visa
                        dateLine1: Sunday
                        dateLine2: 'June 23, 2019'
                        time: '1:09 PM'
                        clockHandImage: 'https://receipts-sandbox.sensibill.io/img/icons/clock-hands-light@3x.png'
                        clockColor: '063044'
                        dividingDotColor: '063044'
                        message: 'testuser, you spent'
                        amount: $23.53
                        amountColor: '323232'
                        dividerColor: EBEBEB
                      original:
                        url: 'https://receipts-sandbox.sensibill.io/api/v1/receipt/BMfspyl0nZlNBeazhp8H/image'
                        type: image
                      sections:
                        - type: item
                          header:
                            highlightText: 10
                            text: Items
                            textStyle: itemSectionHeaderNoExtra
                            backgroundColor: F8F8F8
                            color: '063044'
                          rows:
                            - textStyle: itemRow
                              subtext: ''
                              subrows:
                                - text: SKU# 085000193409
                                  textStyle: itemSubRow
                                  backgroundColor: E2E2E2
                              strikethroughValues: []
                              backgroundColor: FFFFFF
                              text: STRAWBERRIES
                              value: '2.97'
                            - textStyle: itemRow
                              subtext: ''
                              subrows:
                                - text: SKU# 62891556192
                                  textStyle: itemSubRow
                                  backgroundColor: E2E2E2
                              strikethroughValues: []
                              backgroundColor: FFFFFF
                              text: PIE APPLE
                              value: '3.00'
                            - textStyle: itemRow
                              subtext: ''
                              subrows:
                                - text: SKU# 062726500839
                                  textStyle: itemSubRow
                                  backgroundColor: E2E2E2
                              strikethroughValues: []
                              backgroundColor: FFFFFF
                              text: CRISPY NAAN
                              value: '1.77'
                            - textStyle: itemRow
                              subtext: ''
                              subrows:
                                - text: SKU# 006872172234
                                  textStyle: itemSubRow
                                  backgroundColor: E2E2E2
                              strikethroughValues: []
                              backgroundColor: FFFFFF
                              text: P 12 GRN
                              value: '2.67'
                            - textStyle: itemRow
                              subtext: ''
                              subrows:
                                - text: SKU# 006872172234
                                  textStyle: itemSubRow
                                  backgroundColor: E2E2E2
                              strikethroughValues: []
                              backgroundColor: FFFFFF
                              text: IP 12 GRN
                              value: '2.67'
                            - textStyle: itemRow
                              subtext: ''
                              strikethroughValues: []
                              backgroundColor: FFFFFF
                              text: PURE LE L
                              value: '2.97'
                            - textStyle: itemRow
                              subtext: ''
                              subrows:
                                - text: SKU# 005960006022
                                  textStyle: itemSubRow
                                  backgroundColor: E2E2E2
                              strikethroughValues: []
                              backgroundColor: FFFFFF
                              text: SIMPLY ULP
                              value: '2.97'
                            - textStyle: itemRow
                              subtext: ''
                              subrows:
                                - text: SKU# 044380
                                  textStyle: itemSubRow
                                  backgroundColor: E2E2E2
                              strikethroughValues: []
                              backgroundColor: FFFFFF
                              text: H SQZ DIJ
                              value: '1.97'
                            - textStyle: itemRow
                              subtext: ''
                              subrows:
                                - text: SKU# 006840066260
                                  textStyle: itemSubRow
                                  backgroundColor: E2E2E2
                              strikethroughValues: []
                              backgroundColor: FFFFFF
                              text: MAYO
                              value: '2.77'
                          color: '063044'
                          dividersColor: '063044'
                        - type: other
                          header:
                            text: Totals
                            icon: 'https://receipts-sandbox.sensibill.io/img/headers/totals@3x.png'
                            textStyle: otherSectionHeader
                            iconStyle: otherSectionIcon
                            backgroundColor: F8F8F8
                          rows:
                            - text: Subtotal
                              value: '23.53'
                              textStyle: totalSectionRowNormal
                              backgroundColor: FFFFFF
                            - text: Total
                              value: $23.53
                              textStyle: totalSectionRowEmphasized
                              backgroundColor: FFFFFF
                        - type: other
                          header:
                            text: Payment
                            icon: 'https://receipts-sandbox.sensibill.io/img/headers/payment@3x.png'
                            textStyle: otherSectionHeader
                            iconStyle: otherSectionIcon
                            backgroundColor: F8F8F8
                          rows:
                            - textStyle: paymentSectionRowNormal
                              iconStyle: paymentSectionRowIconNormal
                              backgroundColor: FFFFFF
                              icon: 'https://receipts-sandbox.sensibill.io/img/tenders/visa@3x.png'
                              text: '************6305'
                              value: $23.53
                            - text: Change
                              value: $0.00
                              textStyle: paymentSectionRowNormal
                              iconStyle: paymentSectionRowIconNormal
                              backgroundColor: FFFFFF
                      footer:
                        sensibillImage: 'https://receipts-sandbox.sensibill.io/img/sensibill/sensibill-footer-logo@3x.png'
                      menu:
                        image: 'https://receipts-sandbox.sensibill.io/img/sensibill/sensibill-beta_logo.png'
                        buttonDark: false
                      text: 'Hello, testuser'
                    privateMetaData: {}
                format = data&includeRawOcr=true:
                  value:
                    receipt:
                      id: rFiu4sWHNt-dqapyRy22
                      arrivalDateTime: '2020-12-01T17:28:42.286Z'
                      status:
                        lifecycleStatus: active
                        lastUpdateDateTime: '2020-12-01T17:44:18.233Z'
                      sourceDocument:
                        format: image
                        url: 'https://receipts-sandbox.sensibill.io/api/v1/receipt/BMfspyl0nZlNBeazhp8H/image'
                        imagePreview: 'https://receipts-sandbox.sensibill.io/api/v1/receipt/BMfspyl0nZlNBeazhp8H/image'
                      content:
                        currencyCode: USD
                        purchaseDate: '2020-11-20'
                        purchaseTime: '01:01:01'
                        merchant:
                          categoryCode: business
                          name: freshco
                          merchantID: freshco
                          channel: physical
                          taxIdNumber: '857893788'
                          telephone: '+19057276336'
                          addressLines:
                            - '15461 Yonge St. # 6'
                            - 'Aurora, ON'
                        totalBeforeDiscountsFeesTips:
                          beforeTax: 150
                          afterTax: 250
                          taxes:
                            - amount: 50
                              percent: 1.2
                              type: HST
                        totalBeforeTips:
                          beforeTax: 150
                          afterTax: 250
                          taxes:
                            - amount: 50
                              percent: 1.2
                              type: HST
                        tips:
                          - beforeTax: 50
                            taxes:
                              - amount: 0
                            afterTax: 50
                        total:
                          beforeTax: 200
                          taxes:
                            - amount: 50
                              percent: 1.2
                              type: HST
                            - amount: 0
                          afterTax: 300
                        countryCode: ca
                        languageCode: english
                        customer:
                          billingAddressLines: []
                        items:
                          - price:
                              beforeTax: 9.95
                            name: N 1 Pad Thai
                            unitQuantity: 1
                          - price:
                              beforeTax: 8.5
                            name: N11 Tom Yum Noodle
                            unitQuantity: 1
                      confidence:
                        currencyCode: USER
                        purchaseDate: USER
                        purchaseTime: USER
                        merchant:
                          name: USER
                        totalBeforeDiscountsFeesTips:
                          beforeTax: USER
                          afterTax: USER
                          taxes:
                            - amount: USER
                              percent: USER
                              type: USER
                        totalBeforeTips:
                          beforeTax: USER
                          afterTax: USER
                          taxes:
                            - amount: USER
                              percent: USER
                              type: USER
                        tips:
                          - beforeTax: USER
                            taxes:
                              - amount: USER
                            afterTax: USER
                        total:
                          beforeTax: USER
                          taxes:
                            - amount: USER
                              percent: USER
                              type: USER
                            - amount: USER
                          afterTax: USER
                        items:
                          - price:
                              beforeTax: HIGH
                          - price:
                              beforeTax: HIGH
                      type: item_receipt
                      userMetadata:
                        expenseType: personal
                        notes: testNote
                        folders:
                          - Gh7eoopQJMGlaphENes7
                        warrantyPeriod:
                          unit: day
                          duration: 10
                          calculatedDate: '2020-11-30'
                        returnPeriod:
                          unit: day
                          duration: 20
                          calculatedDate: '2020-12-10'
                      accountMetadata:
                        transaction:
                          id: testID
                          maskedAccountNumber: '**** **** **** 9900'
                          postedDate: '2020-11-20T00:00:00.000Z'
                          summary: test summary
                          currencyCode: USD
                          amount: 200
                          transactionDate: '2020-11-20T00:00:00.000Z'
                          merchantName: Apple
                      rawOcr: |
                        Time In: 8/3/2017 8:37:10 PM
                        8/3/2017 8:37 PM
                        TABLE # 3
                        Thai Spring Rolls

                        15461 Yonge St. # 6
                        Aurora, ON
                        Tel: (905)727-6336
                        GST: 857893788

                        1 N 1 Pad Thai         9.95
                        1 N11 Tom Yum Noodle       8.50

                        SubTotal:  $18.45
                        Discount: 0%
                        GST:  $0.92
                        PST:  $1.48
                        Liquor Tax:  $0.00
                        Total:  $20.85

                        Cash:
                        Change:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/GetReceiptDataResponseDto'
                  - $ref: '#/components/schemas/GetReceiptDisplayResponseDto'
        '400':
          description: Bad Request. This will occur if you provide an invalid value for a request parameter.
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '404':
          description: Not Found. The receipt ID you have provided is not one of this user's receipts.
    patch:
      tags:
        - Receipts
      summary: Update a receipt using the data format
      description: 'This endpoint allows you to update a specific subset of data for a single receipt given its ID. The schema defined below outlines the fields which can be updated. The data passed in through the request body must be in the data format as received from the GET Receipt Data Format endpoint (GET /api/v1/receipts/{id}?format=data).'
      operationId: editReceipt
      parameters:
        - name: id
          in: path
          description: A unique ID that identifies this receipt in the Sensibill system.
          required: true
          schema:
            type: string
      requestBody:
        description: An object composed of all the fields you want to edit for the given receipt
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditReceiptRequestQueryDto'
      responses:
        '200':
          description: Successful response - returns an externalId of the receipt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditReceiptResponseDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/receipts/{id}/duplicate':
    put:
      operationId: updateReceiptDuplicateStatus
      tags:
        - Receipts
      summary: Update duplicateStatus of receipt
      description: This endpoint allows you to update the duplicateStatus of a receipt given its ID. Currently only accept duplicateStatus set to 'keep_anyway'.
      parameters:
        - $ref: '#/components/parameters/ReceiptIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/ReceiptUpdateDuplicateRequest'
      responses:
        '200':
          description: Success. The ID of the receipt is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiptEditResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
        '404':
          description: Not Found. The receiptID you have provided is not one of this user's receipts.
  '/receipt/{id}/image':
    get:
      operationId: receiptImage
      tags:
        - Receipts
      summary: Get an image version of the receipt.
      description: 'This endpoint allows you to get an image (jpeg) for any type of receipt(image, pdf, html, etc..).  <br/>This will be the url that was returned in the imagePreview field in the GET receipt details data format endpoint. <br/><br/><strong>Important</strong>: This may take up to 20 seconds to return for pdf or email receipts when calling for the first time'
      parameters:
        - $ref: '#/components/parameters/ReceiptIdParameter'
      responses:
        '200':
          description: Success. Successfully returned the jpeg image of the receipt.
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
        '404':
          description: Not Found. The receiptID you have provided is not one of this user's receipts.
  '/receipt/{id}/pdf':
    get:
      operationId: receiptPdf
      tags:
        - Receipts
      summary: Get the orginal pdf of a pdf type receipt.
      description: 'This endpoint allows you to get the original pdf for any pdf type receipts (pdf or pdf_email type receipts).  <br/>This will be the url that was returned in the url field in the GET receipt details data format endpoint for pdf receipts. <br/><br/><strong>Important</strong>: This endpoint can only be called for pdf type receipts and will not work with other receipt types'
      parameters:
        - $ref: '#/components/parameters/ReceiptIdParameter'
      responses:
        '200':
          description: Success. Successfully returned the original pdf of the pdf receipt.
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
        '404':
          description: Not Found. The receiptID you have provided is not one of this user's receipts.
  /reminders:
    get:
      operationId: getReminders
      tags:
        - Reminders
      summary: Get list of Reminders
      description: Retrieve a list of reminders
      parameters:
        - $ref: '#/components/parameters/LimitParameter'
        - $ref: '#/components/parameters/StartIndexParameter'
        - $ref: '#/components/parameters/SearchParamsReminderDateFromParameter'
        - $ref: '#/components/parameters/SearchParamsReminderDateToParameter'
        - $ref: '#/components/parameters/SearchParamsReceiptIDParameter'
        - $ref: '#/components/parameters/RemindersTodayParameter'
        - $ref: '#/components/parameters/RemindersFilterParameter'
      responses:
        '200':
          description: Success. Successfully returned a list of reminders.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRemindersResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
    post:
      operationId: createReminder
      tags:
        - Reminders
      summary: Create a Reminder
      description: 'Create a new reminder. <br/><br/><strong>Important</strong>: A receipt can only have one reminder per reminder type.'
      requestBody:
        $ref: '#/components/requestBodies/ReminderCreateRequest'
      responses:
        '200':
          description: Success. The new reminder was successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReminderDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
    delete:
      operationId: deleteReminders
      tags:
        - Reminders
      summary: Bulk Delete Reminders
      description: Bulk delete reminders.
      parameters:
        - $ref: '#/components/parameters/RemindersIdsParameter'
        - $ref: '#/components/parameters/RemindersDeleteAllParameter'
      requestBody:
        $ref: '#/components/requestBodies/RemindersDeleteRequest'
      responses:
        '200':
          description: Success. The reminders were successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObjectResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter. It can also occur if one of the reminderIDs you have provided does not belong to the user.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
  '/reminders/{id}':
    get:
      operationId: getReminderById
      tags:
        - Reminders
      summary: Get a Reminder
      description: Retrieve the details of a single reminder
      parameters:
        - $ref: '#/components/parameters/ReminderIdParameter'
        - $ref: '#/components/parameters/LocaleParameter'
      responses:
        '200':
          description: Success. Successfully returned a reminder.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReminderDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
        '404':
          description: Not Found. The reminderID you have provided is not one of this user's reminders.
    put:
      operationId: updateReminder
      tags:
        - Reminders
      summary: Update a Reminder
      description: Update a reminder given its ID.
      parameters:
        - $ref: '#/components/parameters/ReminderIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/ReminderUpdateRequest'
      responses:
        '200':
          description: Success. The reminder was successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReminderDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
        '404':
          description: Not Found. The reminderID you have provided is not one of this user's reminders.
    delete:
      operationId: deleteReminder
      tags:
        - Reminders
      summary: Delete a Reminder
      description: Delete a reminder given its ID.
      parameters:
        - $ref: '#/components/parameters/ReminderIdParameter'
      responses:
        '200':
          description: Success. The reminder was successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObjectResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
        '404':
          description: Not Found. The reminderID you have provided is not one of this user's reminders.
  /export:
    post:
      operationId: createExport
      tags:
        - Exports
      summary: Export receipts
      description: 'This API call allows you to export a set of receipts for a user. To call this endpoint, you must use a user-token. You can not call this endpoint without it. <br/><br/>Users can have as many exports as they need. Exports are kept in Sensibill''s system for the period of 14 days.'
      requestBody:
        $ref: '#/components/requestBodies/ExportCreateRequest'
      responses:
        '200':
          description: Success. The export request was received sucessfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportCreateResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, if you provide an invalid value for a required parameter, or if you exceed the limit of 500 receipts in an export.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
  /exports:
    get:
      operationId: getExports
      tags:
        - Exports
      summary: Get export status
      description: This endpoint provides the ability to retrieve the list of exports for a user. A user-token is required to access this endpoint.
      responses:
        '200':
          description: Success. The list of exports is successfully returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportsStatusDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
  '/export/{id}':
    get:
      operationId: getExportById
      tags:
        - Exports
      summary: Get export status
      description: This endpoint provides the ability to periodically poll for the export status. The ID is the export ID received during the first step (asynchronous POST). </br> The response contains status information on the export.
      parameters:
        - $ref: '#/components/parameters/ExportIdParameter'
      responses:
        '200':
          description: Success. The status of the export is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportStatusDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
        '404':
          description: Not Found. The export ID you have provided is not one of this user's exports.
  /lookups/receiptcategories:
    get:
      operationId: getReceiptCategories
      tags:
        - Lookups
      summary: Receipt categories
      description: 'This API call allows for retrieval of a list of receipt categories. To call this endpoint, you can use either a client-token or a user-token.'
      parameters:
        - $ref: '#/components/parameters/ScaleParameter'
        - $ref: '#/components/parameters/LocaleParameter'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupReceiptCategoriesResponse'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
  /lookups/currencies:
    get:
      operationId: getCurrencies
      tags:
        - Lookups
      summary: Supported Currencies
      description: 'This API call allows you to retrieve the list of currencies that we currently support in our system. To call this endpoint, you can use either a client-token or a user-token.'
      parameters:
        - $ref: '#/components/parameters/LocaleParameter'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupCurrenciesResponse'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
  /lookups/locales:
    get:
      operationId: getLocales
      tags:
        - Lookups
      summary: Supported Locales
      description: 'This API call allows you to retrieve the list of locales that we currently support in our system. To call this endpoint, you can use either a client-token or a user-token.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupLocalesResponse'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
  /emails:
    get:
      operationId: getEmails
      tags:
        - Emails
      summary: List emails
      description: 'This will retrieve all of the emails that are associated with the authenticated user making the API request. Additionally, filters can be provided for paging and filtering the list of emails. The returned data contains an array of emails.'
      parameters:
        - $ref: '#/components/parameters/EmailFilterParameter'
        - $ref: '#/components/parameters/EmailLimitParameter'
        - $ref: '#/components/parameters/StartIndexParameter'
        - $ref: '#/components/parameters/EmailsSearchParamsClassificationParameter'
        - $ref: '#/components/parameters/EmailSearchParamsStatusParameter'
        - $ref: '#/components/parameters/LocaleParameter'
      responses:
        '200':
          description: Success. The list of emails for the user was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailsResponse'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter, such as an invalid limit or startIndex parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. You must provide a user-token in order to get a list of emails for a given user.
    delete:
      operationId: deleteEmails
      tags:
        - Emails
      summary: Batch delete emails
      description: This endpoint allows for batch deletion of multiple emails given their IDs or Email Classification.
      parameters:
        - $ref: '#/components/parameters/EmailsIdsParameter'
        - $ref: '#/components/parameters/EmailsClassificationParameter'
      requestBody:
        $ref: '#/components/requestBodies/EmailsDeleteRequest'
      responses:
        '200':
          description: Success. The emails were successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObjectResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter. <br/><br/>If any of the supplied IDs are not found, those IDs will be listed in <code>extras.invalidID</code> in the response. <br/><br/>If any of the given IDs have already been deleted, or have associated receipts, those IDs will be listed in <code>extras.invalidStatus</code>.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
  '/email/{emailID}/view':
    get:
      operationId: getEmailView
      tags:
        - Emails
      summary: View email
      description: 'This allows you to retrieve an email from an ID. The email body is returned as HTML, stripped of any scripting code. This endpoint requires authentication. This endpoint allows two different types of authentication. You can use a regular bearer OAuth 2.0 token, exactly as you would with other endpoints. However, you also have the option of using a signature-based authentication scheme. This is useful when you are loading up the email view in a UIWebView or an iFrame, and thus aren''t easily able to inject headers like Authorization into the request that it makes. <br/><br/>In order to construct signature based authentication, follow these steps: <br/><br/>1) Generate a nonce. This is just a long random string. It is used to ensure that signed URLs can not be used twice. <br/><br/>2) Construct a canonical string to sign. Our canonical string is made by appending the full path of the endpoint with ''?nonce='' and your nonce. E.g. If your emailID was abc123 and   your nonce was ''r1a2n3d4'' your full path would be ''/email/abc123/view'', and your full canonical string would be ''/email/abc123/view?nonce=r1a2n3d4'' <br/><br/>3) Create a signature using HMAC-SHA256. The input is your canonical string, and the private key  is your OAuth 2.0 Bearer token.   Your signature should be formatted in Hexadecimal. <br/><br/>4) Append your nonce, token_id and signature to your request as query parameters (see our authentication flows for how to get your token_id, its returned with your access_token.) <br/><br/>5) Make your request!'
      parameters:
        - $ref: '#/components/parameters/EmailIdParameter'
        - $ref: '#/components/parameters/EmailAuthNonceParameter'
        - $ref: '#/components/parameters/EmailAuthTokenIdParameter'
        - $ref: '#/components/parameters/EmailAuthSignatureParameter'
      responses:
        '200':
          description: Success. The email was retrieved and returned. The response is the email itself.
          content:
            text/html:
              schema:
                type: string
        '401':
          description: 'Failure to authenticate. You probably didn''t provide your OAuth token, or constructed your query-string signature wrong.'
        '403':
          description: 'Forbidden. You aren''t allowed to view this email, it''s not yours!'
        '404':
          description: Not Found. The emailID you have provided is invalid.
  '/email/{emailID}/pdf':
    get:
      operationId: getEmailPDF
      tags:
        - Emails
      summary: View PDF attachment
      description: 'This endpoint allows you to retrieve a PDF attached to an email. It accepts query string signature based authentication. Please see the View Email (/email/:emailID/view) endpoint for more details on how to do this.'
      parameters:
        - $ref: '#/components/parameters/EmailIdParameter'
        - $ref: '#/components/parameters/EmailAuthNonceParameter'
        - $ref: '#/components/parameters/EmailAuthTokenIdParameter'
        - $ref: '#/components/parameters/EmailAuthSignatureParameter'
      responses:
        '200':
          description: Success. The attachment was retrieved and returned. The response is the PDF itself.
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '401':
          description: 'Failure to authenticate. You probably didn''t provide your OAuth token, or constructed your query-string signature wrong.'
        '403':
          description: 'Forbidden. You aren''t allowed to view this email, it''s not yours!'
        '404':
          description: Not Found. The emailID you have provided is invalid or the email doesn't have a PDF attachment.
  '/email/{emailID}':
    put:
      operationId: updateEmail
      tags:
        - Emails
      summary: Update email
      description: 'This endpoint allows you to update an email. At the moment, only reclassification and marking favorites are supported. If the operation generates a new transaction, the transaction is returned in the response. A new transaction only occurs when you reclassify an email as a receipt.'
      parameters:
        - $ref: '#/components/parameters/EmailIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/EmailUpdateRequest'
      responses:
        '200':
          description: Success. The email was updated correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailUpdateResponseDto'
        '400':
          description: Bad Request. This will occur if you provide invalid values for the request parameters.
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '404':
          description: Not Found. The emailID you have provided does not exist or does not belong to the user
    delete:
      operationId: deleteEmail
      tags:
        - Emails
      summary: Delete email
      description: 'This endpoint allows you to delete an email given its ID. The email will be soft deleted in that it will be marked as deleted vs purged. Emails may not be deleted if they are already deleted, or if the email has an associated receipt.'
      parameters:
        - $ref: '#/components/parameters/EmailIdParameter'
      responses:
        '200':
          description: Success. The email was successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObjectResponseDto'
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a required parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. This will occur if you attempt to use a client token with this endpoint. This endpoint must be used with a user-token.
        '404':
          description: This will occur if you supply an ID that is not an email for the authenticated user.
  /merchants:
    get:
      operationId: getMerchants
      tags:
        - Merchants
      summary: Merchants list
      description: 'This endpoint allows you to retrieve a list of merchants with a name, optional merchantID, and optional receipt category that corresponds to the merchant category. Limited to 20 and in ascending alphabetical order. This endpoint requires authentication. Both a user token or a client token are accepted. Requests using a user token will match against merchants available for all users and also against merchant names the user has used on their receipts. Those merchants will only have a name, and no merchantID or category.'
      parameters:
        - $ref: '#/components/parameters/MerchantsNameParameter'
      responses:
        '200':
          description: Success. The list of merchants was retrieved and returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantsDto'
        '500':
          description: Internal server error.
  /achievements:
    get:
      tags:
        - Achievements
      summary: List achievements for a user
      description: 'This will retrieve all achievements available in the system, including those which are earned and not earned for the given user. Please note, if the Achievements feature is not enabled for the client, the endpoint will return an error.'
      operationId: getAchievements
      parameters:
        - name: type
          in: query
          description: 'Filter for achievements by type. To specify multiple types, use comma-separated values.'
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AchievementTypeEnum'
        - name: state
          in: query
          description: Filter for achievements by state. Only one value can be sent.
          required: false
          schema:
            $ref: '#/components/schemas/AchievementsStateFilterEnum'
      responses:
        '200':
          description: Success. The list of achievements was successfully retrieved for the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAchievementsResponseDto'
              example:
                achievements:
                  - code: three_receipt_badge
                    type: badge_simple
                    earnedOn: '2021-02-02T19:10:25.000Z'
                    celebrated: false
                    order: 3
                    steps: []
                  - code: first_receipt_badge
                    type: badge_simple
                    earnedOn: '2021-02-02T19:09:19.000Z'
                    celebrated: false
                    order: 1
                    steps: []
                  - code: onboarding_badge
                    type: badge_aggregate
                    earnedOn: null
                    celebrated: false
                    order: 2
                    steps:
                      - code: folder_step
                        order: 2.1
                        earnedOn: null
                      - code: email_creation_step
                        order: 2.2
                        earnedOn: null
                      - code: email_receipt_step
                        order: 2.3
                        earnedOn: null
                      - code: export_step
                        order: 2.4
                        earnedOn: null
                      - code: receipt_folder_step
                        order: 2.5
                        earnedOn: null
                  - code: five_receipt_badge
                    type: badge_simple
                    earnedOn: null
                    celebrated: false
                    order: 4
                    steps: []
                  - code: ten_receipt_badge
                    type: badge_simple
                    earnedOn: null
                    celebrated: false
                    order: 5
                    steps: []
                  - code: fifteen_receipt_badge
                    type: badge_simple
                    earnedOn: null
                    celebrated: false
                    order: 6
                    steps: []
                  - code: twenty_receipt_badge
                    type: badge_simple
                    earnedOn: null
                    celebrated: false
                    order: 7
                    steps: []
                  - code: mvp_completion_badge
                    type: badge_simple
                    earnedOn: null
                    celebrated: false
                    order: 8
                    steps: []
                  - code: four_week_streak
                    type: badge_streak
                    earnedOn: null
                    celebrated: false
                    order: 9
                    steps: []
                  - code: eight_week_streak
                    type: badge_streak
                    earnedOn: null
                    celebrated: false
                    order: 10
                    steps: []
                  - code: twelve_week_streak
                    type: badge_streak
                    earnedOn: null
                    celebrated: false
                    order: 11
                    steps: []
                  - code: three_merchant_badge
                    order: 13
                    earnedOn: null
                  - code: three_category_badge
                    order: 14
                    earnedOn: null
                  - code: mvp_plant_badge
                    type: badge_milestone
                    earnedOn: null
                    celebrated: false
                    order: 15
                    steps:
                      - code: first_receipt_badge
                        order: 1
                        earnedOn: '2021-02-02T19:09:19.000Z'
                      - code: onboarding_badge
                        order: 2
                        earnedOn: null
                      - code: three_receipt_badge
                        order: 3
                        earnedOn: '2021-02-02T19:10:25.000Z'
                      - code: five_receipt_badge
                        order: 4
                        earnedOn: null
                      - code: ten_receipt_badge
                        order: 5
                        earnedOn: null
                      - code: fifteen_receipt_badge
                        order: 6
                        earnedOn: null
                      - code: twenty_receipt_badge
                        order: 7
                        earnedOn: null
                      - code: mvp_completion_badge
                        order: 8
                        earnedOn: null
                      - code: three_merchant_badge
                        order: 13
                        earnedOn: null
                      - code: three_category_badge
                        order: 14
                        earnedOn: null
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. The Achievements feature is not enabled for the client this user belongs to.
        '500':
          description: Internal Server Error.
  '/achievements/{code}':
    patch:
      tags:
        - Achievements
      summary: Set a achievement as celebrated
      description: 'This endpoint allows you to set a achievement as having been celebrated on the frontend. By providing the endpoint with a single achievement code, it will set the celebrated field for the given achievement to true.'
      operationId: editAchievement
      parameters:
        - name: code
          in: path
          description: A unique ID that identifies this achievement in the Sensibill system.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful response.
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. The Achievements feature is not enabled for the client this user belongs to.
        '404':
          description: Not Found. This will occur if no achievement exists for the given ID.
        '500':
          description: Internal Server Error.
  /insights:
    get:
      tags:
        - Insights
      summary: List generated insights for a user
      description: This will retrieve all insights available for the user. The insights will always be returned sorted by the "generatedOn" field in descending order (the most recent first).
      operationId: getInsights
      parameters:
        - name: type
          in: query
          description: Filter for insights by type.
          required: false
          schema:
            $ref: '#/components/schemas/InsightTypeEnum'
        - name: limit
          in: query
          description: Specify the number of insights to return. If no value is passed it will use the default to limit the number of items in the list
          required: false
          schema:
            type: integer
            default: 10
        - name: startIndex
          in: query
          description: 'Start index of the resources to be returned. Typically used to jump to a specific position in the resource history based on its order. it is zero based index, so first element is 0. Example for starting at the second item in a list of results: ?startIndex=1.'
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Success. The list of insights was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetInsightsResponseDto'
              example:
                insights:
                  - code: merchant_aggregation
                    type: insight_trend
                    generatedOn: '2021-02-10T22:55:43.000Z'
                    customData:
                      - key: amount
                        value: '499.98'
                        type: number
                      - key: currencyCode
                        value: CAD
                        type: string
                      - key: merchantName
                        value: Best Buy
                        type: string
                      - key: itemHighestName
                        value: EEEPC90A-W Jabra REVO Wireless Bluetooth
                        type: string
                      - key: itemHighestValue
                        value: '249.99'
                        type: number
                      - key: earliestReceiptDate
                        value: '2021-02-10T17:51:16.516Z'
                        type: string
                      - key: itemSecondHighestName
                        value: EEEPC90A-W Jabra REVO Wireless Bluetooth
                        type: string
                      - key: itemSecondHighestValue
                        value: '249.99'
                        type: number
                  - code: tax_deduction
                    type: insight_tip
                    generatedOn: '2021-02-10T22:55:40.000Z'
                    customData:
                      - key: categoryItem1
                        value: EEEPC90A-W Jabra REVO Wireless Bluetooth
                        type: string
                      - key: categoryItem2
                        value: EEEPC90A-W Jabra REVO Wireless Bluetooth
                        type: string
                  - code: category_aggregation
                    type: insight_trend
                    generatedOn: '2021-02-10T22:55:39.000Z'
                    customData:
                      - key: amount
                        value: '499.98'
                        type: number
                      - key: categoryCode
                        value: business
                        type: string
                      - key: currencyCode
                        value: CAD
                        type: string
                      - key: itemHighestName
                        value: EEEPC90A-W Jabra REVO Wireless Bluetooth
                        type: string
                      - key: itemHighestValue
                        value: '249.99'
                        type: number
                      - key: earliestReceiptDate
                        value: '2021-02-10T17:51:16.516Z'
                        type: string
                      - key: itemSecondHighestName
                        value: EEEPC90A-W Jabra REVO Wireless Bluetooth
                        type: string
                      - key: itemSecondHighestValue
                        value: '249.99'
                        type: number
                  - code: folder_warranty
                    type: insight_tip
                    generatedOn: '2021-02-10T22:52:48.000Z'
                    customData: []
                  - code: tax_tip
                    type: insight_tip
                    generatedOn: '2021-02-10T22:52:47.000Z'
                    customData: []
                  - code: folder_general
                    type: insight_tip
                    generatedOn: '2021-02-10T22:52:16.000Z'
                    customData: []
                  - code: general_budgeting
                    type: insight_tip
                    generatedOn: '2021-02-10T17:51:16.973Z'
                    customData: []
                totalFilteredRecords: 7
        '400':
          description: 'Bad Request. This will occur if you omit a required parameter, or if you provide an invalid value for a parameter.'
        '401':
          description: 'Unauthorized. This will occur if you do not supply an access-token to this endpoint, or if you provide an expired or invalid access token.'
        '403':
          description: Forbidden. The Insights feature is not enabled for the client this user belongs to.
        '500':
          description: Internal Server Error.
components:
  schemas:
    AnyType:
      oneOf:
        - type: string
        - type: object
    ApiInfoDto:
      type: object
      properties:
        hostname:
          type: string
          example: tor-some-name-api-04
        version:
          type: string
          example: '8124:8cd97163d91e'
        status:
          type: string
          example: online
        environment:
          type: string
          example: receipts_sandbox
        name:
          type: string
          example: Sensibill API Architecture - Receipts Sandbox
        booted_at:
          type: string
          format: date
          example: 'Wed Sep 23 2015 12:46:00 GMT+0000 (UTC)'
        base_url:
          type: string
          example: 'https://receipts-sandbox.sensibill.io/'
        endpoints:
          type: object
          properties:
            authorizationGrant:
              type: string
              example: authorizationGrant
            accessToken:
              type: string
              example: accessToken
            logout:
              type: string
              example: logout
            clientInfo:
              type: string
              example: clientInfo
            invalidateAccessToken:
              type: string
              example: invalidate
            jwtAuthenticate:
              type: string
              example: jwtAuthenticate
            usernameAvailability:
              type: string
              example: users/usernameAvailability
            emailAvailability:
              type: string
              example: users/emailAvailability
            receiptEmailAvailability:
              type: string
              example: users/receiptEmailAvailability
            registerUser:
              type: string
              example: users
            jwtRegister:
              type: string
              example: jwtRegister
            users:
              type: string
              example: users
            userDetail:
              type: string
              example: 'users/:userId'
            deleteUser:
              type: string
              example: users
            updateUser:
              type: string
              example: users
            resourceCount:
              type: string
              example: 'users/:userId/counts'
            tags:
              type: string
              example: 'users/:userId/tags'
            tips:
              type: string
              example: 'users/:userId/tips'
            forgotpassword:
              type: string
              example: users/forgotpassword
            resetpassword:
              type: string
              example: users/resetpassword
            notificationsSettings:
              type: string
              example: users/notifications
            notificationsUpdate:
              type: string
              example: users/notifications
            listFolders:
              type: string
              example: folders
            createFolder:
              type: string
              example: folders
            deleteFolders:
              type: string
              example: folders
            updateFolder:
              type: string
              example: 'folders/:folderId'
            deleteFolder:
              type: string
              example: 'folders/:folderId'
            addReceiptsToFolder:
              type: string
              example: 'folders/:folderId/receipts'
            deleteReceiptsFromFolder:
              type: string
              example: 'folders/:folderId/receipts'
            receiptDetail:
              type: string
              example: receipts/
            receiptsList:
              type: string
              example: receipts
            receiptsPostSync:
              type: string
              example: receipts
            receiptsPostAsync:
              type: string
              example: receipts/transaction
            transactionPolling:
              type: string
              example: 'receipts/transaction/:id'
            transactionLongPolling:
              type: string
              example: 'receipts/transaction/:id/wait'
            listReceiptTransactions:
              type: string
              example: receipts/transactions
            updateReceipt:
              type: string
              example: 'receipt/:id'
            patchReceipts:
              type: string
              example: 'receipts/:id'
            updateReceiptDuplicateStatus:
              type: string
              example: 'receipts/:id/duplicate'
            editReceipt:
              type: string
              example: 'receipt/:id/edit'
            deleteReceipt:
              type: string
              example: 'receipt/:id'
            deleteReceipts:
              type: string
              example: receipts
            receiptView:
              type: string
              example: 'receipt/:id/view'
            receiptPdf:
              type: string
              example: 'receipt/:id/pdf'
            receiptImage:
              type: string
              example: 'receipt/:id/image'
            remindersList:
              type: string
              example: reminders
            createReminders:
              type: string
              example: reminders
            deleteReminders:
              type: string
              example: reminders
            reminderDetail:
              type: string
              example: 'reminders/:id'
            updateReminder:
              type: string
              example: 'reminders/:id'
            deleteReminder:
              type: string
              example: 'reminders/:id'
            exportReceipts:
              type: string
              example: export
            listExports:
              type: string
              example: exports
            exportStatus:
              type: string
              example: 'export/:id'
            lookupReceiptCategories:
              type: string
              example: lookups/receiptcategories
            lookupSupportedCurrencies:
              type: string
              example: lookups/currencies
            lookupSupportedLocales:
              type: string
              example: lookups/locales
            listEmails:
              type: string
              example: emails
            deleteEmails:
              type: string
              example: emails
            emailView:
              type: string
              example: 'email/:emailID/view'
            emailPdf:
              type: string
              example: 'email/:emailID/pdf'
            updateEmail:
              type: string
              example: 'email/:emailID'
            deleteEmail:
              type: string
              example: 'email/:emailID'
            merchantsList:
              type: string
              example: 'merchants'
            achievements:
              type: string
              example: achievements
            celebrateAchievement:
              type: string
              example: 'achievements/:code'
            insights:
              type: string
              example: insights
            documentsList:
              type: string
              example: documents
            documentsPost:
              type: string
              example: documents
            documentsDelete:
              type: string
              example: documents
            documentsPatch:
              type: string
              example: 'documents/:id'
            documentsDetail:
              type: string
              example: 'documents/:id'
    JwtAuthenticateRequestDto:
      type: object
      required:
        - client
      properties:
        client:
          type: string
          description: The clientID of the user's client.
          example: first_canadian_bank
    AccessTokenRequestDto:
      type: object
      required:
        - grant_type
        - refresh_token
        - redirect_uri
      properties:
        grant_type:
          default: ''
          type: string
          example: authorization_code
          description: 'This is the type of authentication the client is presenting for its access-token.</br> If the client is looking for a client-token, then this should be set to ''client_credentials''.</br> If the client is looking to swap an authorization grant for an access token, this should be setto ''authorization_code''</br> If the client is looking to swap a refresh_token for a new access token, this should be setto ''refresh_token'''
        redirect_uri:
          default: ''
          type: string
          example: 'https://testclient.com/redirect'
          description: 'If the client is swapping an authorization code for an access token, then this argument is required.If you are just obtaining a client token directly, you do not need to provide a redirect_uri. This must be the same redirect_uri that was provided to the authorizationGrant endpoint, and must also match the redirect_uri which was registered with your client when you received your client credentials.'
        code:
          default: ''
          type: string
          example: DBhXEQiQiwqCV4hI61HX7NZfqCeGLpYt72ZCkAl-ZDQOjRKpKCVxBTLuhdc0-pX5xdM-4KfBdidwPJy05Oxs3w
          description: 'If the client is swapping an authorization code for an access token, then this argument is required.If you are just obtaining a client token directly, you do not need to provide a code. This parameteris the authorization_code which you obtained when you used the authorizationGrant endpoint.'
        refresh_token:
          default: ''
          type: string
          description: 'If the client is swapping a refresh_token for an access token, then this argument is required.Otherwise, this parameter should be omitted.This parameter is the refresh_token which you obtained when you last used the access_token endpoint.'
    JwtAuthenticateResponseDto:
      type: object
      properties:
        token_id:
          type: string
          description: 'A random string that may be used to generate signed URLs for certain resources, in circumstances where it is not possible to pass an Authorization header. For example, when showing an embedded image in a web page.'
          example: FA0Ui__ecxisIrNowkytya8ff5vS9FNnxQHGE7EoT7Tl
        access_token:
          type: string
          description: The access token which can be used as a bearer token for authenticated requests.
          example: b9E3EbzmJLf2mGBVevKra8u8PjFKU4kUGIb2lLvoKHV4_bvbxHSi5K6uu32MvhGDvsJS9pdGn9aR-V4WVyTySg
        expires_in:
          type: integer
          description: The number of seconds until the token expires.
          example: 10800
    AccessTokenResponseDto:
      type: object
      properties:
        token_id:
          type: string
          example: oRXBt_-3HsVLr1B_51U_bscYdp1-xrhqey0sBxJrEHD-
        access_token:
          type: string
          example: vVYGgu3HiktX4CgZVakDklQoL9uLw5qPibQdbMNt0dnH4L_oVTBHhXmDn-G99RJ6cimusHRhtERfZO7jtPkwDg
        refresh_token:
          type: string
          example: kLDmKsaak0vbiMiVn6p7V0HXaaI6rVkt6z5fNKpSLHE038fWG3wCwkL0QDDwdn3_z9k-9PKs7yaWx5qX52lnOA
        token_type:
          type: string
          example: bearer
        expires_in:
          type: integer
          example: 10800
        refresh_expires_in:
          type: integer
          example: 21600
    ClientPoliciesDto:
      type: object
      properties:
        _id:
          type: string
          example: 55fb3657eef7ae084d000051
        webSDKOptions:
          type: object
          properties:
            webDebug:
              type: boolean
              example: false
            webBaseUrl:
              type: string
            webSDKUrl:
              type: string
        registrationEmails:
          type: array
          items:
            type: string
        registrationEmailPolicyMode:
          type: string
          example: norestriction
        receiptEmailDomainPolicyMode:
          type: string
          example: norestriction
        credentialTypePolicyMode:
          type: string
          example: norestriction
        featurePolicyMode:
          type: string
          example: norestriction
        features:
          type: array
          items:
            type: string
        allowedFeatures:
          type: object
          properties:
            clientCanDisableUser:
              type: boolean
              example: false
            clientCanRetrieveUserData:
              type: boolean
              example: false
            clientCanDestroyUsers:
              type: boolean
              example: false
            enhancedReceiptView:
              type: boolean
              example: true
            editing:
              type: boolean
              example: true
            userManagement:
              type: boolean
              example: true
            navigation:
              type: boolean
              example: true
            registration:
              type: boolean
              example: true
            noReceiptAccount:
              type: boolean
              example: false
            nonEmailUsernames:
              type: boolean
              example: false
            merchantLogo:
              type: boolean
              example: true
            merchantColor:
              type: boolean
              example: true
            menuViewAll:
              type: boolean
              example: true
            forgotPassword:
              type: boolean
              example: true
            feedback:
              type: boolean
              example: true
            enableExportEmails:
              type: boolean
              example: true
            emailNotifications:
              type: boolean
              example: true
            advertiseEmailForwarding:
              type: boolean
              example: true
        credentialTypes:
          type: array
          items:
            type: string
            example: sensibill
        receiptEmailDomains:
          type: array
          items:
            type: string
            example: billpass.ca
        receiptEmailDomainsAndAliases:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                example: 5730f6eab57118365a00024c
              emailDomain:
                type: string
                example: billpass.ca
              aliases:
                type: array
                items:
                  type: string
                  example: billpass.ca
        featureOptions:
          type: object
          properties:
            insights:
              type: object
              properties:
                deactivationDate:
                  type: string
                activationDate:
                  type: string
            achievements:
              type: object
              properties:
                deactivationDate:
                  type: string
                activationDate:
                  type: string
            outgoingEmail:
              type: object
              properties:
                frontendUrlBase:
                  type: string
                emailViewPrefix:
                  type: string
                senderAddress:
                  type: string
            metrics:
              type: object
              properties:
                siteID:
                  type: string
                trackingURL:
                  type: string
                enableMetrics:
                  type: boolean
                  example: false
            camera:
              type: object
              properties:
                frontendAutomaticCaptureTimeout:
                  type: integer
                  example: 10
                showLongReceiptCapture:
                  type: boolean
                  example: true
                frontendCameraCaptureDefault:
                  type: string
                  example: auto
                showAutomaticCapture:
                  type: boolean
                  example: true
            showNotificationCenter:
              type: boolean
              example: true
            enableOfflineSupport:
              type: boolean
              example: true
            filters:
              type: object
              properties:
                showPaymentFilter:
                  type: boolean
                  example: true
                showDateFilter:
                  type: boolean
                  example: true
                showCurrencyFilter:
                  type: boolean
                  example: true
                showFilters:
                  type: boolean
                  example: true
            listingScreen:
              type: object
              properties:
                showWeeklyGrouping:
                  type: boolean
                  example: true
                showMonthlyGrouping:
                  type: boolean
                  example: true
            issueReporting:
              type: object
              properties:
                showAdditionalFeedback:
                  type: boolean
                  example: true
                showIssueReporting:
                  type: boolean
                  example: true
            showExpenseType:
              type: boolean
              example: true
            showTips:
              type: boolean
              example: true
            reminders:
              type: object
              properties:
                enableReturnReminders:
                  type: boolean
                  example: true
                enableWarrantyReminders:
                  type: boolean
                  example: true
                showReminders:
                  type: boolean
                  example: true
            showCategories:
              type: boolean
              example: true
            showNotes:
              type: boolean
              example: true
            showTags:
              type: boolean
              example: true
            showFavorites:
              type: boolean
              example: true
            showFolders:
              type: boolean
              example: true
            exports:
              type: object
              properties:
                populateName:
                  type: boolean
                  example: false
                requireAuthentication:
                  type: boolean
                  example: true
                enableExportNotifications:
                  type: boolean
                  example: true
                showExports:
                  type: boolean
                  example: true
            showUserManagement:
              type: boolean
              example: true
            registration:
              type: object
              properties:
                receiptAccountEmail:
                  type: string
                  enum:
                    - optional
                    - required
                    - disabled
                  example: optional
                requireReceiptAccount:
                  type: boolean
                  example: true
                requireEmails:
                  type: boolean
                  example: true
                showRegistration:
                  type: boolean
                  example: true
            showEditing:
              type: boolean
              example: true
            showBarcodeDisplay:
              type: boolean
              example: true
            showNavigation:
              type: boolean
              example: true
            enableReceiptLinking:
              type: boolean
              example: false
            enableEnhancedReceiptView:
              type: boolean
              example: true
            receiptDisplayLevel:
              type: integer
              example: 3
            enableEmailNotifications:
              type: boolean
              example: true
            showForgotPassword:
              type: boolean
              example: true
            branding:
              type: object
              properties:
                emailPrimaryColor:
                  type: string
                showPoweredByLogo:
                  type: boolean
                  example: true
                showMerchantLogos:
                  type: boolean
                  example: true
                showMerchantColors:
                  type: boolean
                  example: true
    userRequestProperties:
      type: object
      properties:
        credentialType:
          default: sensibill
          type: string
          description: 'This is the type of credentials that will be used to identify the newly created user uniquely to Sensibill. If a user is logging in with their account on Sensibill, this parameter should be "sensibill". If you are implementing a third-party single-sign-on based solution, this should be set to the credentialType that you were issued with your client credentials.'
        accessID:
          default: ''
          type: string
          example: test@test.com
          description: 'If you are using third-party single-sign-on, then this parameter is what is used to uniquely identify this user account to Sensibill systems. It is equivalent to a username.'
        accessSecret:
          default: ''
          type: string
          description: 'If you are using third-party single-sign-on, then this parameter is what is used to verify that you are the owner of this Sensibill account. It is equivalent to a password.'
        email:
          default: ''
          type: string
          format: email
          example: test@test.com
          description: 'The email address of the user. Typically only used by clients who want to allow sending email notifications directly from Sensibill. May be required, depending on your client configuration.'
        password:
          default: ''
          type: string
          description: 'The password for the user account. If you are creating a Sensibill account, this parameter is required. If you are using third-party single-sign-on, this parameter is optional'
    UserRequestDto:
      allOf:
        - $ref: '#/components/schemas/commonRegistrationParameters'
        - $ref: '#/components/schemas/notificationSettingsParameters'
        - $ref: '#/components/schemas/userRequestProperties'
    JwtUserRequestDtoProperties:
      type: object
      required:
        - client
      properties:
        client:
          default: ''
          type: string
          description: The clientID of the new user's client.
    JwtUserRequestDto:
      allOf:
        - $ref: '#/components/schemas/commonRegistrationParameters'
        - $ref: '#/components/schemas/notificationSettingsParameters'
        - $ref: '#/components/schemas/JwtUserRequestDtoProperties'
    userUpdateDtoProperties:
      type: object
      properties:
        status:
          type: string
          description: 'The status of the user''s account. Can be either ''registered'' or ''disabled''. NOTE! If you set a user''s account as ''disabled'', no API calls will be able to be made for that user - their access tokens will no longer work, including the one you may be using to make this API call.'
        receiptAccountEmail:
          type: string
          description: 'The email address to the user''s receipt account. This must be unique across all users registered with Sensibill, including both Sensibill accounts and third-party single-sign-on accounts. This will always be converted to a lower case value. This can only be set after registration if you client has been setup to indicate this parameter is optional during registration. The email address must use a permitted domain for your client.  Note: the receiptAccountEmail can only be set once for a user.'
        firstName:
          type: string
          description: The first name of the user.
        lastName:
          type: string
          description: The last name of the user.
        defaultCurrency:
          type: string
          description: 'Provides the default currency for the user. Must be an currency-code on the supported list of currencies, which can be obtained by going to /lookups/currencies'
        locale:
          type: string
          description: 'Provides the locale for the user. Must be a supported value from the list of locale-codes, which can be obtained by going to /lookups/locales'
    UserUpdateDto:
      allOf:
        - $ref: '#/components/schemas/notificationSettingsParameters'
        - $ref: '#/components/schemas/userUpdateDtoProperties'
    commonRegistrationParameters:
      type: object
      properties:
        receiptAccountEmail:
          default: ''
          example: test@billpass.ca
          type: string
          description: 'The email address to the users receipt account. This must be unique across all users registered with Sensibill, including both Sensibill accounts and third - party single - sign - on accounts.This will always be converted to a lower case value. Your client can be set up based on whether this parameter is required during registration, or if it is optional so that it can be specified later.The email address must use a permitted domain for your client.'
        firstName:
          default: ''
          example: John
          type: string
          description: The first name of the user. It is strongly encouraged that this be set to provide a more personalized experience for users.
        lastName:
          default: ''
          example: Smith
          type: string
          description: The last name of the user.
        defaultCurrency:
          default: ''
          type: string
          description: 'Provides the default currency for the user. Must be an currency-code on the supported list of currencies, which can be obtained by going to /lookups/currencies'
        folders:
          default: []
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                maxLength: 50
              color:
                type: string
                maxLength: 7
                pattern: ^#([0-9a-fA-F]{6})$
                example: '#ABCDEF'
          description: |
            Every element of the array should be an object representing a folder with a `color` (as six hex digits) and a **unique** folder `name` \
            Other entries in the array with duplicate folder names will be ignored after picking the first one
        createTestReceipts:
          default: false
          type: boolean
          description: Can be either "true" or "false". This parameter can be used by early integration partners during testing to create a number of ake testing receipts for the accounts they create.
    notificationSettingsParameters:
      type: object
      properties:
        notificationSettings.receipt.push:
          default: 'false'
          type: boolean
          description: Can be either "true" or "false". This parameter can be used to indicate that the user wishes to receive a push notification when a new receipt is posted to their account.
        notificationSettings.receipt.email:
          default: 'false'
          type: boolean
          description: Can be either "true" or "false". This parameter can be used to indicate that the user wishes to receive an email notification when a new receipt is posted to their account.
        notificationSettings.receipt.includeOriginal:
          default: 'false'
          type: boolean
          description: Can be either "true" or "false". This parameter can be used to indicate that the notification of a new receipt should include a copy of the original receipt email.
        notificationSettings.other.email:
          default: 'false'
          type: boolean
          description: Can be either "true" or "false". This parameter can be used to indicate that the user wishes all emails sent to their receipt account email address that are not receipt email (such as marketing emails) to be forwarded to their personal email address.
        notificationSettings.accountUpdates.email:
          default: 'true'
          type: boolean
          description: Can be either "true" or "false". This parameter can be used to indicate that the user wishes for an email notification when key account changes are made such as when their password is changed.
    TaxDto:
      type: object
      properties:
        amount:
          type: number
          example: 123.2
        percent:
          type: number
          example: 1.2
        type:
          type: string
          example: GST
    TaxConfidenceDto:
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/ConfidenceEnum'
        percent:
          $ref: '#/components/schemas/ConfidenceEnum'
        type:
          $ref: '#/components/schemas/ConfidenceEnum'
    CurrencyCode:
      description: 3 character ISO-4217
      type: string
      enum:
        - USD
        - CAD
        - GBP
        - EUR
        - NZD
        - AUD
        - BRL
        - CLP
        - CNY
        - CZK
        - DKK
        - HKD
        - HUF
        - INR
        - IDR
        - ILS
        - JPY
        - MYR
        - MXN
        - NOK
        - PKR
        - PHP
        - PLN
        - RUB
        - SGD
        - ZAR
        - KRW
        - SEK
        - CHF
        - TWD
        - THB
        - TRY
    EditCurrencyCode:
      description: 3 character ISO-4217
      type: string
      nullable: true
      enum:
        - USD
        - CAD
        - GBP
        - EUR
        - NZD
        - AUD
        - BRL
        - CLP
        - CNY
        - CZK
        - DKK
        - HKD
        - HUF
        - INR
        - IDR
        - ILS
        - JPY
        - MYR
        - MXN
        - NOK
        - PKR
        - PHP
        - PLN
        - RUB
        - SGD
        - ZAR
        - KRW
        - SEK
        - CHF
        - TWD
        - THB
        - TRY
    LifecycleStatusesEnum:
      type: string
      description: |-
        Defines the states that a receipt can be in.
        * active - The receipt exists, and has valid data;
        * pending_validation - The receipt exists, and is missing some required data;
        * deleted - This receipt has been soft-deleted;
        * archived - Returned when the returned data belongs to a previous version of this receipt.
      enum:
        - active
        - archived
        - pending_validation
        - deleted
    ReceiptTypesEnum:
      type: string
      description: Defines the type of receipt.
      enum:
        - item_receipt
        - payment_receipt
    DuplicateStatusEnum:
      type: string
      description: Used to indicate whether or not a receipt was detected as a duplicate. Users may opt to keep a receipt in the case that it was wrongly detected as a duplicate.
      enum:
        - no_duplicate
        - duplicate_detected
        - keep_anyway
    ValidationStatusEnum:
      type: string
      description: The status associated with the validation of the receipt.
      enum:
        - ok
        - failed
    MerchantStatusEnum:
      type: string
      description: The status associated with the merchant.
      enum:
        - active
        - review
        - deactivated
    ExpenseTypesEnum:
      type: string
      description: The expense type associated with the receipt. Can be either 'business' or 'personal'.
      enum:
        - personal
        - business
    MatchedAccountTransactionDto:
      properties:
        amount:
          type: number
          example: 23.53
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
        id:
          type: string
          description: The ID of the transaction from the financial institution.
          example: EsmtpT9xa2S4gXym9GHBJrLkigfjH
        maskedAccountNumber:
          type: string
          description: The masked account number of the transaction from the financial institution.
          example: '**** **** **** 9900'
        merchantName:
          type: string
          description: The name of the merchant the transaction from the financial institution was with.
          example: Apple
        postedDate:
          type: string
          format: date-time
          description: The post date of the transaction from the financial institution. The date is in the ISO-8601 format
        summary:
          type: string
          description: The summary text associated with the transaction from the financial institution.
        transactionDate:
          type: string
          format: date-time
          description: The date of the transaction from the financial institution. The date is in the ISO-8601 format.
    ReceiptDisplayListDto:
      type: object
      required:
        - receipts
        - count
      properties:
        receipts:
          type: array
          items:
            $ref: '#/components/schemas/ReceiptDisplayListReceiptDto'
        count:
          type: integer
          example: 1
    ReceiptDataListDto:
      type: object
      required:
        - receipts
        - count
      properties:
        receipts:
          type: array
          items:
            $ref: '#/components/schemas/ReceiptDataListReceiptDto'
        count:
          type: integer
          example: 1
    ReceiptDataListReceiptDto:
      type: object
      properties:
        id:
          type: string
          example: z6uuM0iqnvf8sCDBRYLJ
        arrivalDateTime:
          type: string
          format: date
          example: '2017-10-26T16:01:13.836Z'
        accountURL:
          type: string
          example: www.example.com
        content:
          $ref: '#/components/schemas/ReceiptDataListContentDto'
        confidence:
          $ref: '#/components/schemas/ReceiptDataListConfidenceDto'
        userMetadata:
          $ref: '#/components/schemas/ReceiptDataListUserMetadataDto'
        accountMetadata:
          $ref: '#/components/schemas/AccountMetadataDto'
        type:
          $ref: '#/components/schemas/ReceiptTypesEnum'
        sourceDocument:
          $ref: '#/components/schemas/SourceDocumentDto'
        status:
          $ref: '#/components/schemas/ReceiptStatusDto'
        clientPrivateMetaData:
          $ref: '#/components/schemas/PrivateMetaDataDto'
    ReceiptDataListContentDto:
      properties:
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
        purchaseDate:
          type: string
          format: date
          description: 'The date on which this purchase was made. This is only the date component of  the local time at which the purchase was made, with no explicit timezone information. see: ''purchaseTime''. Date is in ISO-8601 format.'
          example: '2019-06-23'
        purchaseTime:
          description: 'The time at which the purchase was made. This is only the time component of the local time at which the purchase was made, with no explicit timezone information.'
          type: string
          example: '13:09:37'
        total:
          $ref: '#/components/schemas/TaxableAmountDto'
        tenders:
          type: array
          items:
            $ref: '#/components/schemas/TenderDto'
        merchant:
          $ref: '#/components/schemas/ReceiptDataListMerchantDto'
    ReceiptDataListMerchantDto:
      type: object
      properties:
        name:
          type: string
          example: Home Sense
        categoryCode:
          type: string
          example: shopping
    ReceiptDataListUserMetadataDto:
      properties:
        expenseType:
          $ref: '#/components/schemas/ExpenseTypesEnum'
        folders:
          type: array
          items:
            type: string
          description: ''
        isNew:
          type: boolean
        notes:
          type: string
          description: ''
    ReceiptCreateDto:
      type: object
      properties:
        image1:
          default: ''
          type: string
          format: binary
          description: The binary image data to be attached within a multi-part form. Only one image can be sent. The file type must be JPG and the maximum file size is 5 MB.
        base64_image1:
          default: ''
          type: string
          format: base64
          description: 'If your client does not support multipart form encoded requests, then you also have the option of uploading an image by encoding it into base64.'
        base64_image1_content_type:
          type: string
          description: 'If you are using base64 file uploads, then you can use this field to set the content-type of those file uploads. If it is omitted, the content-type will be application/jpeg.'
        file:
          default: ''
          type: string
          format: binary
          description: The binary data to be attached within a multi-part form. The file type can be either JPG or PDF and the maximum file size for the file is 5 MB. You can upload a file to either file or image1 but not both.
        base64_file:
          default: ''
          type: string
          format: base64
          description: 'If your client does not support multipart form encoded requests, then you also have the option of uploading an file by encoding it into base64. The currently supported types of base64 encoded files are image and pdf.'
        base64_file_content_type:
          type: string
          description: 'If you are using the base64_file field, then you can use this field to set the content-type of that file upload. This field can be omitted, in which case the api will figure out the content-type of the file.'
        privateMetaData:
          $ref: '#/components/schemas/PrivateMetaDataDto'
        userSentTime:
          default: '2020-08-30T01:23:47.000Z'
          type: string
          format: date-time
          description: 'A date time string in the ISO-8601 format (YYYY-MM-DDTHH:mm:ss.SSSZ). Clients should submit this optional field with the proper timezone to avoid displaying date and time in the server''s timezone.'
        sharedMetaData.expenseType:
          $ref: '#/components/schemas/ExpenseTypesEnum'
        accountTransactionData.id:
          default: ''
          type: string
          description: ID of account transaction.
        accountTransactionData.transactionDate:
          default: '2020-08-30T01:23:47Z'
          type: string
          format: date-time
          description: Date of account transaction in the ISO-8601 format.
        accountTransactionData.postedDate:
          default: '2020-08-30T01:23:47Z'
          type: string
          format: date-time
          description: Posted date of account transaction in the ISO-8601 format.
        accountTransactionData.merchantName:
          default: ''
          type: string
          description: Merchant name of account transaction.
        accountTransactionData.summary:
          default: ''
          type: string
          description: Summary of account transaction.
        accountTransactionData.amount:
          default: ''
          type: number
          description: Amount of account transaction.
        accountTransactionData.maskedAccountNumber:
          default: ''
          type: string
          description: Masked account number of account transaction.
        accountTransactionData.currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
    EditReceiptRequestQueryDto:
      type: object
      properties:
        content:
          type: object
          description: the raw data content from the receipt
          properties:
            totalBeforeDiscountsFeesTips:
              type: object
              description: Total amount of the receipt before any discounts/fees.
              properties:
                beforeTax:
                  type: number
                  nullable: true
                  description: Total amount of receipt before any discounts/fees and taxes
                taxes:
                  type: array
                  nullable: true
                  description: A list of taxes applied to the beforeTax amount of totalBeforeDiscountsFeesTips
                  items:
                    $ref: '#/components/schemas/TaxDto'
            total:
              type: object
              description: Total amount of the receipt after all of the discounts/fees and gratuities applied.
              properties:
                afterTax:
                  type: number
                  description: The currency amount after tax has been applied
            currencyCode:
              $ref: '#/components/schemas/CurrencyCode'
            purchaseDate:
              type: string
              description: The Date on the Receipt in date time format
            purchaseTime:
              description: 'The time at which the purchase was made. This is only the time component of the local time at which the purchase was made, with no explicit timezone information.'
              type: string
            merchant:
              type: object
              properties:
                name:
                  type: string
                  description: A user-presentable name for this merchant.
                categoryCode:
                  type: string
                  description: The category of the merchant. Use the endpoint /lookups/receiptcategories for a list of valid categories.
            tips:
              type: object
              description: The total amount of gratuities on the receipt.
              properties:
                afterTax:
                  type: number
                  nullable: true
                  description: Total amount of gratuties before any taxes
        userMetadata:
          type: object
          properties:
            expenseType:
              $ref: '#/components/schemas/ExpenseTypesEnum'
            folders:
              type: array
              items:
                type: string
              description: ''
            isNew:
              type: boolean
              description: ''
            notes:
              type: string
              description: ''
            warrantyPeriod:
              type: object
              description: The details about the warranty period for the receipt. These fields can only be edited if the receipt date is populated.
              properties:
                unit:
                  type: string
                  description: 'Date period time unit which can be any of these values- day, week, month, year. This parameter should be used together with the ''duration'' parameter. Also in order to use it the receipt must have the ''receiptDate'' set or it should be supplied as another edit parameter within the same request.'
                  example: year
                duration:
                  type: integer
                  description: Number of date period time units which defines the duration of the date period in question. This parameter should be used together with the 'unit' parameter. Also in order to use it the receipt must have the 'receiptDate' set or it should be supplied as another edit parameter within the same request.
                  example: 1
            returnPeriod:
              type: object
              description: The details about the return period for the receipt. These fields can only be edited if the receipt date is populated.
              properties:
                unit:
                  type: string
                  description: 'Date period time unit which can be any of these values- day, week, month, year. This parameter should be used together with the ''duration'' parameter. Also in order to use it the receipt must have the ''receiptDate'' set or it should be supplied as another edit parameter within the same request.'
                  example: day
                duration:
                  type: integer
                  description: Number of date period time units which defines the duration of the date period in question. This parameter should be used together with the 'unit' parameter. Also in order to use it the receipt must have the 'receiptDate' set or it should be supplied as another edit parameter within the same request.
                  example: 14
        accountMetadata:
          type: object
          properties:
            transaction:
              $ref: '#/components/schemas/MatchedAccountTransactionDto'
    EditReceiptResponseDto:
      type: object
      properties:
        id:
          type: string
    AuthorizationResponse:
      type: object
      properties:
        code:
          type: string
          example: DBhXEQiQiwqCV4hI61HX7NZfqCeGLpYt72ZCkAl-ZDQOjRKpKCVxBTLuhdc0-pX5xdM-4KfBdidwPJy05Oxs3w
    ClientInfoResponseDto:
      type: object
      properties:
        clientID:
          type: string
          example: examplebank
          description: A short string identifier for the client.
        name:
          type: string
          example: Example Bank
          description: A human-readable name for the client.
        type:
          type: string
          description: A short identifier classifying the client.
        status:
          type: string
          example: active
        key:
          type: string
          example: R14KjAShhJCRgYObBu-P8t9PuVdDsFpIYcxmhfHWOA5Q
          description: 'For clients using OAuth, the OAuth client key.'
        redirectURI:
          type: string
          example: 'https://testclient.com/redirect'
          description: 'For clients using OAuth, the expected redirectURI.'
        policies:
          type: array
          description: An array of objects describing the available options and settings for the client in detail.
          items:
            $ref: '#/components/schemas/ClientPoliciesDto'
        authenticationSettings:
          type: object
          properties:
            oauth:
              type: boolean
              example: true
            refreshTokenExpiryDays:
              type: integer
              example: 30
            accessTokenExpiryMinutes:
              type: integer
              example: 43200
            setTempAccessSecret:
              type: boolean
              example: false
            disablePasswordStrengthCheck:
              type: boolean
              example: false
            maximumFailedLoginAttempts:
              type: integer
              example: 0
            jwt:
              type: boolean
              example: false
        notificationSettings:
          type: object
          description: An object describing which notifications could be sent for this client.
          properties:
            accountUpdates:
              type: boolean
        providerIDs:
          type: object
          description: Identifiers for external integrations used by this client.
          properties:
            gmail:
              type: string
              example: myGmailID123
            outlook:
              type: string
              example: myOutlookID123
        accessTokenExpiry:
          type: string
          format: date
          description: 'When called with a client access token, the date and time that the token will expire.'
          example: '2017-05-23T17:42:34.407Z'
    RegisterUserResponseDto:
      type: object
      properties:
        id:
          type: string
          example: ZUZ3mDmSyCHlgwne7cNP
          description: 'A Sensibill-specific ID for the user. '
    UserResponseDto:
      type: object
      description: Get account info for current user
      properties:
        email:
          type: string
          example: john.smith@test.com
        receiptAccountEmail:
          type: string
          example: john@billpass.ca
        receiptCounts:
          type: object
          properties:
            favorite:
              type: integer
              example: 8
            thisMonth:
              type: integer
              example: 39
            total:
              type: integer
              example: 178
        emailCounts:
          type: object
          properties:
            nonreceipt:
              type: integer
              example: 3
            receipt:
              type: integer
              example: 9
            total:
              type: integer
              example: 12
        folders:
          type: array
          items:
            $ref: '#/components/schemas/SimplifiedFolderDto'
        notificationSettings:
          type: object
          properties:
            accountUpdates:
              type: object
              properties:
                email:
                  type: boolean
                  example: true
            receiptExport:
              type: object
              properties:
                email:
                  type: boolean
                  example: false
                push:
                  type: boolean
                  example: false
            other:
              type: object
              properties:
                email:
                  type: boolean
                  example: false
            receipt:
              type: object
              properties:
                includeOriginal:
                  type: boolean
                  example: true
                email:
                  type: boolean
                  example: true
                push:
                  type: boolean
                  example: true
        locale:
          type: string
          example: en-CA
        status:
          type: string
          example: registered
        lastName:
          type: string
          example: Smith
        firstName:
          type: string
          example: John
        id:
          type: string
          example: 6velPKW4OFChLWlpqXpJ
        accessID:
          type: string
          example: xyz12345
        credentialType:
          type: string
          example: somebank
        nickname:
          type: string
          example: jsmith
        alerts:
          type: array
          items:
            $ref: '#/components/schemas/AlertDto'
        pilotAccess:
          type: object
          properties:
            diagnostics:
              type: object
              properties:
                enabled:
                  type: boolean
                  example: false
        accessTokenExpiry:
          type: string
          format: date
          example: '2017-05-23T17:42:34.407Z'
        refreshTokenExpiry:
          type: string
          format: date
          example: '2017-05-30T17:42:34.407Z'
    AlertDto:
      type: object
      properties:
        name:
          type: string
          enum:
            - pending_validation
            - recently_added
            - duplicate
        count:
          type: integer
          example: 2
        list:
          type: array
          items:
            $ref: '#/components/schemas/UserReceiptDto'
    FolderRequestDto:
      type: object
      required:
        - name
        - color
      properties:
        name:
          type: string
          example: MyOtherFolder
          description: The name for this folder. A user may not have two folders with the same name.
        color:
          type: string
          example: aa0000
          description: 'Six hex digits representing the color of this folder, e.g. <code>cc0000</code> or <code>9b1515</code>.'
    FolderUpdateRequestDto:
      type: object
      properties:
        name:
          type: string
          example: MyOtherFolder
          description: The name for this folder. A user may not have two folders with the same name.
        color:
          type: string
          example: aa0000
          description: 'Six hex digits representing the color of this folder, e.g. <code>cc0000</code> or <code>9b1515</code>.'
    FolderDeleteRequestDto:
      type: object
      properties:
        delete_receipts:
          type: boolean
          default: false
          description: Delete any receipts that are in this folder.
    FoldersDeleteRequestDto:
      type: object
      required:
        - folders
      properties:
        folders:
          type: array
          items:
            type: string
            description: List of folder IDs that you want deleted.
            example: 6OeYUlNyyeVHEmHMLmgZ
        delete_receipts:
          type: boolean
          default: false
          description: Delete any receipts that are in this folder.
    RemindersDeleteRequestDto:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
            example: 6OeYUlNyyeVHEmHMLmgZ
        deleteAll:
          type: boolean
      example:
        deleteAll: true
    EmailsDeleteRequestDto:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
          example:
            - elCUvS4DJhlwYxTBm8dl
            - SafFqT7ZrYJ1CMvm
        classification:
          type: array
          items:
            type: string
            example: item_receipt
    ReceiptsDeleteRequestDto:
      type: object
      required:
        - ids
      properties:
        ids:
          type: array
          items:
            type: string
          example:
            - ynV9utRzv5kj9Jl37vmy
            - 6EYRaHwUFaztKKzZjJRj
    AddReceiptsToFolderDto:
      type: object
      required:
        - receiptIDs
      properties:
        receiptIDs:
          type: array
          items:
            type: string
            example: Iw6DUSraLoGOnHiL2Ps4pBz8F1oQCndA4UhzS80OAHDg0LxpJzRtmUr89sFrYS2DfQfbhhkF8kPe5jF9_nFE
    RemoveReceiptsFromFolderDto:
      type: object
      required:
        - receiptIDs
      properties:
        receiptIDs:
          type: array
          items:
            type: string
            example: Iw6DUSraLoGOnHiL2Ps4pBz8F1oQCndA4UhzS80OAHDg0LxpJzRtmUr89sFrYS2DfQfbhhkF8kPe5jF9_nFE
    ReceiptUpdateDto:
      properties:
        userSubmittedData:
          type: object
          properties:
            grandTotal:
              default: ''
              type: number
              description: The grand total of the receipt.
            receiptDate:
              default: '2020-01-01'
              type: string
              format: date
              description: The receipt date.
            merchantName:
              default: ''
              type: string
              description: The merchant name.
            receiptCategory:
              default: ''
              type: string
              description: The category of the receipt. Use the /lookups/receiptcategories endpoint for a list of valid categories.
            currencyCode:
              default: ''
              type: string
              description: The currency code to be used everywhere on the receipt. Must be a valid currency code as returned by our /lookups/currencies endpoint.
        flagType:
          default: ''
          type: string
          enum:
            - flag-receipt-incorrect
            - flag-receipt-broken
            - flag-receipt-notareceipt
            - flag-receipt-general
          description: 'The category of flag on the receipt that operators will review. This can be used to allow users to flag problem receipts. Valid values are: flag-receipt-incorrect, flag-receipt-broken, flag-receipt-notareceipt, flag-receipt-general'
        flagInfo:
          default: ''
          type: string
          description: Additional info included when a receipt is flagged. This value will be ignored if flagType has not been set.
        recentlyAdded:
          default: ''
          type: string
          description: Used to clear the recentlyAdded field which is used to indicate a receipt was recently added. This request could be sent after a user views a receipt or some fix period of time after a receipt was created. Setting this field to 'false' will clear the recentlyAdded field of the receipt.
        editTime:
          default: '2020-01-01'
          type: string
          format: date
          description: 'This variable is used to make sure old offline edits do not overwrite newer changes. You should only supply this variable for edits made in the past that could not be submitted immediately. If the given editTime is older than the last user modification, the request will be rejected.'
        sharedMetaData:
          type: object
          properties:
            folders:
              default: ''
              type: string
              description: The folder IDs associated with the receipt. These should match the ID values of the folders on the user object.
            expenseType:
              type: string
              enum:
                - business
                - personal
              description: The expense type associated with the receipt. Can be either 'business' or 'personal'
            note:
              default: ''
              type: string
              description: The note associated with the receipt. Any hashtags included in body of these note will become searchable.
            favorite:
              default: false
              type: boolean
              description: 'If set to true, it will mark this receipt as a ''favorite'', enabling searching based on this. If set to false, it will clear the favorite flag from this receipt.'
        accountTransactionData:
          type: object
          description: 'Set to {} to clear accountTransactionData from the receipt. To update an individual field in accountTransactionData, set accountTransationData.id: ''ABC123''. To unset an individual field, set accountTransationData.id: null.'
          example:
            id: account_id
    ReceiptEditRequestDto:
      type: object
      properties:
        edit:
          type: object
          description: Attributes to edit
          properties:
            receiptDate:
              type: string
              format: date
              example: '2016-01-01T16:16'
              description: The Date on the Receipt
            amount:
              type: number
              nullable: true
              example: 41.6
              description: The grand total on the receipt
            currencyCode:
              type: string
              example: CAD
              description: The currency code for the grand total
            merchantName:
              type: string
              nullable: true
              example: Wal-Mart
              description: The merchant that issued the receipt
            expenseType:
              type: string
              example: personal
              description: Must be one of 'business' or 'personal'
            favorite:
              type: boolean
              example: 'true'
              description: Is this receipt favorited by the user
            receiptCategory:
              type: string
              example: utilities
              description: The category of the receipt. Use the /lookups/receiptcategories endpoint for a list of valid categories.
            folders:
              type: array
              items:
                type: string
                example: aaa
              description: What folder this receipt belongs to
            note:
              type: string
              example: 'Notey McNote Face #hashtag in my notes'
              description: 'A free form text field the user can edit with #hashtags'
            taxAmount:
              type: number
              example: 0.48
              description: The amount to show as the sum of all taxes on the receipt
            taxes:
              type: array
              nullable: true
              items:
                type: object
                properties:
                  amount:
                    type: number
                    example: 5.54
                  ruleID:
                    type: string
                    example: Sales Tax
                  percent:
                    type: integer
                    example: 12
              description: 'All taxes applied to the total on the Receipt. A tax object consists of:<br>&emsp;ruleID string (eg. ''HST'', ''VAT'', ''Sales Tax'')<br>&emsp;amount number<br>&emsp;percent number<br>All properties are optional'
            subTotalAmount:
              type: number
              nullable: true
              example: 3.68
              description: The amount to show as the subtotal on the receipt
            tipAmount:
              type: number
              nullable: true
              example: 1
              description: The amount to show as the tip (gratuity) on the receipt
            netTotalAmount:
              type: number
              nullable: true
              example: 1
              description: The amount to show as the Net Total on the receipt (UK)
            recentlyAdded:
              type: boolean
              example: false
              description: 'Mark the receipt as not recently added, a value of true will be ignored.'
            editTime:
              type: string
              format: date
              example: '2016-12-01T19:24:33+00:00'
              description: 'Last time the user changed the receipt, if set an edit will be rejected if the receipt has been edited after the given time.'
            flagType:
              type: string
              enum:
                - flag-receipt-incorrect
                - flag-receipt-broken
                - flag-receipt-notareceipt
                - lag-receipt-general
              example: flag-receipt-notareceipt
              description: 'The type of error the user is reporting, one of : ''flag-receipt-incorrect'', ''flag-receipt-broken'', ''flag-receipt-notareceipt'', ''flag-receipt-general'''
            flagInfo:
              type: string
              example: 'This a picture of a :banana: not a receipt'
              description: The text of the issue the user is reporting.
            warrantyPeriod:
              type: object
              properties:
                unit:
                  type: string
                  enum:
                    - day
                    - week
                    - month
                    - year
                  example: year
                  description: 'Date period time unit which can be any of the following: day, week, month, year.<br/> This parameter should be used together with the ''duration'' parameter. Also in order to use it the receipt must have the ''receiptDate'' set or it should be supplied as another edit parameter within the same request.'
                duration:
                  type: string
                  example: '1'
                  description: Number of date period time units which defines the duration of the date period in question. This parameter should be used together with the 'unit' parameter. Also in order to use it the receipt must have the 'receiptDate' set or it should be supplied as another edit parameter within the same request.
            returnPeriod:
              type: object
              properties:
                unit:
                  type: string
                  example: day
                  description: 'Date period time unit which can be any of the following: day, week, month, year.<br/> This parameter should be used together with the ''duration'' parameter. Also in order to use it the receipt must have the ''receiptDate'' set or it should be supplied as another edit parameter within the same request.'
                duration:
                  type: string
                  example: '14'
                  description: Number of date period time units which defines the duration of the date period in question. This parameter should be used together with the 'unit' parameter. Also in order to use it the receipt must have the 'receiptDate' set or it should be supplied as another edit parameter within the same request.
            accountTransactionData:
              type: object
              description: 'Set to {} to clear accountTransactionData from the receipt. To update an individual field in accountTransactionData, set accountTransationData.id: ''ABC123''. To unset an individual field, set accountTransationData.id: null.'
              example:
                id: account_id
    ReceiptEditResponseDto:
      type: object
      properties:
        id:
          type: string
          example: DHRUUeoXA8_p8fNQrtMs
          description: Receipt id.
    ReceiptUpdateDuplicateRequestDto:
      type: object
      required:
        - duplicateStatus
      properties:
        duplicateStatus:
          default: keep_anyway
          type: string
          enum:
            - keep_anyway
          description: The duplicateStatus of a receipt.
    UserReceiptDto:
      type: object
      properties:
        objectType:
          type: string
          example: receipt
        receiptDate:
          type: string
          format: date
          example: '2015-08-30T00:00:00.000Z'
        listingSortDate:
          type: string
          format: date
          example: '2015-08-30T00:00:00.000Z'
        merchantName:
          type: string
          example: Home Depot
          description: The name of the merchant. If no merchant is set this will contain the string 'Merchant?'
        renderURL:
          type: string
          example: 'https://receipts-sandbox.sensibill.io/#/receipt/8eteXZALOgVRBz7jqQY_U1A7_pwO_jDW5yb-aSNkbaGgLSzVyEvN8VNSEfzIFw4koEc'
        total:
          type: object
          properties:
            grand:
              type: number
              example: 71.79
            currencyCode:
              type: string
              example: GBP
        id:
          type: string
          example: 8eteXZALOgVRBz7jqQY_U1A7_pwO_jDW5yb-aSNkbaGgLSzVyEvN8VNSEfzIFw4koEc
    UserCountResponseDto:
      allOf:
        - $ref: '#/components/schemas/AttentionRequiredCountDto'
        - $ref: '#/components/schemas/TenderCategoryCashCountDto'
        - $ref: '#/components/schemas/TenderCategoryCreditCountDto'
        - $ref: '#/components/schemas/TenderCategoryDebitCountDto'
        - $ref: '#/components/schemas/TenderCategoryGiftCardCountDto'
        - $ref: '#/components/schemas/ValidationRequiredCountDto'
        - $ref: '#/components/schemas/RecentlyAddedCountDto'
        - $ref: '#/components/schemas/NonReceiptEmailsCountDto'
        - $ref: '#/components/schemas/TriggeredRemindersCountDto'
    UserTagsResponseDto:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
            example: myTag
    UserTipsResponseDto:
      type: object
      properties:
        tips:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: general
              text:
                type: string
                example: Take photos as soon as possible after obtaining the receipt in order to prevent smudging and get the best quality photo.
    AttentionRequiredCountDto:
      type: object
      properties:
        attentionRequired:
          type: object
          properties:
            receipts:
              type: integer
    TenderCategoryCashCountDto:
      type: object
      properties:
        tenderCategoryCash:
          type: object
          properties:
            receipts:
              type: integer
    TenderCategoryCreditCountDto:
      type: object
      properties:
        tenderCategoryCredit:
          type: object
          properties:
            receipts:
              type: integer
    TenderCategoryDebitCountDto:
      type: object
      properties:
        tenderCategoryDebit:
          type: object
          properties:
            receipts:
              type: integer
    TenderCategoryGiftCardCountDto:
      type: object
      properties:
        tenderCategoryGiftCard:
          type: object
          properties:
            receipts:
              type: integer
    ValidationRequiredCountDto:
      type: object
      properties:
        validationRequired:
          type: object
          properties:
            receipts:
              type: integer
    RecentlyAddedCountDto:
      type: object
      properties:
        recentlyAdded:
          type: object
          properties:
            receipts:
              type: integer
    NonReceiptEmailsCountDto:
      type: object
      properties:
        nonReceiptEmails:
          type: object
          properties:
            receipts:
              type: integer
    TriggeredRemindersCountDto:
      type: object
      properties:
        triggeredReminders:
          type: object
          properties:
            receipts:
              type: integer
    EmptyObjectResponseDto:
      description: An empty object.  The noProperties property is a placeholder to help API generation
      type: object
      properties:
        noProperties:
          description: This property will not actually be returned.
          type: string
    EmailAvailabilityResponseDto:
      type: object
      properties:
        available:
          type: boolean
          example: true
          description: This is a flag that states if the email address is available or not for a new user registration.
    ReceiptEmailAvailabilityResponseDto:
      type: object
      properties:
        available:
          type: boolean
          example: 'true'
          description: This is a flag that states if the email address is available or not.
        alternatives:
          type: array
          items:
            type: string
            example: bob_smith@abc321bank.com
          description: 'This is a list of possible email addresses which are similar to the email address which the client requested availability for. If the email address is available, this list will be omitted.'
    UsernameAvailabilityResponseDto:
      type: object
      properties:
        available:
          type: boolean
          example: 'true'
          description: This is a flag that states if the username is available or not.
    GetFoldersResponseDto:
      type: object
      required:
        - folders
      properties:
        folders:
          type: array
          items:
            $ref: '#/components/schemas/FolderDto'
    SimplifiedFolderDto:
      type: object
      properties:
        id:
          type: string
          example: 6OeYUlNyyeVHEmHMLmgZ
          description: The id of the folder
        name:
          type: string
          example: Renovations-2021-Jan
          description: The name for this folder. A user may not have two folders with the same name.
        color:
          type: string
          example: cc0000
          description: Six hex digits representing the color of this folder.
        updatedAt:
          type: string
          format: date
          example: '2015-09-30T17:56:45.236Z'
        createdAt:
          type: string
          format: date
          example: '2015-11-30T17:56:45.236Z'
    FolderDto:
      type: object
      properties:
        id:
          type: string
          example: 6OeYUlNyyeVHEmHMLmgZ
          description: The id of the folder
        name:
          type: string
          example: Renovations-2021-Jan
          description: The name for this folder. A user may not have two folders with the same name.
        color:
          type: string
          example: cc0000
          description: Six hex digits representing the color of this folder.
        updatedAt:
          type: string
          format: date
          example: '2015-09-30T17:56:45.236Z'
        createdAt:
          type: string
          format: date
          example: '2015-11-30T17:56:45.236Z'
        count:
          type: integer
          example: 3
        totals:
          type: array
          items:
            $ref: '#/components/schemas/FolderTotalsDto'
    FolderTotalsDto:
      type: object
      properties:
        amount:
          type: number
          example: 35.53
          description: The total amount of all receipts in the folder matching the currency code.
        count:
          type: integer
          example: 3
          description: The count of all reeipts in the folder matching the currency code. Must be a valid currency code as returned by our /lookups/currencies endpoint
        currencyCode:
          type: string
          example: CAD
          description: The currency code associated with the total amount of the receipts in the folder matching this currency. It will be a valid currency code as returned by our /lookups/currencies endpoint
        displayAmount:
          type: string
          example: $35.53
          description: 'The total amount of all receipts in the folder matching the currency code formatted based on the specified locale, or if not specified the locale of the user.'
    AddFolderResponseDto:
      type: object
      properties:
        id:
          type: string
          example: 9k-mU2YuNiakP0O2mCvF
    AddReceiptsToFolderResponseDto:
      type: object
      properties:
        updated:
          type: integer
          example: 2
    ReceiptSynchronousResponseDto:
      type: object
      properties:
        id:
          type: string
          description: This is a unique identifier which is used to identify the receipt on Sensibill's system.
          example: XuncoaVG7XMTY0iWHTCa
    ReceiptTransactionResponseDto:
      type: object
      properties:
        id:
          type: string
          example: qKbEBkDjRB_bm_wVDoFn
          description: This is a unique identifier which is used to identify this transaction on Sensibill's system.
        status:
          type: string
          enum:
            - initializing
            - queued
            - processing
            - completed
            - failed
            - stopped
          example: initializing
          description: 'The status of the transaction, which is ''queued'' initially.'
        createdAt:
          type: string
          example: '2015-09-25T20:26:48.352Z'
          description: The GMT timestamp of the request.
        processingStart:
          type: string
          format: date
          example: '2015-09-25T20:26:48.352Z'
          description: The GMT timestamp representing the beginning of the processing.
        processingFinish:
          type: string
          format: date
          example: '2015-09-25T20:26:48.352Z'
          description: The GMT timestamp representing the end of the processing. It's empty when the transaction is queued or in processing.
        retryCount:
          type: integer
          example: 0
          description: A number representing how many times the transaction has been reprocessed.
        expectedProcessingTime:
          type: string
          enum:
            - fast
            - medium
            - slow
          description: 'One of ''fast'', ''medium'', ''slow'' depending on how fast the transaction is expected to complete'
        emails:
          type: array
          items:
            type: string
            example: OXH5daRNKTksAAZcmyjR
            description: The ID of the email.
        emailList:
          $ref: '#/components/schemas/EmailListDto'
        receiptList:
          $ref: '#/components/schemas/ReceiptListArrayDto'
        receipts:
          $ref: '#/components/schemas/ReceiptArrayDto'
    EmailListDto:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            example: OXH5daRNKTksAAZcmyjR
            description: The ID of the email.
      description: Contains info for each email associated with the transaction.
    ReceiptListArrayDto:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            example: YLbX6Ege4qE7icFNPUXQ
            description: The ID of the receipt.
          renderURL:
            type: string
            example: 'https://receipts-sandbox.sensibill.io/#/receipt/YLbX6Ege4qE7icFNPUXQ'
            description: The URL used to render an HTML version of the receipt.
      description: Contains info for each receipt associated with the transaction.
    ReceiptArrayDto:
      type: array
      items:
        type: string
        example: YLbX6Ege4qE7icFNPUXQ
        description: The ID of the receipt.
    ReceiptEditDto:
      type: object
      properties:
        receiptDate:
          type: string
          format: date
          example: '2016-01-01T16:16'
          description: The Date on the Receipt
        amount:
          type: number
          example: 41.6
          description: The grand total on the receipt
        currencyCode:
          type: string
          example: CAD
          description: The currency code for the grand total
        merchantName:
          type: string
          example: Wal-Mart
          description: The merchant that issued the receipt
        expenseType:
          type: string
          example: personal
          description: Must be one of 'business' or 'personal'
        favorite:
          type: boolean
          example: 'true'
          description: Is this receipt favorited by the user
        receiptCategory:
          type: string
          example: utilities
          description: The category of the receipt. Use the /lookups/receiptcategories endpoint for a list of valid categories.
        folders:
          type: array
          items:
            type: string
          description: What folder this receipt belongs to
        note:
          type: string
          example: 'Notey McNote Face #hashtag in my notes'
          description: 'A free form text field the user can edit with #hashtags'
        taxAmount:
          type: number
          example: 0.48
          description: The amount to show as the sum of all taxes on the receipt
        taxes:
          type: array
          items:
            type: object
            properties:
              amount:
                type: integer
                example: 5.54
              ruleID:
                type: string
                example: Sales Tax
              percent:
                type: integer
                example: 12
          description: 'All taxes applied to the total on the Receipt. A tax object consists of:<br>&emsp;ruleID [string] (eg. ''HST'', ''VAT'', ''Sales Tax'')<br>&emsp;amount [number]<br>&emsp;percent [number]<br>All properties are optional'
        subTotalAmount:
          type: number
          example: 3.68
          description: The amount to show as the subtotal on the receipt
        tipAmount:
          type: number
          example: 1
          description: The amount to show as the tip (gratuity) on the receipt
        netTotalAmount:
          type: number
          example: 1
          description: The amount to show as the Net Total on the receipt (UK)
        recentlyAdded:
          type: boolean
          example: false
          description: 'Mark the receipt as not recently added, a value of true will be ignored.'
        editTime:
          type: string
          format: date-time
          example: '2016-12-01T19:24:33+00:00'
          description: 'Last time the user changed the receipt, if set an edit will be rejected if the receipt has been edited after the given time. Eg. time stamp (ISO8601).'
        flagType:
          type: string
          example: flag-receipt-notareceipt
          description: 'The type of error the user is reporting, one of : ''flag-receipt-incorrect'', ''flag-receipt-broken'', ''flag-receipt-notareceipt'', ''flag-receipt-general'''
        flagInfo:
          type: string
          example: This a picture of a banana not a receipt
          description: The text of the issue the user is reporting.
        warrantyPeriod:
          type: object
          properties:
            unit:
              type: string
              example: year
              description: 'Date period time unit which can be any of the following: day, week, month, year. This parameter should be used together with the ''duration'' parameter. Also in order to use it the receipt must have the ''receiptDate'' set or it should be supplied as another edit parameter within the same request.'
            duration:
              type: string
              example: '1'
              description: Number of date period time units which defines the duration of the date period in question. This parameter should be used together with the 'unit' parameter. Also in order to use it the receipt must have the 'receiptDate' set or it should be supplied as another edit parameter within the same request.
            calculatedDate:
              type: string
              example: '2017-01-01'
              description: The calculated date based on the receipt date and the duration of the return.
        returnPeriod:
          type: object
          properties:
            unit:
              type: string
              example: day
              description: 'Date period time unit which can be any of the following: day, week, month, year. This parameter should be used together with the ''duration'' parameter. Also in order to use it the receipt must have the ''receiptDate'' set or it should be supplied as another edit parameter within the same request.'
            duration:
              type: string
              example: '14'
              description: Number of date period time units which defines the duration of the date period in question. This parameter should be used together with the 'unit' parameter. Also in order to use it the receipt must have the 'receiptDate' set or it should be supplied as another edit parameter within the same request.
            calculatedDate:
              type: string
              example: '2016-01-15'
              description: The calculated date based on the receipt date and the duration of the return.
        accountTransactionData:
          type: object
          description: 'Set to {} to clear accountTransactionData from the receipt. To update an individual field in accountTransactionData, set accountTransationData.id: ''ABC123''. To unset an individual field, set  accountTransationData.id: null.'
          example:
            id: account_id
    ReceiptDisplayDto:
      type: object
      required:
        - general
        - header
        - summary
        - original
        - sections
        - footer
        - menu
        - text
      properties:
        general:
          type: object
          required:
            - hasEnhanced
            - backgroundColor
            - generalTextColor
          properties:
            hasEnhanced:
              type: boolean
              description: True if the client should show an enhanced version of the receipt
              example: true
            isValidationRequired:
              type: boolean
              description: True if the user needs to be prompted for basic information on the receipt
              example: true
            backgroundColor:
              type: string
              pattern: '/^([a-f0-9]{3}){1,2}$/i'
              description: The background color for the entire receipt
              example: FFFFFF
            generalTextColor:
              type: string
              pattern: '/^([a-f0-9]{3}){1,2}$/i'
              description: The color all text should be unless noted other wise
              example: '000000'
        header:
          type: object
          required:
            - topBar
            - backgroundImage
            - tearImage
            - tearColor
            - backgroundTint
          properties:
            topBar:
              type: object
              required:
                - text
                - color
                - textColor
              description: Describes the top navigation bar.
              properties:
                text:
                  type: string
                  description: The text to be displayed in the top navigation bar
                  example: Apple
                color:
                  type: string
                  pattern: '/^([a-f0-9]{3}){1,2}$/i'
                  description: The background color for the top navigation bar
                  example: 0000BB
                textColor:
                  type: string
                  pattern: '/^([a-f0-9]{3}){1,2}$/i'
                  description: The color for the text in the top navigation bar
                  example: '000000'
                image:
                  type: string
                  description: An image to be displayed in the top navigation bar if desired
                  example: 'https://[path to logo/image].png'
            backgroundImage:
              type: string
              description: 'A url to an image that should be loaded in the header, usually is a category or merchant specific image'
              example: 'https://[path to logo/image].png'
            tearImage:
              type: string
              description: An image that should be at the bottom of the header for the full width of the receipt
              example: 'https://[path to tear image].png'
            tearColor:
              type: string
              pattern: '/^([a-f0-9]{3}){1,2}$/i'
              description: A color filter that should be applied to tearImage
              example: FFDDFF
            backgroundTint:
              type: string
              pattern: '/^([a-f0-9]{3}){1,2}$/i'
              description: A color filter that should be applied to backgroundImage
              example: DDDDDD
            receiptCategory:
              type: object
              description: A user representation of the receipts category
              properties:
                icon:
                  type: string
                  description: A small icon for the category
                  example: 'https://[path to category icon].png'
                text:
                  type: string
                  description: A localized category name
                  example: Apparel
            merchantInfo:
              type: object
              description: Information on the merchant that issued the receipt
              required:
                - details
                - text
              properties:
                details:
                  type: array
                  description: Each individual item on the merchant like the phone and address details
                  items:
                    type: object
                    required:
                      - text
                      - type
                      - value
                    properties:
                      text:
                        type: string
                        description: A string to be displayed to the user for the current merchant info detail
                        example: Contact
                      type:
                        type: string
                        enum:
                          - phone
                          - url
                        description: The type of information for the current detail; which can be either 'phone' or 'url'
                        example: Phone
                      value:
                        type: string
                        description: The value for the current detail of the merchant; i.e. the actual phone number or url for the merchant
                        example: 555-857-9854
                text:
                  type: string
                  description: The text to display to user to make aware that there is merchant info
                  example: Merchant info
                icon:
                  type: string
                  description: An icon to be displayed beside merchant info
                  example: 'https://[path to merchant info icon].png'
            expenseType:
              type: object
              description: Used to display an icon if the expense type is business
              required:
                - text
                - icon
                - color
              properties:
                text:
                  type: string
                  description: The alt-text used for the icon
                  example: Business
                icon:
                  type: string
                  description: The icon to be used for business expenses
                  example: 'https://[path to business expense icon].png'
                color:
                  type: string
                  pattern: '/^([a-f0-9]{3}){1,2}$/i'
                  description: The color of the triangle around the icon
                  example: 2200DD
        summary:
          type: object
          required:
            - hasEnhanced
            - backgroundImage
            - dividingDotColor
          properties:
            hasEnhanced:
              type: boolean
              description: A boolean value for if there is an enhanced receipt
              example: true
            backgroundImage:
              type: string
              description: An image to be displayed in the background of the summary
              example: 'https://[path to background image].png'
            tenderIcons:
              type: array
              description: the tenders used in the transaction
              items:
                type: object
                description: The individual tender(s) used in the transaction
                required:
                  - url
                  - name
                properties:
                  url:
                    type: string
                    description: The url of the icon to be used for the tender type
                    example: 'https://[path to tender type icon].png'
                  name:
                    type: string
                    description: The name of the tender type; also used at the alt-text
                    example: VISA
            dateLine1:
              type: string
              description: The day of the week for the receipt
              example: FRIDAY
            dateLine2:
              type: string
              description: 'The full date for the receipt posted as ''month day, year'''
              example: 'SEPTEMBER 14, 2015'
            time:
              type: string
              description: The time for when the receipt was generated
              example: '11:32 AM'
            clockHandImage:
              type: string
              description: The url for the icon to be displayed beside the time value
              example: 'https://[path to clock icon].png'
            clockColor:
              type: string
              pattern: '/^([a-f0-9]{3}){1,2}$/i'
              description: The color to be used with the clock hand image
              example: '063044'
            dividingDotColor:
              type: string
              pattern: '/^([a-f0-9]{3}){1,2}$/i'
              description: The color for the dividing dots to be
              example: '063044'
            message:
              type: string
              description: The text to be displayed in the summary message
              example: 'Alex, you spent'
            amount:
              type: string
              description: The total amount from the receipt to be displayed with the summary message
              example: $100.57
            amountColor:
              type: string
              pattern: '/^([a-f0-9]{3}){1,2}$/i'
              description: The color of the text for the amount value
              example: '000000'
            dividerColor:
              type: string
              pattern: '/^([a-f0-9]{3}){1,2}$/i'
              description: The color of the divider
              example: FCFCFC
        original:
          type: object
          required:
            - type
          properties:
            url:
              type: string
              description: An url to the original receipt
              example: 'https://[path to original receipt]'
            text:
              type: string
              description: The text to be used with the original receipt
              example: Original receipt
            type:
              type: string
              enum:
                - image
                - html
                - pdf
                - text
              description: 'The type of receipt which can be ''image, html, pdf, text'' '
              example: html
        order:
          type: object
          description: Information on the order from the receipt
          properties:
            status:
              type: string
              description: The status of the order
              example: Placed
            number:
              type: object
              description: The lines in the order
              required:
                - number
                - color
              properties:
                number:
                  type: string
                  description: The number for the order
                  example: '119844652'
                url:
                  type: string
                  description: The url to the order if desired
                  example: 'https://[path to website order confirmation]'
                color:
                  type: string
                  pattern: '/^([a-f0-9]{3}){1,2}$/i'
                  description: The color for the text of the order number
                  example: EFEFEF
            billToAddress:
              type: array
              description: The addresses to bill to
              items:
                type: string
                description: The individual address from the list to bill to
                example: 'John Doe, 187 Yonge St, Toronto, ON M3R1E6'
            delivery:
              type: object
              description: Information of the delivery
              required:
                - iconBackgroundColor
                - iconImage
                - methodMessage
              properties:
                iconBackgroundColor:
                  type: string
                  pattern: '/^([a-f0-9]{3}){1,2}$/i'
                  description: The color to use for the background icon
                  example: FDFDFD
                iconImage:
                  type: string
                  description: The url to the icon for delivery
                  example: 'https://[path to delivery icon]'
                methodMessage:
                  type: string
                  description: The method for delivery
                  example: Ground - Express
                shipToName:
                  type: string
                  description: The name of who the order is shipping to
                  example: John Doe
                shipToAddress:
                  type: array
                  description: The addresses to ship to
                  items:
                    type: string
                    description: The individual address to ship to in array
                    example: '187 Yonge St, Toronto, ON M3R1E6'
                trackingNumber:
                  type: string
                  description: The number used for tracking the order
                  example: '1485785256'
        sections:
          type: array
          description: A section of data to show. Each sections contains a header and 0 or more rows
          items:
            type: object
            required:
              - type
              - header
            properties:
              type:
                type: string
                enum:
                  - item
                  - other
                description: 'Different sections may have unique types, this should only be used for styling and dose not affect what data is provided'
              color:
                type: string
                pattern: '/^([a-f0-9]{3}){1,2}$/i'
                description: The background color for the section
                example: FFDDFF
              dividersColor:
                type: string
                pattern: '/^([a-f0-9]{3}){1,2}$/i'
                description: The color of the dividers used in each section
                example: FDFDFD
              header:
                type: object
                description: Headers are displayed in each section
                required:
                  - text
                  - textStyle
                  - backgroundColor
                properties:
                  highlightText:
                    type: string
                    description: The text selected to displayed to a different color
                    example: Fees
                  text:
                    type: string
                    description: The text to display in the header for that section
                    example: TOTALS
                  textStyle:
                    type: string
                    description: The style of the text in the header
                  highlightExtraText:
                    type: string
                    description: The extra text to be displayed a different color
                    example: '.98'
                  extraText:
                    type: string
                    description: Extra text in section this is used for things like totals placed off to the right
                    example: '100.98'
                  backgroundColor:
                    type: string
                    pattern: '/^([a-f0-9]{3}){1,2}$/i'
                    description: The color of the background for the section header
                    example: '555555'
                  color:
                    type: string
                    pattern: '/^([a-f0-9]{3}){1,2}$/i'
                    description: The color of the text in the header
                    example: '222222'
                  icon:
                    type: string
                    description: 'The url to an icon to be displayed in the header '
                    example: 'https://[path to totals icon].png'
                  iconStyle:
                    type: string
                    description: The style of the icon used in the header
              rows:
                type: array
                items:
                  type: object
                  description: The data for each section is displayed as rows below the header
                  required:
                    - text
                    - backgroundColor
                  properties:
                    textStyle:
                      type: string
                      description: The text style for the text in the rows
                    text:
                      $ref: '#/components/schemas/AnyType'
                      description: The text/name of the the variable to appear in the row
                      example: Subtotal
                    value:
                      $ref: '#/components/schemas/AnyType'
                      description: The actual value of the variable that is in the row
                      example: '109.98'
                    type:
                      type: string
                      enum:
                        - donation
                      description: 'The type of the variable, can use to identify as a donation'
                      example: donation
                    backgroundColor:
                      type: string
                      pattern: '/^([a-f0-9]{3}){1,2}$/i'
                      description: The color to appear in the background of the rows for that section
                      example: FEFEFE
                    numericValue:
                      type: number
                      description: The final numeric value for the row
                      example: '109.98'
                    subtext:
                      type: string
                      description: The subtext to be displayed below the items in the rows
                      example: 600M Power Supply
                    strikethroughValues:
                      type: array
                      description: The parts of the text that will be have strikethrough applied
                      example: Shoe Polish
                      items:
                        type: object
                        properties: {}
                    icon:
                      type: string
                      description: The icon to be displayed beside the information in that row
                      example: 'https://[path to to icon for that row]'
                    iconStyle:
                      type: string
                      description: The styling for the icon
                    link:
                      type: string
                      description: The link to the item withing the row
                      example: 'https://[path to to webpage for item]'
                    subrows:
                      type: array
                      description: The rows have subrows of information
                      items:
                        type: object
                        required:
                          - textStyle
                          - backgroundColor
                        properties:
                          textStyle:
                            type: string
                            description: The style of text for the text in the subrows
                          backgroundColor:
                            type: string
                            pattern: '/^([a-f0-9]{3}){1,2}$/i'
                            description: The background color for the subrows
                            example: FCFCFC
                          text:
                            $ref: '#/components/schemas/AnyType'
                            description: The text value of the item in the subrow (i.e. the left hand side)
                            example: SKU
                          value:
                            $ref: '#/components/schemas/AnyType'
                            description: The value of the item in the subrow(i.e. the right hand side)
                            example: '4705444400254'
                          numericValue:
                            type: number
                            description: The numeric value for the item in the subrow
        footer:
          type: object
          required:
            - sensibillImage
          properties:
            sensibillImage:
              type: string
              description: The url to the sensibill logo icon
              example: 'https://[path to to sensibill icon]'
            taglineImage:
              type: string
              description: The url to the tagline icon
              example: 'https://[path to to tagline icon]'
        menu:
          type: object
          required:
            - image
          properties:
            image:
              type: string
              description: The icon to be used in the menu (use company logs for some brands)
              example: 'https://[path to to brand icon]'
            buttonDark:
              type: boolean
              description: If the button needs to be darker based on the color of navbar
              example: 'true'
        text:
          type: string
        achievements:
          type: array
          description: If the receipt has a achievements system this info is here
          items:
            type: object
            required:
              - icon
              - rows
              - backgroundColor
              - text
            properties:
              icon:
                type: string
                description: The icon for the achievements system
                example: 'https://[path to to brand achievements logo]'
              backgroundColor:
                type: string
                pattern: '/^([a-f0-9]{3}){1,2}$/i'
                description: The background color for the achievements section
                example: '003344'
              text:
                type: string
                description: The text to be displayed in the achievements section
                example: Shoppers Optimum
              rows:
                type: array
                description: The achievements system can have multiple bits of data which are placed in individual rows
                items:
                  type: object
                  required:
                    - backgroundColor
                    - value
                  properties:
                    backgroundColor:
                      type: string
                      pattern: '/^([a-f0-9]{3}){1,2}$/i'
                      description: The background color for the row
                      example: '445566'
                    text:
                      type: string
                      description: The text for each row (i.e. the left hand side)
                      example: Shoppers optimum points
                    value:
                      type: string
                      description: The value part of each row (i.e. the right hand side)
                      example: 200 pts
        duplicates:
          type: array
          description: The duplicate receipts
          items:
            type: object
            additionalProperties: {}
        barcodes:
          type: array
          description: List of barcode data
          items:
            type: object
            additionalProperties: {}
            properties:
              text:
                type: string
                description: The barcode value in text format
                example: '70110544015010320159662'
              barcodeType:
                type: string
                description: The barcode type
                example: BT_Code128
        barcodesDisplay:
          type: object
          additionalProperties: {}
          required:
            - header
            - rows
          properties:
            header:
              type: object
              required:
                - text
                - icon
                - textStyle
                - headerIconStyle
                - backgroundColor
                - chevronIcon
                - chevronIconStyle
              description: Describes the header for the barcode section.
              properties:
                text:
                  type: string
                  description: The text to be displayed in the header
                  example: Barcodes
                icon:
                  type: string
                  description: The url to a barcode icon to be displayed in the header
                  example: 'http://[path to barcode icon].png'
                textStyle:
                  type: string
                  description: The style of the text in the barcode header.
                  example: barcodeHeaderTextStyle
                headerIconStyle:
                  type: string
                  description: The style of the icon used in the header
                  example: barcodeHeaderIconStyle
                backgroundColor:
                  type: string
                  pattern: '/^([a-f0-9]{3}){1,2}$/i'
                  description: The color of the background for the barcode header
                  example: F8F8F8
                chevronIcon:
                  type: string
                  description: The url to a chevron icon to be displayed in the header
                  example: 'http://[path to chevron icon].png'
                chevronIconStyle:
                  type: string
                  description: The style of the chevron icon used in the header
                  example: barcodeChevronIconStyle
            rows:
              type: array
              description: The data for each barcode is displayed as rows below the barcode header
              items:
                type: object
                required:
                  - value
                  - type
                  - backgroundColor
                  - textStyle
                  - expandIconLight
                  - expandIconDark
                  - expandIconStyle
                properties:
                  backgroundColor:
                    type: string
                    pattern: '/^([a-f0-9]{3}){1,2}$/i'
                    description: The background color for the row
                    example: FFFFFF
                  type:
                    type: string
                    description: The barcode type
                    example: BT_Code128
                  value:
                    type: string
                    description: The text representation of the barcode
                    example: '100540496717221'
                  textStyle:
                    type: string
                    description: The style of the text in the barcode rows.
                    example: barcodeRowTextStyle
                  expandIconLight:
                    type: string
                    description: The url to a dark expand icon to be displayed in the last row
                    example: 'http://[path to dark expand icon].png'
                  expandIconDark:
                    type: string
                    description: The url to a light expand icon to be displayed in the last row
                    example: 'http://[path to light expand icon].png'
                  expandIconStyle:
                    type: string
                    description: The styling for the icon.
                    example: barcodeExpandIconStyle
        reminders:
          type: object
          additionalProperties: {}
          required:
            - highlightTextStyle
            - textStyle
            - remindersList
          properties:
            highlightTextStyle:
              type: string
              description: The style of the text for the highlighted expiry information
              example: reminderHighlightTextStyle
            textStyle:
              type: string
              description: The style of the text for regular expiry text information
              example: reminderTextStyle
            remindersList:
              type: array
              description: An array of objects representing the data for each type of expiry
              items:
                type: object
                required:
                  - type
                  - highlightText
                  - highlightTextTextColor
                  - percentage
                  - progressBarColor
                  - progressBarBackgroundColor
                  - text
                  - textColor
                  - reminderId
                  - remindLaterActionButton
                  - reminderIconURL
                properties:
                  type:
                    type: string
                    description: The type of expiry date being described.
                    example: return
                  highlightText:
                    type: string
                    description: Text that will be highlighted that represents the time left before expiration
                    example: '23'
                  highlightTextTextColor:
                    type: string
                    pattern: '/^([a-f0-9]{3}){1,2}$/i'
                    description: The color of the highlighted text
                    example: F8F8F8
                  percentage:
                    type: number
                    description: A number that presents the percentage of time that has passed from the purchase date to today's date.
                    example: '50'
                  progressBarColor:
                    type: string
                    pattern: '/^([a-f0-9]{3}){1,2}$/i'
                    description: The color of the filled portion of the progress bar
                    example: F8F8F8
                  progressBarBackgroundColor:
                    type: string
                    pattern: '/^([a-f0-9]{3}){1,2}$/i'
                    description: The color of the unfilled portion of the progress bar
                    example: CFCFCF
                  text:
                    type: string
                    description: The text message explaining how much time is left before expiry
                    example: Days left until warranty expires
                  textColor:
                    type: string
                    pattern: '/^([a-f0-9]{3}){1,2}$/i'
                    description: The color of the text explaining how much time is left before expiry
                    example: CFCFCF
                  reminderId:
                    type: string
                    description: The unique identifier to the reminder associated to this expiry. This is only present if the expiry type has a reminder.
                    example: OyYm1R7LQ8mNt4g_7cRs
                  remindLaterActionButton:
                    type: object
                    required:
                      - text
                      - textColor
                      - textStyle
                      - backgroundColor
                    properties:
                      text:
                        type: string
                        description: A message to the user explaining the action of the button
                        example: Remind Me Later
                      textColor:
                        type: string
                        pattern: '/^([a-f0-9]{3}){1,2}$/i'
                        description: The text color of the message display to the user
                        example: FFFFFF
                      textStyle:
                        type: string
                        description: The text style of the message displayed to the user
                        example: remindLaterActionButtonTextStyle
                      backgroundColor:
                        type: string
                        pattern: '/^([a-f0-9]{3}){1,2}$/i'
                        description: The color of the button
                        example: F8F8F8
                  reminderIconURL:
                    type: string
                    description: The URL to the reminder bell asset
                    example: 'http://localhost:5000/img/icons/icon-reminder.png'
        receiptDate:
          type: string
          format: date
          example: '2016-01-01T16:16'
          description: The Date on the Receipt
        amount:
          type: number
          example: 41.6
          description: The grand total on the receipt
        currencyCode:
          type: string
          example: CAD
          description: The currency code for the grand total
        merchantName:
          type: string
          example: Wal-Mart
          description: The merchant that issued the receipt
        expenseType:
          type: string
          example: personal
          description: Must be one of 'business' or 'personal'
        favorite:
          type: boolean
          example: 'true'
          description: Is this receipt favorited by the user
        receiptCategory:
          type: string
          example: utilities
          description: The category of the receipt. Use the /lookups/receiptcategories endpoint for a list of valid categories.
        folders:
          type: array
          items:
            type: string
          description: What folder this receipt belongs to
        note:
          type: string
          example: 'Notey McNote Face #hashtag in my notes'
          description: 'A free form text field the user can edit with #hashtags'
        taxAmount:
          type: number
          example: 0.48
          description: The amount to show as the sum of all taxes on the receipt
        taxes:
          type: array
          items:
            type: object
            properties:
              amount:
                type: integer
                example: 5.54
              ruleID:
                type: string
                example: Sales Tax
              percent:
                type: integer
                example: 12
          description: 'All taxes applied to the total on the Receipt. A tax object consists of:<br>&emsp;ruleID [string] (eg. ''HST'', ''VAT'', ''Sales Tax'')<br>&emsp;amount [number]<br>&emsp;percent [number]<br>All properties are optional'
        subTotalAmount:
          type: number
          example: 3.68
          description: The amount to show as the subtotal on the receipt
        tipAmount:
          type: number
          example: 1
          description: The amount to show as the tip (gratuity) on the receipt
        netTotalAmount:
          type: number
          example: 1
          description: The amount to show as the Net Total on the receipt (UK)
        recentlyAdded:
          type: boolean
          example: false
          description: 'Mark the receipt as not recently added, a value of true will be ignored.'
        editTime:
          type: string
          format: date-time
          example: '2016-12-01T19:24:33+00:00'
          description: 'Last time the user changed the receipt, if set an edit will be rejected if the receipt has been edited after the given time. Eg. time stamp (ISO8601).'
        flagType:
          type: string
          example: flag-receipt-notareceipt
          description: 'The type of error the user is reporting, one of : ''''flag-receipt-incorrect'''', ''''flag-receipt-broken'''', ''''flag-receipt-notareceipt'''', ''''flag-receipt-general'''''
        flagInfo:
          type: string
          example: 'This a picture of a :banana: not a receipt'
          description: The text of the issue the user is reporting.
        warrantyPeriod:
          type: object
          properties:
            unit:
              type: string
              example: year
              description: 'Date period time unit which can be any of the following: day, week, month, year. This parameter should be used together with the ''duration'' parameter. Also in order to use it the receipt must have the ''receiptDate'' set or it should be supplied as another edit parameter within the same request.'
            duration:
              type: string
              example: '1'
              description: Number of date period time units which defines the duration of the date period in question. This parameter should be used together with the 'unit' parameter. Also in order to use it the receipt must have the 'receiptDate' set or it should be supplied as another edit parameter within the same request.
            calculatedDate:
              type: string
              example: '2017-01-01'
              description: The calculated date based on the receipt date and the duration of the return.
        returnPeriod:
          type: object
          properties:
            unit:
              type: string
              example: day
              description: 'Date period time unit which can be any of the following: day, week, month, year. This parameter should be used together with the ''duration'' parameter. Also in order to use it the receipt must have the ''receiptDate'' set or it should be supplied as another edit parameter within the same request.'
            duration:
              type: string
              example: '14'
              description: Number of date period time units which defines the duration of the date period in question. This parameter should be used together with the 'unit' parameter. Also in order to use it the receipt must have the 'receiptDate' set or it should be supplied as another edit parameter within the same request.
            calculatedDate:
              type: string
              example: '2016-01-15'
              description: The calculated date based on the receipt date and the duration of the return.
        accountTransactionData:
          type: object
          description: 'Set to {} to clear accountTransactionData from the receipt. To update an individual field in accountTransactionData, set accountTransationData.id: ''ABC123''. To unset an individual field, set  accountTransationData.id: null.'
          example:
            id: account_id
    GetReceiptDisplayResponseDto:
      type: object
      properties:
        edit:
          $ref: '#/components/schemas/ReceiptEditDto'
        display:
          $ref: '#/components/schemas/ReceiptDisplayDto'
        privateMetaData:
          $ref: '#/components/schemas/PrivateMetaDataDto'
    ReceiptDisplayListReceiptDto:
      type: object
      properties:
        classification:
          $ref: '#/components/schemas/ReceiptTypesEnum'
        duplicateStatus:
          $ref: '#/components/schemas/DuplicateStatusEnum'
        lifecycleStatus:
          $ref: '#/components/schemas/LifecycleStatusesEnum'
        validationStatus:
          $ref: '#/components/schemas/ValidationStatusEnum'
        receiptNumber:
          type: integer
          example: '123498712497082413'
          description: 'The receipt number for this receipt, as provided by the original receipt provider.'
        receiptDate:
          type: string
          format: date
          example: '2019-06-23T13:09:37.000Z'
          description: 'The date and time on the receipt, the timezone on this value should be disregarded and the value treated as though it is in the local time of the user. See RFC 3339 Section 5.6 for format.'
        listingSortDate:
          type: string
          format: date
          example: '2019-06-23T13:09:37.000Z'
          description: 'The date and time used for sorting receipt list. This will be the receipt''s date and time, when available, or the date and time when the receipt was submitted for processing. The timezone on this value should be disregarded and the value treated as though it is in the local time of the user. See RFC 3339 Section 5.6 for format.'
        sharedMetaData:
          $ref: '#/components/schemas/SharedMetaDataDto'
        arrivalTime:
          type: string
          format: date
          example: '2020-11-20T17:31:44.402Z'
          description: The date the receipt was posted to Sensibill.
        total:
          $ref: '#/components/schemas/ReceiptTotalDto'
        merchantID:
          type: string
          example: '98702143098734'
          description: The Sensibill specific identifier for the merchant.
        merchant:
          $ref: '#/components/schemas/ReceiptMerchantDto'
        userSubmittedData:
          $ref: '#/components/schemas/UserSubmittedDataResponseDto'
        id:
          type: string
          example: DxlOrzwTdc7e0GOsFixq
          description: This is a unique identifier which is used to identify this receipt on Sensibill's system.
        renderURL:
          type: string
          example: 'https://receipts-sandbox.sensibill.io/#/receipt/DxlOrzwTdc7e0GOsFixq'
          description: |-
            A URL from which the client can get an HTML rendered version of this receipt.
            The URL must be appended with the query string including client_key and client secret as in:<br>  https://receipts-sandbox.sensibill.io//#/receipt/<br>41987132492431987?client_key=a-key&client_secret=a-secret
        recentlyAdded:
          default: ''
          type: boolean
          description: The method indicates if the receipt was recentlyAdded. It can be used to provide a front-end feature showing the most recent receipts. Valid values are 'true' and 'false
        relatedPaymentReceipt:
          type: object
          example: ''
          description: 'This provides a reference to a related payment receipt. If a user happens to scan both a line-item receipt and a payment receipt, such as when they go to a resturaunt, this will provide the details about that payment receipt. It contains all of the same fields as any receipt in the receipt listing.'
        accountTransactionData:
          $ref: '#/components/schemas/AccountTransactionDataDto'
        privateMetaData:
          $ref: '#/components/schemas/PrivateMetaDataDto'
    ReceiptTotalDto:
      type: object
      properties:
        grand:
          type: number
          example: 12.43
          description: The grand total amount of the receipt.
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
    ReceiptMerchantDto:
      type: object
      properties:
        name:
          type: string
          example: Future Shop
          description: The full human-friendly name of the merchant
        category:
          type: string
          example: shopping
          description: The category of the merchant. Use the endpoint /lookups/receiptcategories for a list of valid categories.
        status:
          $ref: '#/components/schemas/MerchantStatusEnum'
        merchantID:
          type: string
          example: '98702143098734'
          description: The Sensibill specific identifier for the merchant.
        branding:
          type: object
          properties:
            primaryColor:
              type: string
              example: e41b23
              description: A 6 character HEX Code representing the primary color of the brand.
            secondaryColor:
              type: string
              example: c2c2c2
              description: A 6 character HEX Code representing the secondary color of the brand.
            brandImageURLs:
              type: object
              properties:
                logoIcon:
                  type: string
                  example: /img/brands/homedepot/brand-homedepot-logo-menu.png
                  description: The URL to a small logo for the retailer that can be placed on a white background
                logoIconBW:
                  type: string
                  example: /img/brands/homedepot/brand-homedepot-icon-bw.png
                  description: The URL to a black and white version of a small logo for the retailer that can be placed on a white background
                logoHeader:
                  type: string
                  example: /img/brands/homedepot/brand-homedepot-logo-menu.png
                  description: The URL to a logo for the retailer that can be placed on a color background
    AccountTransactionDataDto:
      description: The account transaction data associated with the receipt.
      type: object
      properties:
        id:
          type: string
          example: ABC123
          description: ID of account transaction.
        transactionDate:
          type: string
          format: date
          example: '2017-09-08T12:00:00.000Z'
          description: Date of account transaction.
        postedDate:
          type: string
          format: date
          example: '2017-09-08T12:00:00.000Z'
          description: Posted date of account transaction.
        merchantName:
          type: string
          example: target
          description: Merchant name of account transaction.
        summary:
          type: string
          example: 'target store #1101'
          description: Summary of account transaction.
        amount:
          type: number
          example: 88.9
          description: Amount of account transaction.
        maskedAccountNumber:
          type: string
          example: xxxxx0899
          description: Masked account number of account transaction.
        currencyCode:
          type: string
          example: CAD
          description: Currency code of account transaction.
    SharedMetaDataDto:
      type: object
      properties:
        receiptCategory:
          type: string
          example: shopping
          description: The category of the receipt. Use the /lookups/receiptcategories endpoint for a list of valid categories.
        note:
          type: string
          default: ''
        expenseType:
          type: string
          enum:
            - personal
            - business
        tags:
          type: array
          items:
            type: string
        folders:
          type: array
          items:
            type: string
        favorite:
          type: boolean
    ErrorResponse:
      type: object
      required:
        - name
        - correlationID
      properties:
        name:
          type: string
          description: The type of error raised (See error types below).
          example: AuthorizationError
          enum:
            - AccessError
            - AuthorizationError
            - BadRequestError
            - FileStorageBackendError
            - DatabaseError
            - GenericInternalError
            - InvalidCredentialError
            - InvalidParameterError
            - InvalidParametersError
            - MissingCredentialsError
            - MissingParameterError
            - MissingRequestBodyError
            - ObjectNotFoundError
            - ParameterNotAllowedError
            - ValidationFailedError
        correlationID:
          type: string
          description: A unique identifier value that is attached to responses that allow us to reference a particular transaction or event chain.
          example: 4692-1557955193.458-10.3.123.11-468
        message:
          type: string
          description: Specific human-readable information pertaining to why this error was raised.
          example: 'Your client is not authorized to log in users of the credential type: BAD_DATA You are only authorized to log in users from these credential types: YOUR_CREDENTIAL_TYPE'
        extras:
          type: object
          description: Additional information
          properties:
            code:
              type: string
              description: 'A short string reporting the specific error raised. (For example, AuthorizationError has multiple causes).'
              example: cannot_authenticate
    GetReceiptFilterSearchParam:
      type: string
      enum:
        - attentionRequired
        - tenderCategoryCash
        - tenderCategoryCredit
        - tenderCategoryDebit
        - tenderCategoryGiftCard
        - validationRequired
        - recentlyAdded
    ReceiptSource:
      type: string
      enum:
        - image
        - arts_xml
        - html_email
        - pdf_email
        - text_email
        - image_email
        - raw_text
        - pdf
    GetRemindersResponseDto:
      type: object
      properties:
        reminders:
          type: array
          description: An array of reminder objects.
          items:
            $ref: '#/components/schemas/ReminderDto'
    ReminderDto:
      type: object
      properties:
        id:
          type: string
          example: tPnyBAbxdH-6C
          description: A unique identifier of the reminder within Sensibill's system.
        receiptID:
          type: string
          example: rnfVsGGRETf6bV
          description: A unique identifier of the receipt the reminder belongs to.
        type:
          type: string
          enum:
            - return
            - warranty
          example: return
          description: 'Represents the type of reminder. A reminder can be of the following types: return, warranty'
        createdAt:
          type: string
          format: date-time
          example: '2015-05-11T18:22:02.664Z'
          description: The timestamp when the reminder was created.
        updatedAt:
          type: string
          format: date-time
          example: '2015-06-11T18:22:02.664Z'
          description: The timestamp when the reminder was last updated.
        reminderDatePeriod:
          type: object
          properties:
            calculatedDate:
              type: string
              example: '2017-01-01'
              description: The scheduled date for the reminder to fire. Calculated using the reminderDatePeriod time unit and duration and the associated return/warranty expiry date.
            unit:
              type: string
              example: month
              description: 'Time unit which can be any of the following: day, week, month, year'
            duration:
              type: number
              example: 2
              description: 'Number of time units which defines the duration of the reminder date period in question: day, week, month, year'
        note:
          type: string
          example: This is a note.
          description: A message associated to the reminder.
        display:
          type: object
          properties:
            reminderDate:
              type: object
              properties:
                text:
                  type: string
                  example: 'As of Oct 22, 2014'
                  description: Text describing when the reminder will be scheduled.
                textStyle:
                  type: string
                  example: reminderDate
                  description: The text style for the associated text.
            reminderMessage:
              type: object
              properties:
                text:
                  type: string
                  example: Your Warranty Expires in 11 Months
                  description: Text describing when the return/warranty will expire.
                textStyle:
                  type: string
                  example: reminderMessage
                  description: The text style for the associated text.
            reminderReceiptData:
              type: object
              properties:
                text:
                  type: string
                  example: $25.00 at Starbucks
                  description: Text describing the receipt data for the associated reminder.
                textStyle:
                  type: string
                  example: reminderReceiptData
                  description: The text style for the associated text.
            localNotification:
              type: object
              properties:
                text:
                  type: string
                  example: Your Warranty on a purchase from Home Depot expires in 11 months.
                  description: Text containing information on when the return/warranty expires as well as receipt related info (e.g. merchant and total). Used for local device notifications.
                textStyle:
                  type: string
                  example: localNotification
                  description: The text style for the associated text.
    ReminderCreateDto:
      type: object
      required:
        - receiptID
        - type
      properties:
        locale:
          type: string
          description: 'Provides the locale for the user. Must be a supported value from the list of locale-codes, which can be obtained by going to /lookups/locales'
          example: en-CA
        receiptID:
          type: string
          description: A unique identifier of the receipt the reminder belongs to.
        type:
          type: string
          enum:
            - return
            - warranty
          example: return
          description: 'Represents the type of reminder. A reminder can be of the following types: return, warranty'
        reminderDatePeriod:
          type: object
          required:
            - unit
            - duration
          properties:
            unit:
              type: string
              example: month
              description: 'Time unit which can be any of the following: day, week, month, year'
            duration:
              type: number
              example: 1
              description: Number of time units which defines the duration of the reminder date period in question.
        note:
          default: ''
          type: string
          description: A message associated to the reminder.
    ReminderUpdateDto:
      type: object
      properties:
        locale:
          type: string
          description: 'Provides the locale for the user. Must be a supported value from the list of locale-codes, which can be obtained by going to /lookups/locales'
          example: en-CA
        reminderDatePeriod:
          type: object
          properties:
            unit:
              type: string
              example: month
              description: 'Time unit which can be any of the following: day, week, month, year'
            duration:
              type: number
              example: 1
              description: Number of time units which defines the duration of the reminder date period in question.
        note:
          default: ''
          type: string
          description: A message associated to the reminder.
    ExportCreateDto:
      type: object
      required:
        - outputFormats
        - criteria
      properties:
        outputFormats:
          type: array
          items:
            type: string
            description: 'Indicates which formats should be generated. Valid values are: <br/>''csv'' - indicates a comma separated file should be produced summarizing the exported data <br/>''xls'' - indicates an excel spreadsheet should be produced summarizing the exported data <br/>''pdf'' - indicates individual receipts should be exported to a PDF file'
            example: csv
        criteria:
          $ref: '#/components/schemas/CriteriaDto'
        emailOverride:
          default: ''
          type: string
          description: 'Allows the caller to specify an email where exports should be sent. If you don''t pass this parameter, the email is sent to the user''s email address.'
        locale:
          type: string
          description: 'Allows you to specify the locale in which the response should be returned. It must be a supported value from the list of locale-codes, which can be obtained by going to /lookups/locales. It defaults to the user''s locale.'
          example: en-CA
    CriteriaDto:
      type: object
      properties:
        sharedMetaData:
          type: object
          properties:
            tags:
              type: string
              description: 'Will only return receipts that are tagged with one or more of the tags specified. Tags are added by updating sharedMetaData.note and using #hashtags in the text. When searching, do not include the hashtag symbol. Example: travel. To specify an array, use a comma delimited list as in: <code>criteria.sharedMetaData.tags=electronics,books</code>'
            expenseType:
              type: string
              description: Will only return receipts that have been categorized under the given expense type. Expense type can be either 'business' or 'personal'
              example: business
            excludeFolder:
              type: string
              description: Will only return receipts that are not in the given folder ID. The folder IDs should match those set on the user that the receipt belongs to.
            folders:
              type: string
              description: Will only return receipts that are in one or more of the folder IDs specified. The folder IDs should match those set on the user that the receipt belongs to. This can be a comma separated list if you need receipts from multiple different folders.
            receiptCategories:
              type: string
              description: 'Will return receipts that are categorized with one or more of the receipt categories specified. To specify an array, use a comma delimited list as in: <code>criteria.sharedMetaData.receiptCategories=kids,education</code> Use the /lookups/receiptcategories endpoint for a list of valid categories.'
              example: education
            favorite:
              type: boolean
              description: 'If true, will only return receipts that are favorited. If false, will only return receipts that aren''t favorited.'
        receiptIDs:
          type: string
          description: 'Indicates which receipts should be exported. This is meant to be used in conjunction with a multi-select functionality on a receipt listing view where the user is specifically identifying which receipts to export. <br/><br/>To specify an array, use a comma delimited list as in: <br/><code>criteria.receiptIDs=ID1,ID2,ID3</code>'
          example: DxlOrzwTdc7e0GOsFixq
        fulltext:
          type: string
          description: 'Will perform a full text search on the following properties of a receipt: receipt number, merchant name, total amount, product name and description, SKUs, serial numbers, 4 digit masked card number, type of tender (visa, mastercard, debit, cash). When performing a full text search the results are sorted by their relevancy to the search criteria.'
        privateMetaData:
          type: object
          description: Will perform a search on the specified property of the private meta data that the client has added to the receipt. Pass an array to search for receipts that have a property in the list of values that you provide.
        dateTo:
          type: string
          description: Will only return receipts where the receipt date is just before midnight on the specified date. The date should be formatted YYYY-MM-DD and does not include a time component.
          example: '2020-08-30'
        dateFrom:
          type: string
          description: 'Will only return receipts where the receipt date is from midnight onwards on the specified date. The date should be formatted YYYY-MM-DD and does not include a time component. For convenience specifying last30, last90 or lastyear will retrieve the last 30 days, last 90 day or last year respectively from the dateTo parameter (defined above).'
          example: '2020-08-01'
        updatedAfter:
          type: string
          description: Will only return receipts where the receipt updatedAt date is after the specified date. The value may or may not include time and should adhere to the ISO-8601 specification.
          example: '2020-08-30T01:23:47Z'
        currencyCode:
          type: string
          description: String or array of currency codes. Will return receipts where the grand total matches the given currency code or one of the codes given.
          example: CAD
        tenderType:
          type: string
          description: 'Will return receipts that have a particular payment method. Note that there is some overlap, e.g. codes such as CreditDebit and Visa can match the same receipt. Invalid values will be ignored completely. The complete list of valid tender codes is: Cash, GiftCard, GiftCertificate, Coupon, CreditDebit, Check, TravelersCheck, AccountsReceivable, CapitalBond, CheckCard, EBTCash, EBTFoodstamps, ElectronicTollCollection, CoPay, CustomerAccount, FoodStamps, HouseAccount, InternationalMaestro, Loyalty, ManufacturerCoupon, Mobile, PurchaseOrder, StaffDressAllowance, StoredValue, UKMaestro, Voucher, WICCheck, Paypal, DinersClub, StoreCard, Fleet, Amex, Debit, Interac, Visa, MasterCard, Credit'
          example: Visa
        lifecycleStatus:
          type: string
          description: 'Will only return receipts where the lifecycle status is one of the following: <br/><br/><code>active</code> - the receipt has at a minimum the merchant name, date and total amount <br/><code>pending_validation</code> - the receipt requires user validation. <br/><code>deleted</code> - the receipt has been deleted by the user. Only returns the receipt ID and lifecycleStatus. <br/><br/>To specify an array, use a comma delimited list as in: <code>criteria.lifecycleStatus=active,pending_validation</code>'
          example: active
        exported:
          type: boolean
          description: 'If true, will only include receipts which have been successfully exported, in any format. If false, will exclude any receipts that have ever been exported.'
        reminders:
          type: string
          description: 'String or array of reminder types. This allows you to filter for receipts which have scheduled reminders of particular type. Should be used together with criteria.reminderDateAfter. Valid reminder types are: return, warranty'
          example: warranty
        reminderDateAfter:
          type: string
          description: Will only return receipts which have reminders with reminderDatePeriod.calculatedDate greater than the date provided. The date should be formatted as 'YYYY-MM-DD'.
          example: '2020-08-01'
        accountTransactionData:
          type: object
          description: Will perform a search on the specified property of accountTransactionData that the client has added to the receipt. Pass an array to search for receipts that have a property in the list of values that you provide.
    ExportCreateResponseDto:
      type: object
      properties:
        destructionTime:
          type: string
          format: date-time
          example: '2021-01-01T21:58:15.880Z'
        createdAt:
          type: string
          format: date-time
          example: '2020-12-18T21:58:15.875Z'
        updatedAt:
          type: string
          format: date-time
          example: '2020-12-18T21:58:18.787Z'
        criteria:
          $ref: '#/components/schemas/CriteriaDto'
          description: The search criteria used to find the receipts to be exported. This will be identical to the fieldsset in the 'POST /export' request for creating the export in question.
        outputFormats:
          type: array
          items:
            type: string
            description: 'Indicates which formats should be generated. Valid values are: <br/>''csv'' - indicates a comma separated file should be produced summarizing the exported data <br/>''xls'' - indicates an excel spreadsheet should be produced summarizing the exported data <br/>''pdf'' - indicates individual receipts should be exported to a PDF file'
            example: csv
        receipts:
          type: array
          example: []
          items:
            type: object
        status:
          type: string
          enum:
            - queued
        id:
          type: string
          example: IncaCskJ1GiopEYJMjaMLdEgFaDirOUdniwV3Aipl91f4cAWt3hq3eAmB8fZd_xQ9qGNWLswQhjuGzTOiRhA
          description: This is a unique identifier which is used to identify the export request on Sensibill's system.
    ExportsStatusDto:
      type: array
      items:
        $ref: '#/components/schemas/ExportStatusDto'
    ExportStatusDto:
      type: object
      properties:
        destructionTime:
          type: string
          format: date-time
          example: '2021-01-01T21:58:15.880Z'
        createdAt:
          type: string
          format: date-time
          example: '2020-12-18T21:58:15.875Z'
        updatedAt:
          type: string
          format: date-time
          example: '2020-12-18T21:58:18.787Z'
        resultSize:
          type: integer
          example: 5
          description: The number of receipts captured in the export.
        completionTime:
          type: string
          format: date-time
          example: '2020-12-18T21:58:18.780Z'
        fileURL:
          type: string
          example: 'https://receipts-sandbox.sensibill.io/api/v1/export/IncaCskJ1GiopEYJMjaMLdEgFaDirOUdniwV3Aipl91f4cAWt3hq3eAmB8fZd_xQ9qGNWLswQhjuGzTOiRhA/contents'
          description: The URL that can be used to download the contents of the export.
        criteria:
          $ref: '#/components/schemas/CriteriaDto'
          description: The search criteria used to find the receipts to be exported. This will be identical to the fieldsset in the 'POST /export' endpoint for creating the export in question.
        outputFormats:
          type: array
          items:
            type: string
            description: 'Indicates which formats should be generated. Valid values are: <br/>''csv'' - indicates a comma separated file should be produced summarizing the exported data <br/>''xls'' - indicates an excel spreadsheet should be produced summarizing the exported data <br/>''pdf'' - indicates individual receipts should be exported to a PDF file'
            example: csv
        receipts:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: xE1IVKvIRiUq5gqN_z04
              versionNumber:
                type: integer
                example: 3
        status:
          type: string
          example: completed
          enum:
            - queued
            - running
            - completed
            - failed
          description: 'The status of the export. Possible values are: ''''queued'''', ''''running'''', ''''completed'''', ''''failed'''''
        id:
          type: string
          example: IncaCskJ1GiopEYJMjaMLdEgFaDirOUdniwV3Aipl91f4cAWt3hq3eAmB8fZd_xQ9qGNWLswQhjuGzTOiRhA
          description: This is a unique identifier which is used to identify the export request on Sensibill's system.
        filesize:
          type: integer
          example: 11042
          description: 'The size of the contents in bytes, when available.'
    LookupReceiptCategoriesResponse:
      type: object
      properties:
        receiptCategories:
          type: array
          items:
            $ref: '#/components/schemas/LookupReceiptCategoriesDto'
    LookupReceiptCategoriesDto:
      type: object
      properties:
        code:
          type: string
          example: shopping
          description: The code representing the receipt category.
        name:
          type: string
          example: General Retail
          description: The name of the receipt category.
        icon:
          type: object
          properties:
            light:
              type: string
              example: 'https://receipts-sandbox.sensibill.io/img/categories/select-category/select-category-general-retail-active@3x.png'
              description: The URL of the icon associated with the receipt category. This will be a light version suitable for use on a dark background.
            dark:
              type: string
              example: 'https://receipts-sandbox.sensibill.io/img/categories/select-category/select-category-general-retail@3x.png'
              description: The URL of the icon associated with the receipt category. This will be a dark version suitable for use on a light background.
        small:
          type: object
          properties:
            light:
              type: string
              example: 'https://receipts-sandbox.sensibill.io/img/categories/icons-small/general-retail@3x.png'
              description: The URL of a smaller icon for the receipt category. This will be a light version suitable for use on a dark background.
            dark:
              type: string
              example: 'https://receipts-sandbox.sensibill.io/img/categories/icons-small/general-retail-dark@3x.png'
              description: The URL of a smaller icon for the receipt category. This will be a dark version suitable for use on a light background.
    LookupCurrenciesResponse:
      type: object
      properties:
        currencies:
          type: array
          items:
            $ref: '#/components/schemas/LookupCurrenciesDto'
    LookupCurrenciesDto:
      type: object
      properties:
        name:
          type: string
          example: United States Dollar
          description: The name of the currency in English.
        code:
          type: string
          example: USD
          description: The internationally recognized three-letter code for the currency.
        symbol:
          type: string
          example: $
          description: The internationally recognized symbol representing the currency.
    LookupLocalesResponse:
      type: object
      properties:
        locales:
          type: array
          items:
            $ref: '#/components/schemas/LookupLocalesDto'
    LookupLocalesDto:
      type: object
      properties:
        name:
          type: string
          example: English - Canada
          description: The name of the locale in English.
        code:
          type: string
          example: en-CA
          description: The short code of the locale.
    EmailsResponse:
      type: object
      required:
        - emails
        - count
      properties:
        emails:
          type: array
          items:
            $ref: '#/components/schemas/EmailDto'
        count:
          type: integer
          example: 1
          description: 'The total number of emails that match the specified query parameters, regardless of limits and pagination.'
    EmailDto:
      type: object
      properties:
        id:
          type: string
          example: 9Y_MP4QlwnwpMYtP287m
          description: A unique identifier to identify this email within Sensibill's system.
        date:
          type: string
          example: 'May 1, 2014'
          description: 'A formatted string for the date of the email. The formatting here depends on the locale for the user, or the locale parameter, if supplied.'
        time:
          type: string
          example: '12:34 PM'
          description: 'A formatted string for the time of the email. The formatting here depends on the locale for the user, or the locale parameter, if supplied.'
        sender:
          type: string
          example: sales@example.com
          description: The email address who originally sent the email.
        senderName:
          type: string
          example: Store Name
          description: The name of the business or person who originally sent the email.
        subject:
          type: string
          example: Your purchase
          description: The subject line from the email.
        classification:
          type: string
          example: item_receipt
          description: 'The type of email this is identified as in the system. May be: item_receipt, marketing, payment_receipt, shipping_confirmation, income, invoice, cancellation, spam, other'
        status:
          type: string
          example: active
          description: 'The status of email. May be: active, deleted'
        renderURL:
          type: string
          description: A URL from which the client can get an HTML rendered version of this email.
          example: 'https://receipts-sandbox.sensibill.io/api/v1/email/9Y_MP4QlwnwpMYtP287m/view'
    EmailUpdateRequestDto:
      type: object
      properties:
        classification:
          type: string
          enum:
            - receipt
            - other
          description: 'The category the email will be reclassified to. Accepted values are: receipt, other'
        favorite:
          type: boolean
          description: Whether or not the email should be marked as a favorite.
    EmailUpdateResponseDto:
      type: object
      required:
        - transaction
      properties:
        transaction:
          type: object
          properties:
            id:
              type: string
              example: NWybzclJ9BdPb-5Op193
            status:
              type: string
              example: initializing
            createdAt:
              type: string
              format: date-time
              example: '2020-11-11T02:13:13.102Z'
            processingStart:
              type: string
              format: date-time
              example: '2015-09-25T20:26:48.393Z'
            processingFinish:
              type: string
              format: date-time
              example: '2015-09-25T20:26:49.687Z'
            retryCount:
              type: integer
              example: 0
            emails:
              type: array
              items:
                type: string
                example: OXH5daRNKTksAAZcmyjR
            emailList:
              $ref: '#/components/schemas/EmailListDto'
            receiptList:
              $ref: '#/components/schemas/ReceiptListArrayDto'
            receipts:
              $ref: '#/components/schemas/ReceiptArrayDto'
    MerchantsDto:
      type: object
      properties:
        merchants:
          type: array
          items:
            type: object
            properties:
              merchantID:
                type: string
                example: amazon
              name:
                type: string
                example: Amazon
              receiptCateogry:
                type: string
                example: General Retail
    UserSubmittedDataResponseDto:
      type: object
      properties:
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
        grandTotal:
          type: number
          example: 12.43
          description: The grand total amount of the receipt.
        merchantName:
          type: string
          example: Future Shop
          description: The full human-friendly name of the merchant
        receiptDate:
          type: string
          format: date
          example: '2019-06-23T13:09:37.000Z'
          description: The date and time on the receipt.
    PrivateMetaDataDto:
      type: object
      description: Custom private data that clients can add to the receipt for later search and retrieval. Other clients can not view or search on this data. The data is limited to 5 KB.
    TransactionListDto:
      type: object
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/TransactionDto'
      required:
        - transactions
    TransactionDto:
      type: object
      properties:
        id:
          type: string
        status:
          $ref: '#/components/schemas/TransactionStatusEnum'
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - status
        - createdAt
    TransactionStatusEnum:
      type: string
      enum:
        - initializing
        - queued
        - processing
        - incomplete
        - completed
        - failed
        - stopped
    AchievementDto:
      type: object
      description: A single achievement object
      properties:
        code:
          type: string
          description: Unique code for a achievement
        type:
          $ref: '#/components/schemas/AchievementTypeEnum'
        earnedOn:
          type: string
          description: Date time field in UTC to track when this achievement was earned
          format: date-time
        celebrated:
          type: boolean
          description: Flag to check if the achievement is celebrated
        order:
          type: integer
          description: 'The order in which this achievement will appear in the list of achievements. This field is used for sorting in the GET call. If earnedOn is not specified in the sortBy field and sortOrder is Asc then achievements are sent back in order from low to high. If earnedOn is specified and sortOrder is Asc, all earned achievements are sent in order from low to high then unearned achievements are clubbed together from order low to high to form a response.'
        steps:
          type: array
          description: Steps (if any) to earn the parent achievement
          items:
            $ref: '#/components/schemas/StepDto'
      required:
        - code
        - type
        - earnedOn
        - celebrated
        - order
        - steps
    StepDto:
      type: object
      description: Steps to an aggregated achievement
      properties:
        code:
          type: string
          description: Unique code for a achievement
        earnedOn:
          type: string
          description: Date time field in UTC to track when this achievement was earned
          format: date-time
        order:
          type: integer
          description: The order in which this achievement will appear in the list of step achievements
      required:
        - code
        - earnedOn
        - order
    GetAchievementsResponseDto:
      type: object
      description: GetAchievements response dto
      properties:
        achievements:
          type: array
          description: List of achievements of all types except badge_step which will be returned inside the badge it belongs
          items:
            $ref: '#/components/schemas/AchievementDto'
      required:
        - achievements
    AchievementTypeEnum:
      type: string
      description: Types of a achievement
      enum:
        - badge_streak
        - badge_simple
        - badge_aggregate
        - badge_milestone
    AchievementsStateFilterEnum:
      type: string
      description: Allowed values for the state filter for Achievements
      default: all
      enum:
        - all
        - earnedAndNotCelebrated
        - notEarned
    GetInsightsResponseDto:
      type: object
      description: GetInsights response dto
      properties:
        insights:
          type: array
          description: List of insights of the current user based on the filter passed. The "startIndex" and "limit" params will define the page and size of this list.
          items:
            $ref: '#/components/schemas/InsightDto'
        totalFilteredRecords:
          type: number
          description: 'total number of insights for the user existing in the system. If a filter of type was passed, this will only count the records of that type'
      required:
        - insights
        - totalFilteredRecords
    InsightDto:
      type: object
      description: A single insight object belonging to an user
      properties:
        code:
          type: string
          description: Unique code for an insight.
        type:
          $ref: '#/components/schemas/InsightTypeEnum'
        generatedOn:
          type: string
          description: Date time field in UTC to track when this insight was generated
          format: date-time
        customData:
          type: array
          description: Custom data related to the insight
          items:
            $ref: '#/components/schemas/InsightCustomDataDto'
      required:
        - code
        - type
        - generatedOn
        - customData
    InsightTypeEnum:
      type: string
      description: Types of an insight
      enum:
        - insight_tip
        - insight_trend
    InsightCustomDataDto:
      type: object
      description: Custom data to an insight
      properties:
        key:
          type: string
          description: Name of the Custom data field.
        value:
          type: string
          description: Value of the Custom data field
        type:
          $ref: '#/components/schemas/InsightCustomDataTypeEnum'
      required:
        - key
        - value
        - type
    InsightCustomDataTypeEnum:
      type: string
      description: This defines the type of the value on the "customData". This will help the client application know when it should format or localize the value
      enum:
        - string
        - date
        - number
    ConfidenceEnum:
      type: string
      enum:
        - LOW
        - MEDIUM
        - HIGH
        - USER
    GetReceiptDataResponseDto:
      type: object
      properties:
        receipt:
          $ref: '#/components/schemas/ReceiptDataDto'
    ReceiptDataDto:
      type: object
      properties:
        id:
          type: string
          example: z6uuM0iqnvf8sCDBRYLJ
        arrivalDateTime:
          type: string
          format: date
          example: '2017-10-26T16:01:13.836Z'
        accountURL:
          type: string
          example: www.example.com
        content:
          $ref: '#/components/schemas/ContentDto'
        confidence:
          $ref: '#/components/schemas/ConfidenceDto'
        userMetadata:
          $ref: '#/components/schemas/UserMetadataDto'
        accountMetadata:
          $ref: '#/components/schemas/AccountMetadataDto'
        type:
          $ref: '#/components/schemas/ReceiptTypesEnum'
        sourceDocument:
          $ref: '#/components/schemas/SourceDocumentDto'
        status:
          $ref: '#/components/schemas/ReceiptStatusDto'
        clientPrivateMetaData:
          type: object
        rawOcr:
          type: string
          description: 'The raw ocr text extracted from the receipt, This value will only be provided for the data format'
          example: |
            TRINITY COMMON/
            303 AUGUSTA AVE M5T2M2/
            TORONTO ON/
            20768770
            GW2076877002

            ****  PURCHASE  **** 

            08-18-2015 20:23:21
            Acct # *** *** ********5555 C

            ** /**
            Exp Date  /  Card Type MC
            Name: 
             A0000000041010 Card

            Trace # 1111
            Inv. # 1111
            Auth # 099999 RRN 001111111

            Purchase  $22.65
            Tip  $5.66
            Total  $28.31
             100 ) APPROVED-THANK YOU

            this copy for your
            records
            Customer copy
    ContentDto:
      properties:
        countryCode:
          $ref: '#/components/schemas/CountryCode'
        languageCode:
          type: string
          description: The language the original receipt is in.
          example: english
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
        purchaseDate:
          type: string
          format: date
          description: 'The date on which this purchase was made. This is only the date component of  the local time at which the purchase was made, with no explicit timezone information. see: ''purchaseTime''. Date is in ISO-8601 format.'
          example: '2017-09-01'
        purchaseTime:
          description: 'The time at which the purchase was made. This is only the time component of the local time at which the purchase was made, with no explicit timezone information.'
          type: string
          example: '12:31:06'
        orderURL:
          type: string
          description: A link which the user can visit to get more details about their order.
        accountURL:
          type: string
          example: A link which the user can visit to get more details about an account they hold with the merchant.
        savings:
          description: Sum total of all savings found on the receipt.
          type: number
          example: 12.3
        customer:
          $ref: '#/components/schemas/CustomerDto'
        barcodes:
          type: array
          description: A list of barcodes available on the receipt.
          items:
            $ref: '#/components/schemas/BarcodeDto'
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/DiscountDto'
        fees:
          type: array
          items:
            $ref: '#/components/schemas/FeeDto'
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemDto'
        totalBeforeDiscountsFeesTips:
          $ref: '#/components/schemas/TaxableAmountDto'
        totalBeforeTips:
          $ref: '#/components/schemas/TaxableAmountDto'
        total:
          $ref: '#/components/schemas/TaxableAmountDto'
        tenders:
          type: array
          items:
            $ref: '#/components/schemas/TenderDto'
        merchant:
          $ref: '#/components/schemas/MerchantDto'
        deliveries:
          type: array
          items:
            $ref: '#/components/schemas/DeliveryDto'
        tips:
          description: Any gratuities included.
          type: array
          items:
            $ref: '#/components/schemas/TaxableAmountDto'
    ReceiptDataListConfidenceDto:
      type: object
      properties:
        currencyCode:
          $ref: '#/components/schemas/ConfidenceEnum'
        purchaseDate:
          $ref: '#/components/schemas/ConfidenceEnum'
        purchaseTime:
          $ref: '#/components/schemas/ConfidenceEnum'
        total:
          $ref: '#/components/schemas/TaxableAmountConfidenceDto'
        tenders:
          type: array
          items:
            $ref: '#/components/schemas/TenderConfidenceDto'
        merchant:
          $ref: '#/components/schemas/MerchantConfidenceDto'
    ConfidenceDto:
      allOf:
        - $ref: '#/components/schemas/ReceiptDataListConfidenceDto'
      properties:
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/DiscountConfidenceDto'
        fees:
          type: array
          items:
            $ref: '#/components/schemas/FeeConfidenceDto'
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemConfidenceDto'
        totalBeforeDiscountsFeesTips:
          $ref: '#/components/schemas/TaxableAmountConfidenceDto'
        totalBeforeTips:
          $ref: '#/components/schemas/TaxableAmountConfidenceDto'
        deliveries:
          type: array
          items:
            $ref: '#/components/schemas/EmptyObjectResponseDto'
        tips:
          type: array
          items:
            $ref: '#/components/schemas/TaxableAmountConfidenceDto'
    CountryCode:
      type: string
      description: 2 character country code (lower case)
      enum:
        - ca
        - us
        - uk
        - ie
        - es
        - nl
    CustomerDto:
      description: Information about the customer as presented on the receipt.
      type: object
      properties:
        customerID:
          type: string
          description: An ID assigned to the customer by the merchant.
          example: 9357630YHE
        billingAddressLines:
          description: The billing address the customer has provided defined as an array of address lines.
          type: array
          items:
            type: string
            example: '[''1 Finite Loop Cupertino'', ''CA 95014'']'
        email:
          type: string
          example: john@example.com
        name:
          type: string
          example: john doe
        telephoneNumber:
          type: string
          example: 905-123-1232
    BarcodeDto:
      description: Describes a barcode as read from a receipt.
      type: object
      properties:
        text:
          description: Data contained in the barcode.
          type: string
        type:
          description: 'Original type of barcode, eg: UPC, EAN, QR'
          type: string
          example: UPC
    DiscountDto:
      description: Contains info about one applied discount.
      allOf:
        - $ref: '#/components/schemas/TaxableAmountDto'
      properties:
        description:
          description: A user-presentable description of this discount.
          type: string
          example: 10.00%
        methodCode:
          description: A code used by the merchant to identify this discount
          type: string
          example: Home Sense
        percent:
          description: 'May be set if this discount is percent based, where a value of N represents an N% discount.'
          type: number
          example: Home Sense
        type:
          $ref: '#/components/schemas/DiscountTypesEnum'
    DiscountConfidenceDto:
      properties:
        beforeTax:
          $ref: '#/components/schemas/ConfidenceEnum'
        afterTax:
          $ref: '#/components/schemas/ConfidenceEnum'
    DiscountTypesEnum:
      description: May be set to describe how this discount was obtained.
      type: string
      enum:
        - general
        - coupon
    FeeDto:
      description: Contains info about one applied fee.
      allOf:
        - $ref: '#/components/schemas/TaxableAmountDto'
      properties:
        description:
          description: A user-presentable description of this fee.
          type: string
        type:
          $ref: '#/components/schemas/FeeTypesEnum'
    FeeConfidenceDto:
      properties:
        beforeTax:
          $ref: '#/components/schemas/ConfidenceEnum'
        afterTax:
          $ref: '#/components/schemas/ConfidenceEnum'
    FeeTypesEnum:
      description: May be set to give more details on the type of fee.
      type: string
      enum:
        - donation
        - shipping
        - duties
        - general
    ItemDto:
      properties:
        description:
          description: An additional description of an item.
          type: string
          example: Sony Big TV
        brand:
          type: string
          description: The brand name of this item.
          example: Sony
        buyLink:
          type: string
          description: A link to this item on the retailer's website.
          example: 'https://www.example.com/buy/123'
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/DiscountDto'
        fees:
          type: array
          items:
            $ref: '#/components/schemas/FeeDto'
        imageUrl:
          type: string
          description: A url to an image of this item.
          example: 'https://example.com/somepath/1.png'
        itemIDs:
          description: 'A set of strings set by the merchant to identify this item. The meaning of these values vary by merchant, and are not guaranteed to be unique in any way.'
          type: array
          items:
            type: string
            example: wh1000xm2
        listPrice:
          $ref: '#/components/schemas/TaxableAmountDto'
        loyaltyRewards:
          $ref: '#/components/schemas/LoyaltyRewardsDto'
        name:
          type: string
          description: 'A user-presentable name for this item, which should be the main content of the line item.'
          example: ''
        price:
          $ref: '#/components/schemas/TaxableAmountDto'
        priceBeforeDiscountsFees:
          $ref: '#/components/schemas/TaxableAmountDto'
        properties:
          description: Will be used to define miscellaneous item properties.
          type: array
          items:
            type: object
            properties:
              name:
                description: A name that describes this property.
                example: color
                type: string
              value:
                description: The value for this property.
                type: string
                example: red
        serialNumbers:
          description: The serial number of the item.
          type: array
          items:
            type: string
            example: 1142961142968QWICA
        sku:
          type: string
          description: The SKU for this item as is on the receipt.
          example: 11429681A/2
        unitListPrice:
          $ref: '#/components/schemas/TaxableAmountDto'
        unitOfMeasure:
          type: string
          description: The unit of measure of the item.
          example: L
        unitPrice:
          $ref: '#/components/schemas/TaxableAmountDto'
        unitQuantity:
          type: number
          description: The quantity of units of the item. If there is a unit of measure this will be the quantity of the specified units of measure.
          example: 2
    ItemConfidenceDto:
      properties:
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/DiscountConfidenceDto'
        fees:
          type: array
          items:
            $ref: '#/components/schemas/FeeConfidenceDto'
        listPrice:
          $ref: '#/components/schemas/TaxableAmountConfidenceDto'
        loyaltyRewards:
          $ref: '#/components/schemas/ConfidenceEnum'
        price:
          $ref: '#/components/schemas/TaxableAmountConfidenceDto'
        priceBeforeDiscountsFees:
          $ref: '#/components/schemas/TaxableAmountConfidenceDto'
        unitListPrice:
          $ref: '#/components/schemas/TaxableAmountConfidenceDto'
        unitOfMeasure:
          $ref: '#/components/schemas/ConfidenceEnum'
        unitPrice:
          $ref: '#/components/schemas/TaxableAmountConfidenceDto'
        unitQuantity:
          $ref: '#/components/schemas/ConfidenceEnum'
    LoyaltyRewardsDto:
      description: Describes loyalty rewards read from the receipt.
      properties:
        accountNumber:
          type: string
          description: Loyalty rewards account number
          example: AN-4535-6628
        currentBalance:
          type: number
          description: The current balance of the rewards program after adding the number of loyalty points.
          example: 10500
        nextRewardLevel:
          type: number
          description: The milestone number of points needed to reach the next level of the rewards program.
          example: 15000
        pointsAwarded:
          type: number
          description: The total number of points awarded for a given receipt or line item.
          example: 500
        programName:
          type: number
          description: Loyalty rewards program name.
          example: PC Optimum
    TaxableAmountDto:
      type: object
      properties:
        taxes:
          type: array
          items:
            $ref: '#/components/schemas/TaxDto'
        beforeTax:
          type: number
          example: 12.2
        afterTax:
          type: number
          example: 12.2
    TaxableAmountConfidenceDto:
      type: object
      properties:
        taxes:
          type: array
          items:
            $ref: '#/components/schemas/TaxConfidenceDto'
        beforeTax:
          $ref: '#/components/schemas/ConfidenceEnum'
        afterTax:
          $ref: '#/components/schemas/ConfidenceEnum'
    TenderDto:
      type: object
      properties:
        amount:
          type: number
          description: The amount paid with this tender.
          example: 9.99
        cashBack:
          type: number
          description: Cash back amount if applicable.
          example: 9.99
        changeAdjustment:
          type: number
          description: The difference between the changeDue and the changeIssued amounts.
          example: 9.99
        changeDue:
          type: number
          description: Change due amount for cash tender types.
          example: 9.99
        changeIssued:
          type: number
          description: ' Change amount that was actually issued (after rounding if any) for cash tender types.'
          example: 9.99
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
        maskedCardNumber:
          type: string
          description: A masked version of the card (if any) used in the payment. Typically in the format **** NNNN for the last 4 digits of a credit card but MAY be different if other cards like gift cards are used.
          example: '**** 9900'
        type:
          $ref: '#/components/schemas/TenderTypesEnum'
    TenderConfidenceDto:
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/ConfidenceEnum'
        changeDue:
          $ref: '#/components/schemas/ConfidenceEnum'
        changeIssued:
          $ref: '#/components/schemas/ConfidenceEnum'
    TenderTypesEnum:
      description: The method of payment used.
      type: string
      enum:
        - Amex
        - Cash
        - Check
        - Coupon
        - Credit
        - CreditDebit
        - CustomerAccount
        - Debit
        - DinersClub
        - Fleet
        - GiftCard
        - GiftCertificate
        - HouseAccount
        - Interac
        - InternationalMaestro
        - Loyalty
        - MasterCard
        - Paypal
        - Prepaid
        - StoreCard
        - StoredValue
        - TravelersCheck
        - UKMaestro
        - VisaCredit
        - VisaDebit
        - Visa
        - Voucher
    MerchantDto:
      type: object
      properties:
        addressLines:
          type: array
          items:
            type: string
        merchantID:
          type: string
          example: homesense
        name:
          type: string
          example: Home Sense
        email:
          type: string
          example: Home Sense
        geoLocation:
          type: string
          example: +43.6645326-79.3845407
        storeID:
          type: string
          example: Home Sense
        telephone:
          type: string
          example: (647) 258-0801
        channel:
          $ref: '#/components/schemas/OrderChannelTypesEnum'
        categoryCode:
          type: string
          example: shopping
        taxIdNumber:
          type: string
          example: 11111 1111 RT0001
        url:
          type: string
          example: Home Sense
    MerchantConfidenceDto:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ConfidenceEnum'
        categoryCode:
          $ref: '#/components/schemas/ConfidenceEnum'
    OrderChannelTypesEnum:
      type: string
      description: Indicates if the receipt came from a brick and mortar or online channel. Not related to format of receipt.
      enum:
        - online
        - physical
    DeliveryDto:
      type: object
      description: 'Details about an expected delivery. Note: these details are as they appear on the receipt, they are NOT updated automatically'
      properties:
        addressLines:
          type: array
          items:
            type: string
          description: ''
        courier:
          $ref: '#/components/schemas/CourierDto'
        deliveryType:
          $ref: '#/components/schemas/DeliveryTypesEnum'
        expectedShipmentDate:
          type: string
          format: date
        name:
          type: string
          description: ''
        telephoneNumber:
          type: string
          description: ''
        trackingNumber:
          type: string
          description: ''
    CourierDto:
      description: Information about the courier being used.
      type: object
      properties:
        name:
          type: string
          description: A user-presentable name for the courier.
        serviceLevel:
          type: string
          description: A user-presentable shipping service level used.
          example: Express Air Mail
    DeliveryTypesEnum:
      type: string
      description: Type of delivery
      enum:
        - pickup
        - delivery
        - shipping
    UserMetadataDto:
      properties:
        expenseType:
          $ref: '#/components/schemas/ExpenseTypesEnum'
        folders:
          type: array
          items:
            type: string
          description: ''
        isNew:
          type: boolean
          description: ''
        notes:
          type: string
          description: ''
        warrantyPeriod:
          type: object
          description: The details about the warranty period for the receipt.
          properties:
            unit:
              type: string
              description: 'Date period time unit which can be any of these values- day, week, month, year. This parameter should be used together with the ''duration'' parameter. Also in order to use it the receipt must have the ''receiptDate'' set or it should be supplied as another edit parameter within the same request.'
            duration:
              type: integer
              description: Number of date period time units which defines the duration of the date period in question. This parameter should be used together with the 'unit' parameter. Also in order to use it the receipt must have the 'receiptDate' set or it should be supplied as another edit parameter within the same request.
            calculatedDate:
              type: string
              description: The calculated date based on the receipt date and the duration of the warranty.
        returnPeriod:
          type: object
          description: The details about the return period for the receipt.
          properties:
            unit:
              type: string
              description: 'Date period time unit which can be any of these values- day, week, month, year. This parameter should be used together with the ''duration'' parameter. Also in order to use it the receipt must have the ''receiptDate'' set or it should be supplied as another edit parameter within the same request.'
            duration:
              type: integer
              description: Number of date period time units which defines the duration of the date period in question. This parameter should be used together with the 'unit' parameter. Also in order to use it the receipt must have the 'receiptDate' set or it should be supplied as another edit parameter within the same request.
            calculatedDate:
              type: string
              description: The calculated date based on the receipt date and the duration of the return.
    AccountMetadataDto:
      properties:
        transaction:
          $ref: '#/components/schemas/MatchedAccountTransactionDto'
    SourceDocumentDto:
      properties:
        format:
          description: The format type of document.
          $ref: '#/components/schemas/SourceDocumentFormatsEnum'
        url:
          type: string
          description: 'The url to get or view the original receipt file (image, PDF or html)'
        imagePreview:
          type: string
          description: 'The url of an image file to preview this receipt. In case of image receipts, this content will be the same of the url field.'
    SourceDocumentFormatsEnum:
      description: Defines the possible original formats for a receipt to have come from.
      type: string
      enum:
        - html
        - image
        - pdf
        - text
    ReceiptStatusDto:
      description: Contains metadata about the lifecycle of this receipt.
      properties:
        lastUpdateDateTime:
          description: The last time any change was made to this receipt. The date is in the ISO-8601 format.
          type: string
          format: date-time
        lifecycleStatus:
          $ref: '#/components/schemas/LifecycleStatusesEnum'
  parameters:
    ClientIDParameter:
      name: client_id
      in: query
      schema:
        type: string
      required: true
      description: 'This is the Client Key which you received when you created a developer account with Sensibill. It is a very long, random string encoded in base64.'
    ResponseTypeParameter:
      name: response_type
      in: query
      schema:
        type: string
      required: true
      description: 'This is the type of authorization grant being requested by the client. The only valid value here is "code", and must be sent by the client (it isn''t filled in by default).'
    RedirectURIParameter:
      name: redirect_uri
      in: query
      schema:
        type: string
      required: true
      description: 'This is the URL which the user-agent should be redirected to if the login is successful. This is mostly only required by web-application clients which would like to access a Sensibill user''s account, server-based clients which are handling authentication themselves (such as SSO) will likely ignore the redirect_uri and may even have to intercept the redirect in a user-agent. Note that while some clients may not need a redirection, all clients must provide a redirect uri in accordance with the OAuth2 standard. This is true even if you set <code>redirect=false</code> below. _You must always have a redirect_uri,  even if you don''t use redirects. Always._'
    CredentialTypeParameter:
      name: credential_type
      in: query
      schema:
        type: string
        default: sensibill
      required: false
      description: 'This represents the type of credentials that are being used to authenticate the user. The default is to authenticate a user using the email address and password that they provided to Sensibill when they registered. Some clients, referred to as SSO clients, will handle their own authentication. They can provide a credential_type to indicate what type of credentials they are using to authenticate a user. An example here might be "abc_321_bank_internal", indicating the credentials are stored internally by ABC321 Bank servers. Users may have multiple credentials stored, and thus can be identified in multiple ways by third party systems.'
    RedirectParameter:
      name: redirect
      in: query
      schema:
        type: string
        default: 'true'
      required: false
      description: Can be either "true" or "false". Tells whether or not the authorizationGrant endpoint will issue a redirect if it successfully authenticates the user. Some clients which are unable to intercept a redirect might need to use this so that they can get the authorizationCode directly within the body.
    GrantTypeParameter:
      name: grant_type
      in: query
      schema:
        type: string
      required: true
      description: 'This is the type of authentication the client is presenting for its access-token. <br/><br/>If the client is looking for a client-token, then this should be set to ''client_credentials''. <br/><br/>If the client is looking to swap an authorization grant for an access token, this should be set to ''authorization_code'' <br/><br/>If the client is looking to swap a refresh_token for a new access token, this should be set to ''refresh_token'''
    TokenRedirectURIParameter:
      name: redirect_uri
      in: query
      schema:
        type: string
      required: true
      description: 'If the client is swapping an authorization code for an access token, then this argument is required. If you are just obtaining a client token directly, you do not need to provide a redirect_uri. This must be the same redirect_uri that was provided to the authorizationGrant endpoint, and must also match the redirect_uri which was registered with your client when you received your client credentials.'
    CodeParameter:
      name: code
      in: query
      schema:
        type: string
      required: true
      description: 'If the client is swapping an authorization code for an access token, then this argument is required. If you are just obtaining a client token directly, you do not need to provide a code. This parameter is the authorization_code which you obtained when you used the <code>/authorizationGrant</code> endpoint.'
    RefreshTokenParameter:
      name: refresh_token
      in: query
      schema:
        type: string
      required: true
      description: 'If the client is swapping a refresh_token for an access token, then this argument is required. Otherwise, this parameter should be omitted. This parameter is the refresh_token which you obtained when you last used the <code>/accessToken</code> endpoint.'
    UserIdParameter:
      name: userID
      in: path
      description: A unique ID that identifies this user in the Sensibill system. It can be 'me' to reference the user associated with the access token.
      required: true
      schema:
        type: string
    ExcludeAlertsParameter:
      name: excludeAlerts
      in: query
      required: false
      schema:
        type: boolean
      description: 'With this flag set to true, the alerts for the user are omitted. You can retrieve the counts and objects for alerts using the /users/:userID/counts endpoint.'
    UserCountFiltersParameter:
      name: filters
      in: query
      required: true
      schema:
        type: string
        enum:
          - attentionRequired
          - tenderCategoryCash
          - tenderCategoryCredit
          - tenderCategoryDebit
          - tenderCategoryGiftCard
          - validationRequired
          - recentlyAdded
          - nonReceiptEmails
          - triggeredReminders
      description: 'Comma separated list of filters you would like to get resource count
        for. If not provided, it will return the count for all supported filters and resources associated with them.
        <br/><br/>NOTE: If the "triggeredReminders" filter is used then you have to provide the "today" parameter too.'
    UserCountTodayParameter:
      name: today
      in: query
      required: true
      schema:
        type: string
      description: This is a date string (YYYY-MM-DD) that represents today's date on the user's device. This parameter is required if "triggeredReminders" filter is used because the server needs to know current date in user's timezone.
    DeleteUserExportParameter:
      name: export
      in: query
      required: false
      schema:
        type: boolean
      description: 'Specifies whether or not to fire off an export prior to deleting the user''s account. Should be either ''true'' or ''false''. '
    DeleteUserExportEmailParameter:
      name: exportEmail
      in: query
      required: false
      schema:
        type: string
      description: 'If you have requested an export, you may provide the email address you want the exported information to go to. If you do not supply an exportEmail, the email address for the user will be used.'
    LocaleParameter:
      name: locale
      in: query
      schema:
        type: string
      example: en-CA
      description: 'Allows you to specify the locale in which the response should be returned. It must be a supported value from the list of locale-codes, which can be obtained by going to <code>/lookups/locales</code>. It defaults to the user''s locale.'
    EmailParameter:
      name: email
      in: query
      required: true
      schema:
        type: string
        format: email
      example: test@test.com
      description: The email address for the user's account.
    ReceiptEmailParameter:
      name: email
      in: query
      required: true
      schema:
        type: string
        format: email
      example: test@test.com
      description: The email address to the user's receipt account.
    UsernameParameter:
      name: username
      in: query
      required: true
      schema:
        type: string
      example: tester
      description: The username to the user's account.
    UsernameAvailabilityCredentialTypeParameter:
      name: credentialType
      in: query
      required: false
      schema:
        type: string
      description: 'The credential type for your client''s users that you wish to check. If your client only has one credential type, this parameter may be omitted.'
    FolderIdParameter:
      name: folderId
      in: path
      description: A unique ID that identifies this folder in the Sensibill system.
      required: true
      schema:
        type: string
    FolderIdsParameter:
      name: folders
      in: query
      description: 'This is a list of folder IDs that you want deleted. It should be either an array in JSON form, or a comma separated list and may be passed as a query parameter or in a JSON body in the request.'
      required: true
      schema:
        type: string
        example: '6OeYUlNyyeVHEmHMLmgZ,ARpUx0qRIRdK7SZzG7Uo'
    DeleteFolderDeleteReceiptsParameter:
      name: delete_receipts
      in: query
      description: Soft delete any receipts that are in this folder. This means the receipt will stay in Sensibill's system but it will not be accessible by the user. This may be passed as a query parameter or in a JSON body in the request.
      required: false
      schema:
        type: boolean
        default: false
    DeleteFoldersDeleteReceiptsParameter:
      name: delete_receipts
      in: query
      description: Soft delete any receipts that are in this folder. This means the receipt will stay in Sensibill's system but it will not be accessible by the user. This may be passed as a query parameter or in a JSON body in the request.
      required: false
      schema:
        type: boolean
        default: false
    ReceiptIncludeSubrowsParameter:
      name: includeSubrows
      in: query
      required: false
      schema:
        type: boolean
      description: 'By default all of the receipts are returned. With this option set to true, linked payment and item receipts are returned as a single result in the list, giving the detail for just the item receipt. The <code>display</code> structure for the receipt will contain an array, <code>subrows</code>, with an entry for each of the individual receipts. This is only applicable if the format parameter is set to "display". Default value is false.'
    ReceiptsSearchParamsRemindersParameter:
      name: searchParams.reminders
      in: query
      required: false
      schema:
        type: string
        enum:
          - return
          - warranty
      description: 'This allows you to filter for receipts which have scheduled reminders of particular type. Should be used together with searchParams.reminderDateAfter. Valid reminder types are: return, warranty'
    ReceiptsSearchParamsReminderDateAfterParameter:
      name: searchParams.reminderDateAfter
      in: query
      required: false
      schema:
        type: string
        format: date
      description: Will only return receipts which have reminders with reminderDatePeriod.calculatedDate greater than the date provided. The date should be formatted as 'YYYY-MM-DD'.
    ScaleParameter:
      name: scale
      in: query
      required: false
      schema:
        type: string
        default: 3x
      description: This provides the scale factor to use for the images returned from the endpoint. Can be either '2x' or '3x'. Defaults to '3x' for higher resolution images.
    ReceiptIdParameter:
      name: id
      in: path
      description: A unique ID that identifies this receipt in the Sensibill system.
      required: true
      schema:
        type: string
    ReceiptFormatParameter:
      name: format
      in: query
      description: 'The desired response format:<br/>''data'' - returns only the receipt data structured conveniently for processing as well as confidence information for applicable fields.<br/>''display'' - returns receipt data together with UI related information like colors and localized texts'
      required: false
      schema:
        type: string
        default: display
        enum:
          - display
          - data
    ReceiptExcludeRawParameter:
      name: excludeRawObjects
      in: query
      description: If this parameter is true only the display information will be returned. This is only applicable if the format parameter is set to "display". Default value is false.
      required: false
      schema:
        type: boolean
    ReceiptVersionParameter:
      name: versionNumber
      in: query
      description: Version number of the receipt. If the receipt is reprocessed a new version is created. By default the latest version is returned.
      required: false
      schema:
        type: string
    ReceiptLocaleParameter:
      name: locale
      in: query
      description: 'Allows you to specify the locale in which the response should be returned. It must be a supported value from the list of locale-codes, which can be obtained by going to /lookups/locales. It defaults to the user''s locale. This is only applicable if the format parameter is set to "display".'
      required: false
      schema:
        type: string
    ReceiptScaleParameter:
      name: scale
      in: query
      description: This provides the scale factor to use for the images returned from the endpoint. Can be either '2x' or '3x'. Defaults to '3x' for higher resolution images. This is only applicable if the format parameter is set to "display".
      required: false
      schema:
        type: string
    ReceiptClearRecentlyAddedParameter:
      name: clearRecentlyAdded
      in: query
      description: If this flag is set to true the "recentlyAdded" flag will be set to true. That's also the default behaviour.
      required: false
      schema:
        type: boolean
    ReceiptTodayParameter:
      name: today
      in: query
      description: 'This is a date string (YYYY-MM-DD) that represents today''s date on the user''s device. This parameter is required for the reminders section of the receiptDisplay structure. If it is not provided, the reminders section will not be included in the response. This is only applicable if the format parameter is set to ''display''.'
      required: false
      schema:
        type: string
    ReceiptIncludeRawOcrParameter:
      name: includeRawOcr
      in: query
      description: If this parameter is true the raw ocr text extracted from the receipt will also be returned. This is only applicable if the format parameter is set to "data".
      required: false
      schema:
        type: boolean
        default: false
    TransactionIdParameter:
      name: id
      in: path
      description: A unique ID that identifies this transaction in the Sensibill system.
      required: true
      schema:
        type: string
    TransactionTimeoutParameter:
      name: timeout
      in: query
      description: Number of milliseconds to wait for a response. The default is 5 minutes.
      required: false
      schema:
        type: integer
        default: 300000
    ReceiptIdsParameter:
      name: ids
      in: query
      description: 'An array of receipt IDs for deletion. It should be either an array in JSON form, or a comma separated list and may be passed as a query parameter or in a JSON body in the request.'
      required: true
      schema:
        type: string
        example: '6OeYUlNyyeVHEmHMLmgZ,ARpUx0qRIRdK7SZzG7Uo'
    ReceiptsFilterParameter:
      name: filter
      in: query
      description: Name of the filter to be applied for filtering. 'Filter' is the shortcut for a group of prespecified fields (and their respective values) for which the query results needs to be filtered by. This parameter can not be used with 'searchParams' as they are mutually exclusive.
      required: false
      schema:
        $ref: '#/components/schemas/GetReceiptFilterSearchParam'
    ReceiptsStartIndexParameter:
      name: startIndex
      in: query
      description: 'Start index of the resources to be returned. Typically used to jump to a specific position in the resource history based on its order. Example for starting at the second item in a list of results: ?startIndex=2.'
      required: false
      schema:
        type: integer
        default: 0
    ReceiptsSearchParamsFulltextParameter:
      name: searchParams.fulltext
      in: query
      description: 'Will perform a full text search on the following properties of a receipt: receipt number, merchant name, total amount, product name and description, SKUs, serial numbers, 4 digit masked card number, type of tender (visa, mastercard, debit, cash). When performing a full text search the results are sorted by their relevancy to the search criteria.'
      required: false
      schema:
        type: string
    ReceiptsSearchParamsPrivateMetaDataParameter:
      name: searchParams.privateMetaData.<property>
      in: query
      description: Will perform a search on the specified property of the private meta data that the client has added to the receipt. Pass an array to search for receipts that have a property in the list of values that you provide.
      required: false
      schema:
        type: string
    ReceiptsSearchParamsDateToParameter:
      name: searchParams.dateTo
      in: query
      description: 'Will only return receipts where the receipt date is just before midnight on the specified date. The date should be formatted YYYY-MM-DD and does not include a time component. Example: 2011-08-30'
      required: false
      schema:
        type: string
    ReceiptsSearchParamsDateFromParameter:
      name: searchParams.dateFrom
      in: query
      description: 'Will only return receipts where the receipt date is from midnight onwards on the specified date. The date should be formatted YYYY-MM-DD and does not include a time component. Example: 2011-08-30. For convenience specifying last30, last90 or lastyear will retrieve the last 30 days, last 90 day or last year respectively from the dateTo parameter (defined above).'
      required: false
      schema:
        type: string
    ReceiptsSearchParamsUpdatedAfterParameter:
      name: searchParams.updatedAfter
      in: query
      description: 'Will only return receipts where the receipt updatedAt date is after the specified date. The value may or may not include time and should adhere to the ISO-8601 specification. Example: 2011-08-30 or 2011-08-30T01:23:47Z'
      required: false
      schema:
        type: string
    ReceiptsSearchParamsSharedMetaDataTagsParameter:
      name: searchParams.sharedMetaData.tags
      in: query
      description: 'Will only return receipts that are tagged with one or more of the tags specified. Tags are added by updating sharedMetaData.note and using #hashtags in the text. When searching, do not include the hashtag symbol. Example: travel. To specify an array, use a comma delimited list as in: searchParams.sharedMetaData.tags=electronics,books'
      required: false
      schema:
        type: string
    ReceiptsSearchParamsSharedMetaDataExpenseTypeParameter:
      name: searchParams.sharedMetaData.expenseType
      in: query
      description: Will only return receipts that have been categorized under the given expense type. Expense type can be either 'business' or 'personal'
      required: false
      schema:
        $ref: '#/components/schemas/ExpenseTypesEnum'
    ReceiptsSearchParamsSharedMetaDataExcludeFolderParameter:
      name: searchParams.sharedMetaData.excludeFolder
      in: query
      description: Will only return receipts that are not in the given folder ID. The folder IDs should match those set on the user that the receipt belongs to.
      required: false
      schema:
        type: string
    ReceiptsSearchParamsSharedMetaDataFoldersParameter:
      name: searchParams.sharedMetaData.folders
      in: query
      description: Will only return receipts that are in one or more of the folder IDs specified. The folder IDs should match those set on the user that the receipt belongs to. This can be a comma separated list if you need receipts from multiple different folders.
      required: false
      schema:
        type: string
    ReceiptsSearchParamsSharedMetaDataFavorite:
      name: searchParams.sharedMetaData.favorite
      in: query
      description: 'If true, will only return receipts that are favorited. If false, will only return receipts that aren''t favorited.'
      required: false
      schema:
        type: boolean
    ReceiptsSearchParamsSharedMetaDataReceiptCategoriesParameter:
      name: searchParams.sharedMetaData.receiptCategories
      in: query
      description: 'Will return receipts that are categorized with one or more of the receipt categories specified. To specify an array, use a comma delimited list as in: searchParams.sharedMetaData.receiptCategories=kids,education Use the /lookups/receiptcategories endpoint for a list of valid categories.'
      required: false
      example: 'kids,education'
      schema:
        type: string
    ReceiptsSearchParamsCurrencyCodeParameter:
      name: searchParams.currencyCode
      in: query
      description: Will return receipts where the grand total matches the given currency code or one of the codes given
      required: false
      example: 'CAD,USD'
      schema:
        type: string
    ReceiptsSearchParamsTenderTypeParameter:
      name: searchParams.tenderType
      in: query
      description: 'Will return receipts that have a particular payment method. Note that there is some overlap, e.g. codes such as CreditDebit and Visa can match the same receipt. Invalid values will be ignored completely.'
      required: false
      example: Visa
      schema:
        $ref: '#/components/schemas/TenderTypesEnum'
    ReceiptsSearchParamsLifecycleStatusParameter:
      name: searchParams.lifecycleStatus
      in: query
      description: 'Will only return receipts where the lifecycle status is one of the following: <br/><br/><code>active</code> - at a minimum, the receipt has the merchant name, date, and total amount. <br/><br/><code>pending_validation</code> - the receipt requires user validation. <br/><br/><code>deleted</code> - the receipt has been deleted by the user. Only returns the receipt ID and lifecycleStatus. <br/><br/>To specify an array, use a comma delimited list as in: <code>searchParams.lifecycleStatus=active,pending_validation</code>'
      required: false
      example: 'active,pending_validation'
      schema:
        type: string
    ReceiptsSearchParamsExportedParameter:
      name: searchParams.exported
      in: query
      description: 'If true, will only include receipts which have been successfully exported, in any format. If false, will exclude any receipts that have ever been exported.'
      required: false
      schema:
        type: boolean
    ReceiptsSearchParamsAccountTransactionDataParameter:
      name: searchParams.accountTransactionData.<property>
      in: query
      description: 'Will perform a search on the specified property of accountTransactionData that the user has added to the receipt. Pass an array to search for receipts that have a property in the list of values that you provide. <br/>Please note: To specify multiple values for the same property, pass in the parameter <code>searchParams.accountTransactionData.&lt;property&gt;</code> multiple times. For example: <br/><code>searchParams.accountTransactionData.id=1&searchParams.accountTransactionData.id=2</code>'
      required: false
      schema:
        type: array
        items:
          type: string
    ReceiptsSearchParamsAccountTransactionDataIdParameter:
      name: searchParams.accountTransactionData.id
      in: query
      description: Will perform a search on the property of accountTransactionData.id that the user has added to the receipt.
      required: false
      schema:
        type: array
        items:
          type: string
    ReceiptsSearchParamsMerchantIdParameter:
      name: searchParams.merchantID
      in: query
      description: The Sensibill specific ID number of the merchant if known.
      required: false
      schema:
        type: string
    ReceiptsSearchParamsReceiptIdsParameter:
      name: searchParams.receiptIDs
      in: query
      description: The Sensibill specific identifiers for the receipts.
      required: false
      schema:
        type: array
        items:
          type: string
    ReceiptsSearchParamsReceiptNumberParameter:
      name: searchParams.receiptNumber
      in: query
      description: 'The receipt number for this receipt, as provided by the original receipt provider.'
      required: false
      schema:
        type: string
    ReceiptsSearchParamsSourceParameter:
      name: searchParams.source
      in: query
      description: The original format of the receipt as submitted by the user.
      required: false
      schema:
        $ref: '#/components/schemas/ReceiptSource'
    ReceiptsSearchParamsOperatorNameParameter:
      name: searchParams.operatorName
      in: query
      description: The description of the merchant's agent that accommodated the transaction.
      required: false
      schema:
        type: string
    ReceiptsSortByParameter:
      name: sortBy
      in: query
      description: 'Field of the receipt that will be used to sort the result in descending order. For now, the only accpetable value is arrivalDateTime'
      required: false
      schema:
        type: string
        enum:
          - arrivalDateTime
    ReceiptsLimitParameter:
      name: limit
      in: query
      description: 'Number of receipts to return. Has a maximum value of 20 if searchParams.fulltext has not been set, and 100 if it has been set.'
      required: false
      schema:
        type: integer
        default: 20
    LimitParameter:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        default: 20
        example: 40
      description: 'Number of results to return. If not provided, defaults to 20. Max value is 100.'
    StartIndexParameter:
      name: startIndex
      in: query
      required: false
      schema:
        type: integer
        example: 2
        default: 0
      description: Start index of the resources to be returned. Typically used to jump to a specific position in the resource history based on its order. If not provided defaults to 0.
    SearchParamsReminderDateFromParameter:
      name: searchParams.reminderDateFrom
      in: query
      required: false
      schema:
        type: string
        example: '2016-01-01'
      description: Will only return reminders where the reminderDatePeriod.calculatedDate is greater than or equal to the reminderDate provided. The date should be formatted as 'YYYY-MM-DD'.
    SearchParamsReminderDateToParameter:
      name: searchParams.reminderDateTo
      in: query
      required: false
      schema:
        type: string
        example: '2016-01-01'
      description: Will only return reminders where the reminderDatePeriod.calculatedDate is less than or equal to the reminderDate provided. The date should be formatted as 'YYYY-MM-DD'.
    SearchParamsReceiptIDParameter:
      name: searchParams.receiptID
      in: query
      required: false
      schema:
        type: string
        example: KABKK-KKIlEHkId8jH8I
      description: 'ID of the receipt for which the reminders should be returned. NOTE: This is the ''externalID'' field of the Receipt object associated with this reminder.'
    RemindersTodayParameter:
      name: today
      in: query
      required: false
      schema:
        type: string
      description: This is a date string (YYYY-MM-DD) that represents today's date on the user's device. This parameter is required if the 'triggeredReminders' filter is used because the server needs to know the current date in the user's timezone.
    RemindersFilterParameter:
      name: filter
      in: query
      required: false
      schema:
        type: string
        enum:
          - triggeredReminders
      description: Name of the filter to be applied for filtering. 'Filter' is the shortcut for a group of prespecified fields (and their respective values) for which the query result needs to be filtered by. This parameter can not be used with 'searchParams' as they are mutually exclusive.
    ReminderIdParameter:
      name: id
      in: path
      description: A unique ID that identifies this reminder in the Sensibill system.
      required: true
      schema:
        type: string
    RemindersIdsParameter:
      name: ids
      in: query
      required: false
      schema:
        type: string
        example: '[''elCUvS4DJhlwYxTBm8dl'',''SafFqT7ZrYJ1CMvm'']'
      description: 'An array of reminder IDs for deletion. It should be either an array in JSON form, or a comma separated list and may be passed as a query parameter or in a JSON body in the request. Cannot be used with ''deleteAll''.'
    RemindersDeleteAllParameter:
      name: deleteAll
      in: query
      required: false
      schema:
        type: boolean
        example: 'true'
      description: A flag used to delete all reminders for a user. Cannot be used used with 'ids'.
    ExportIdParameter:
      name: id
      in: path
      description: A unique ID that identifies this export in the Sensibill system.
      required: true
      schema:
        type: string
    EmailFilterParameter:
      name: filter
      in: query
      required: false
      schema:
        type: string
        enum:
          - nonReceiptEmails
      description: Name of the filter to be applied for filtering. 'Filter' is the shortcut for a group of prespecified fields (and their respective values) for which the query result needs to be filtered by. This parameter can not be used with 'searchParams' as they are mutually exclusive.
    EmailLimitParameter:
      name: limit
      in: query
      required: false
      schema:
        default: 20
        type: integer
      description: Number of emails to return. The maximum value is 100.
    EmailsSearchParamsClassificationParameter:
      name: searchParams.classification
      in: query
      required: false
      schema:
        type: string
      description: 'Request emails with particular classifications. To specify an array, use a comma delimited list of classifications. Only emails matching one of the given classifications will be included in the results. Valid classifications are: nonreceipt, item_receipt, marketing, payment_receipt, shipping_confirmation, income, invoice, cancellation, spam, other. Passing in nonreceipt is the same as passing in all of the non-receipt classification types. Current receipt classifications are: item_receipt, payment_receipt, invoice.'
    EmailSearchParamsStatusParameter:
      name: searchParams.status
      in: query
      required: false
      schema:
        type: string
      description: 'Request emails with particular statuses. To specify an array, use a comma delimited list of statuses. Only emails matching one of the given statuses will be included in the results. Valid statuses are: active, deleted'
    EmailIdParameter:
      name: emailID
      in: path
      description: A unique ID that identifies this email in the Sensibill system.
      required: true
      schema:
        type: string
    EmailAuthNonceParameter:
      name: nonce
      in: query
      description: This is just a long random string. It is used to ensure that signed URLs can not be used twice.
      required: true
      schema:
        type: string
    EmailAuthTokenIdParameter:
      name: token_id
      in: query
      description: Your token Id
      required: true
      schema:
        type: string
    EmailAuthSignatureParameter:
      name: signature
      in: query
      description: 'A signature using HMAC-SHA256: The input is your canonical string, and the private key is your OAuth 2.0 Bearer token. Your signature should be formatted in Hexadecimal.'
      required: true
      schema:
        type: string
    EmailsIdsParameter:
      name: ids
      in: query
      required: false
      schema:
        type: string
      description: 'An array of email IDs for deletion. It should be either an array in JSON form, or a comma separated list and may be passed as a query parameter or in a JSON body in the request.'
    EmailsClassificationParameter:
      name: classification
      in: query
      required: false
      schema:
        type: string
      description: 'An array of email classifications for deletion. Submitting ''nonreceipt'' in this parameter will delete all emails that do not have the emailCategory ''item_receipt'' or ''payment_receipt''. It should be either an array in JSON form, or a comma separated list and may be passed as a query parameter or in a JSON body in the request. To delete by classification only the classification parameter can be present. If the ''ids'' parameter is also present in the request, only the email ids will be taken into account for deletion.'
    MerchantsNameParameter:
      name: name
      in: query
      required: false
      schema:
        type: string
      description: An optional name to perform a prefix search on.
  requestBodies:
    JwtAuthenticateRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JwtAuthenticateRequestDto'
    AccessTokenRequest:
      description: Access Token Request
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AccessTokenRequestDto'
    UserRequest:
      description: Register a user
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserRequestDto'
    JwtUserRequest:
      description: Register a user
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JwtUserRequestDto'
    UserUpdateRequest:
      description: Update a user
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserUpdateDto'
    FolderRequest:
      description: Add a new folder for a user
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FolderRequestDto'
    FolderUpdateRequest:
      description: Add a new folder for a user
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FolderUpdateRequestDto'
    FolderDeleteRequest:
      description: Delete a folder for a user
      required: false
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FolderDeleteRequestDto'
    FoldersDeleteRequest:
      description: Delete multiple folders for a user
      required: false
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FoldersDeleteRequestDto'
    AddReceiptsToFolderRequest:
      description: Add multiple receipts to a folder
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AddReceiptsToFolderDto'
    RemoveReceiptsFromFolderRequest:
      description: Remove multiple receipts from a folder
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RemoveReceiptsFromFolderDto'
    ReceiptsDeleteRequest:
      description: Batch delete receipts
      required: false
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReceiptsDeleteRequestDto'
    ReceiptCreateRequest:
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/ReceiptCreateDto'
          encoding:
            image1:
              contentType: image/jpeg
            base64_image1:
              contentType: application/jpeg
            file:
              contentType: 'image/jpeg, application/pdf'
            base64_file:
              contentType: 'application/jpeg, application/pdf'
    ReceiptUpdateRequest:
      description: Update receipt
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReceiptUpdateDto'
    ReceiptEditRequest:
      description: Edit receipt
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReceiptEditRequestDto'
    ReceiptUpdateDuplicateRequest:
      description: Edit receipt duplicate status
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReceiptUpdateDuplicateRequestDto'
    RemindersDeleteRequest:
      description: Bulk delete reminders
      required: false
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RemindersDeleteRequestDto'
    ReminderCreateRequest:
      description: Create a reminder
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReminderCreateDto'
    ReminderUpdateRequest:
      description: Create a reminder
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReminderUpdateDto'
    ExportCreateRequest:
      description: Create a receipt export
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExportCreateDto'
    EmailUpdateRequest:
      description: Update an email
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EmailUpdateRequestDto'
    EmailsDeleteRequest:
      description: Batch delete emails
      required: false
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EmailsDeleteRequestDto'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
